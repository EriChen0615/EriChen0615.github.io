<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Huggingface datasets</title>
    <link href="/2021/10/01/Huggingface-datasets/"/>
    <url>/2021/10/01/Huggingface-datasets/</url>
    
    <content type="html"><![CDATA[<p>Excerpts from <a href="https://huggingface.co/docs/datasets/quicktour.html">https://huggingface.co/docs/datasets/quicktour.html</a></p><p>🤗 Datasets is a library for easily accessing and sharing datasets, and evaluation metrics for Natural Language Processing (NLP), computer vision, and audio tasks.</p><h1 id="Tutorial"><a href="#Tutorial" class="headerlink" title="Tutorial"></a>Tutorial</h1><h2 id="Load-a-dataset"><a href="#Load-a-dataset" class="headerlink" title="Load a dataset"></a>Load a dataset</h2><p>Before you take the time to download a dataset, it is often helpful to quickly get all the relevant information about a dataset. The <a href="https://huggingface.co/docs/datasets/package_reference/loading_methods.html#datasets.load_dataset_builder"><code>datasets.load_dataset_builder()</code></a> method allows you to inspect the attributes of a dataset without downloading it.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset_builder<br><span class="hljs-meta">&gt;&gt;&gt; </span>dataset_builder = load_dataset_builder(<span class="hljs-string">&#x27;imdb&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(dataset_builder.cache_dir)<br>/Users/thomwolf/.cache/huggingface/datasets/imdb/plain_text/<span class="hljs-number">1.0</span><span class="hljs-number">.0</span>/fdc76b18d5506f14b0646729b8d371880ef1bc48a26d00835a7f3da44004b676<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(dataset_builder.info.features)<br>&#123;<span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], names_file=<span class="hljs-literal">None</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(dataset_builder.info.splits)<br>&#123;<span class="hljs-string">&#x27;train&#x27;</span>: SplitInfo(name=<span class="hljs-string">&#x27;train&#x27;</span>, num_bytes=<span class="hljs-number">33432835</span>, num_examples=<span class="hljs-number">25000</span>, dataset_name=<span class="hljs-string">&#x27;imdb&#x27;</span>), <span class="hljs-string">&#x27;test&#x27;</span>: SplitInfo(name=<span class="hljs-string">&#x27;test&#x27;</span>, num_bytes=<span class="hljs-number">32650697</span>, num_examples=<span class="hljs-number">25000</span>, dataset_name=<span class="hljs-string">&#x27;imdb&#x27;</span>), <span class="hljs-string">&#x27;unsupervised&#x27;</span>: SplitInfo(name=<span class="hljs-string">&#x27;unsupervised&#x27;</span>, num_bytes=<span class="hljs-number">67106814</span>, num_examples=<span class="hljs-number">50000</span>, dataset_name=<span class="hljs-string">&#x27;imdb&#x27;</span>)&#125;<br></code></pre></td></tr></table></figure><p>Once you are happy with the dataset you want, load it in a single line with <a href="https://huggingface.co/docs/datasets/package_reference/loading_methods.html#datasets.load_dataset"><code>datasets.load_dataset()</code></a>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset<br><span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;glue&#x27;</span>, <span class="hljs-string">&#x27;mrpc&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)<br></code></pre></td></tr></table></figure><p>You need to:</p><ol><li>specify the dataset</li><li>specify the configuration</li><li>specify the split [optional]</li></ol><p>signature: <code>load_dataset(&lt;path&gt;, &lt;configuraion&gt;)</code></p><p>Some datasets, like the <a href="https://huggingface.co/datasets/glue">General Language Understanding Evaluation (GLUE)</a> benchmark, are actually made up of several datasets. These sub-datasets are called <strong>configurations</strong>, and you must explicitly select one when you load the dataset.</p><p>Use <code>get_dataset_config_names</code> to <strong>retrieve a list of all the possible configurations</strong> available to your dataset:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> get_dataset_config_names<br><br>configs = get_dataset_config_names(<span class="hljs-string">&quot;glue&quot;</span>)<br><span class="hljs-built_in">print</span>(configs)<br><span class="hljs-comment"># [&#x27;cola&#x27;, &#x27;sst2&#x27;, &#x27;mrpc&#x27;, &#x27;qqp&#x27;, &#x27;stsb&#x27;, &#x27;mnli&#x27;, &#x27;mnli_mismatched&#x27;, &#x27;mnli_matched&#x27;, &#x27;qnli&#x27;, &#x27;rte&#x27;, &#x27;wnli&#x27;, &#x27;ax&#x27;]</span><br></code></pre></td></tr></table></figure><p>A <strong>split</strong> is a specific subset of the dataset like <code>train</code> and <code>test</code>. Make sure you select a split when you load a dataset. If you don’t supply a <code>split</code> argument, 🤗 Datasets will only return a dictionary containing the subsets of the dataset.</p><p>You can list the split names for a dataset, or a specific configuration, with the <a href="https://huggingface.co/docs/datasets/package_reference/loading_methods.html#datasets.get_dataset_split_names"><code>datasets.get_dataset_split_names()</code></a> method:</p><h2 id="The-Dataset-Object"><a href="#The-Dataset-Object" class="headerlink" title="The Dataset Object"></a>The <code>Dataset</code> Object</h2><h3 id="Metadata"><a href="#Metadata" class="headerlink" title="Metadata"></a>Metadata</h3><p>The <a href="https://huggingface.co/docs/datasets/package_reference/main_classes.html#datasets.Dataset"><code>datasets.Dataset</code></a> object contains a lot of useful information about your dataset. For example, call <code>dataset.info</code> to return a short description of the dataset, the authors, and even the dataset size. This will give you a quick snapshot of the datasets most important attributes.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>dataset.info<br>DatasetInfo(<br>    description=<span class="hljs-string">&#x27;GLUE, the General Language Understanding Evaluation benchmark\n(https://gluebenchmark.com/) is a collection of resources for training,\nevaluating, and analyzing natural language understanding systems.\n\n&#x27;</span>,<br>    citation=<span class="hljs-string">&#x27;@inproceedings&#123;dolan2005automatically,\n  title=&#123;Automatically constructing a corpus of sentential paraphrases&#125;,\n  author=&#123;Dolan, William B and Brockett, Chris&#125;,\n  booktitle=&#123;Proceedings of the Third International Workshop on Paraphrasing (IWP2005)&#125;,\n  year=&#123;2005&#125;\n&#125;\n@inproceedings&#123;wang2019glue,\n  title=&#123;&#123;GLUE&#125;: A Multi-Task Benchmark and Analysis Platform for Natural Language Understanding&#125;,\n  author=&#123;Wang, Alex and Singh, Amanpreet and Michael, Julian and Hill, Felix and Levy, Omer and Bowman, Samuel R.&#125;,\n  note=&#123;In the Proceedings of ICLR.&#125;,\n  year=&#123;2019&#125;\n&#125;\n&#x27;</span>, homepage=<span class="hljs-string">&#x27;https://www.microsoft.com/en-us/download/details.aspx?id=52398&#x27;</span>,<br>    license=<span class="hljs-string">&#x27;&#x27;</span>,<br>    features=&#123;<span class="hljs-string">&#x27;sentence1&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;sentence2&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;not_equivalent&#x27;</span>, <span class="hljs-string">&#x27;equivalent&#x27;</span>], names_file=<span class="hljs-literal">None</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;idx&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)&#125;, post_processed=<span class="hljs-literal">None</span>, supervised_keys=<span class="hljs-literal">None</span>, builder_name=<span class="hljs-string">&#x27;glue&#x27;</span>, config_name=<span class="hljs-string">&#x27;mrpc&#x27;</span>, version=<span class="hljs-number">1.0</span><span class="hljs-number">.0</span>, splits=&#123;<span class="hljs-string">&#x27;train&#x27;</span>: SplitInfo(name=<span class="hljs-string">&#x27;train&#x27;</span>, num_bytes=<span class="hljs-number">943851</span>, num_examples=<span class="hljs-number">3668</span>, dataset_name=<span class="hljs-string">&#x27;glue&#x27;</span>), <span class="hljs-string">&#x27;validation&#x27;</span>: SplitInfo(name=<span class="hljs-string">&#x27;validation&#x27;</span>, num_bytes=<span class="hljs-number">105887</span>, num_examples=<span class="hljs-number">408</span>, dataset_name=<span class="hljs-string">&#x27;glue&#x27;</span>), <span class="hljs-string">&#x27;test&#x27;</span>: SplitInfo(name=<span class="hljs-string">&#x27;test&#x27;</span>, num_bytes=<span class="hljs-number">442418</span>, num_examples=<span class="hljs-number">1725</span>, dataset_name=<span class="hljs-string">&#x27;glue&#x27;</span>)&#125;,<br>    download_checksums=&#123;<span class="hljs-string">&#x27;https://dl.fbaipublicfiles.com/glue/data/mrpc_dev_ids.tsv&#x27;</span>: &#123;<span class="hljs-string">&#x27;num_bytes&#x27;</span>: <span class="hljs-number">6222</span>, <span class="hljs-string">&#x27;checksum&#x27;</span>: <span class="hljs-string">&#x27;971d7767d81b997fd9060ade0ec23c4fc31cbb226a55d1bd4a1bac474eb81dc7&#x27;</span>&#125;, <span class="hljs-string">&#x27;https://dl.fbaipublicfiles.com/senteval/senteval_data/msr_paraphrase_train.txt&#x27;</span>: &#123;<span class="hljs-string">&#x27;num_bytes&#x27;</span>: <span class="hljs-number">1047044</span>, <span class="hljs-string">&#x27;checksum&#x27;</span>: <span class="hljs-string">&#x27;60a9b09084528f0673eedee2b69cb941920f0b8cd0eeccefc464a98768457f89&#x27;</span>&#125;, <span class="hljs-string">&#x27;https://dl.fbaipublicfiles.com/senteval/senteval_data/msr_paraphrase_test.txt&#x27;</span>: &#123;<span class="hljs-string">&#x27;num_bytes&#x27;</span>: <span class="hljs-number">441275</span>, <span class="hljs-string">&#x27;checksum&#x27;</span>: <span class="hljs-string">&#x27;a04e271090879aaba6423d65b94950c089298587d9c084bf9cd7439bd785f784&#x27;</span>&#125;&#125;,<br>    download_size=<span class="hljs-number">1494541</span>,<br>    post_processing_size=<span class="hljs-literal">None</span>,<br>    dataset_size=<span class="hljs-number">1492156</span>,<br>    size_in_bytes=<span class="hljs-number">2986697</span><br>)<br></code></pre></td></tr></table></figure><h3 id="Features-and-columns"><a href="#Features-and-columns" class="headerlink" title="Features and columns"></a>Features and columns</h3><p>A dataset is a table of rows and typed columns. <strong>Querying a dataset returns a Python dictionary</strong> where the keys correspond to column names, and the values correspond to column values:</p><p>List the columns names with <a href="https://huggingface.co/docs/datasets/package_reference/main_classes.html#datasets.Dataset.column_names"><code>datasets.Dataset.column_names()</code></a>:</p><p>Get detailed information about the columns with <code>datasets.Dataset.features</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>dataset.shape<br>(<span class="hljs-number">3668</span>, <span class="hljs-number">4</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>dataset.num_columns<br><span class="hljs-number">4</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>dataset.num_rows<br><span class="hljs-number">3668</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">len</span>(dataset)<br><span class="hljs-number">3668</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>dataset.column_names<br>[<span class="hljs-string">&#x27;idx&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;sentence1&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>dataset.features<br>&#123;<span class="hljs-string">&#x27;idx&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),<br>    <span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;not_equivalent&#x27;</span>, <span class="hljs-string">&#x27;equivalent&#x27;</span>], names_file=<span class="hljs-literal">None</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),<br>    <span class="hljs-string">&#x27;sentence1&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),<br>    <span class="hljs-string">&#x27;sentence2&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),<br>&#125;<br></code></pre></td></tr></table></figure><p>Return even more specific information about a feature like <a href="https://huggingface.co/docs/datasets/package_reference/main_classes.html#datasets.ClassLabel"><code>datasets.ClassLabel</code></a>, by calling its parameters <code>num_classes</code> and <code>names</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>dataset.features[<span class="hljs-string">&#x27;label&#x27;</span>].num_classes<br><span class="hljs-number">2</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>dataset.features[<span class="hljs-string">&#x27;label&#x27;</span>].names<br>[<span class="hljs-string">&#x27;not_equivalent&#x27;</span>, <span class="hljs-string">&#x27;equivalent&#x27;</span>]<br></code></pre></td></tr></table></figure><h3 id="Rows-slices-batches-and-columns"><a href="#Rows-slices-batches-and-columns" class="headerlink" title="Rows, slices, batches, and columns"></a>Rows, slices, batches, and columns</h3><p>Get several rows of your dataset at a time with slice notation or a list of indices:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>dataset[:<span class="hljs-number">3</span>]<br>&#123;<span class="hljs-string">&#x27;idx&#x27;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>],<br>    <span class="hljs-string">&#x27;label&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>],<br>    <span class="hljs-string">&#x27;sentence1&#x27;</span>: [<span class="hljs-string">&#x27;Amrozi accused his brother , whom he called &quot; the witness &quot; , of deliberately distorting his evidence .&#x27;</span>, <span class="hljs-string">&quot;Yucaipa owned Dominick &#x27;s before selling the chain to Safeway in 1998 for $ 2.5 billion .&quot;</span>, <span class="hljs-string">&#x27;They had published an advertisement on the Internet on June 10 , offering the cargo for sale , he added .&#x27;</span>],<br>    <span class="hljs-string">&#x27;sentence2&#x27;</span>: [<span class="hljs-string">&#x27;Referring to him as only &quot; the witness &quot; , Amrozi accused his brother of deliberately distorting his evidence .&#x27;</span>, <span class="hljs-string">&quot;Yucaipa bought Dominick &#x27;s in 1995 for $ 693 million and sold it to Safeway for $ 1.8 billion in 1998 .&quot;</span>, <span class="hljs-string">&quot;On June 10 , the ship &#x27;s owners had published an advertisement on the Internet , offering the explosives for sale .&quot;</span>]<br>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>dataset[[<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>]]<br>&#123;<span class="hljs-string">&#x27;idx&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>],<br>    <span class="hljs-string">&#x27;label&#x27;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>],<br>    <span class="hljs-string">&#x27;sentence1&#x27;</span>: [<span class="hljs-string">&quot;Yucaipa owned Dominick &#x27;s before selling the chain to Safeway in 1998 for $ 2.5 billion .&quot;</span>, <span class="hljs-string">&#x27;Around 0335 GMT , Tab shares were up 19 cents , or 4.4 % , at A $ 4.56 , having earlier set a record high of A $ 4.57 .&#x27;</span>, <span class="hljs-string">&#x27;Revenue in the first quarter of the year dropped 15 percent from the same period a year earlier .&#x27;</span>],<br>    <span class="hljs-string">&#x27;sentence2&#x27;</span>: [<span class="hljs-string">&quot;Yucaipa bought Dominick &#x27;s in 1995 for $ 693 million and sold it to Safeway for $ 1.8 billion in 1998 .&quot;</span>, <span class="hljs-string">&#x27;Tab shares jumped 20 cents , or 4.6 % , to set a record closing high at A $ 4.57 .&#x27;</span>, <span class="hljs-string">&quot;With the scandal hanging over Stewart &#x27;s company , revenue the first quarter of the year dropped 15 percent from the same period a year earlier .&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><p>Querying by the column name will return its values. For example, if you want to only return the first three examples:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&#x27;sentence1&#x27;</span>][:<span class="hljs-number">3</span>]<br>[<span class="hljs-string">&#x27;Amrozi accused his brother , whom he called &quot; the witness &quot; , of deliberately distorting his evidence .&#x27;</span>, <span class="hljs-string">&quot;Yucaipa owned Dominick &#x27;s before selling the chain to Safeway in 1998 for $ 2.5 billion .&quot;</span>, <span class="hljs-string">&#x27;They had published an advertisement on the Internet on June 10 , offering the cargo for sale , he added .&#x27;</span>]<br></code></pre></td></tr></table></figure><h2 id="Train-with-Datasets"><a href="#Train-with-Datasets" class="headerlink" title="Train with Datasets"></a>Train with Datasets</h2><p>By default, all the dataset columns are returned as Python objects. But you can bridge the gap between a Python object and your machine learning framework by setting the format of a dataset. Formatting casts the columns into compatible PyTorch or TensorFlow types.</p><h3 id="Tokenize"><a href="#Tokenize" class="headerlink" title="Tokenize"></a>Tokenize</h3><p>See notes in <a href="transformers.md">transformers</a> for tokenizer</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertTokenizerFast<br><span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = BertTokenizerFast.from_pretrained(<span class="hljs-string">&#x27;bert-base-cased&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>encoded_dataset = dataset.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> examples: tokenizer(examples[<span class="hljs-string">&#x27;sentence1&#x27;</span>]), batched=<span class="hljs-literal">True</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>encoded_dataset.column_names<br>[<span class="hljs-string">&#x27;sentence1&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;idx&#x27;</span>, <span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>encoded_dataset[<span class="hljs-number">0</span>]<br>&#123;<span class="hljs-string">&#x27;sentence1&#x27;</span>: <span class="hljs-string">&#x27;Amrozi accused his brother , whom he called &quot; the witness &quot; , of deliberately distorting his evidence .&#x27;</span>,<br><span class="hljs-string">&#x27;sentence2&#x27;</span>: <span class="hljs-string">&#x27;Referring to him as only &quot; the witness &quot; , Amrozi accused his brother of deliberately distorting his evidence .&#x27;</span>,<br><span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,<br><span class="hljs-string">&#x27;idx&#x27;</span>: <span class="hljs-number">0</span>,<br><span class="hljs-string">&#x27;input_ids&#x27;</span>: [  <span class="hljs-number">101</span>,  <span class="hljs-number">7277</span>,  <span class="hljs-number">2180</span>,  <span class="hljs-number">5303</span>,  <span class="hljs-number">4806</span>,  <span class="hljs-number">1117</span>,  <span class="hljs-number">1711</span>,   <span class="hljs-number">117</span>,  <span class="hljs-number">2292</span>, <span class="hljs-number">1119</span>,  <span class="hljs-number">1270</span>,   <span class="hljs-number">107</span>,  <span class="hljs-number">1103</span>,  <span class="hljs-number">7737</span>,   <span class="hljs-number">107</span>,   <span class="hljs-number">117</span>,  <span class="hljs-number">1104</span>,  <span class="hljs-number">9938</span>, <span class="hljs-number">4267</span>, <span class="hljs-number">12223</span>, <span class="hljs-number">21811</span>,  <span class="hljs-number">1117</span>,  <span class="hljs-number">2554</span>,   <span class="hljs-number">119</span>,   <span class="hljs-number">102</span>],<br><span class="hljs-string">&#x27;token_type_ids&#x27;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],<br><span class="hljs-string">&#x27;attention_mask&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Format"><a href="#Format" class="headerlink" title="Format"></a>Format</h3><p>Set the format with <a href="https://huggingface.co/docs/datasets/package_reference/main_classes.html#datasets.Dataset.set_format"><code>datasets.Dataset.set_format()</code></a>, which accepts two main arguments:</p><ol><li><code>type</code> defines the type of column to cast to. For example, <code>torch</code> returns PyTorch tensors and <code>tensorflow</code> returns TensorFlow tensors.</li><li><code>columns</code> specifies which columns should be formatted.</li></ol><p>After you set the format, wrap the dataset in a <code>torch.utils.data.DataLoader</code> or a <code>tf.data.Dataset</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer<br><span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;glue&#x27;</span>, <span class="hljs-string">&#x27;mrpc&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&#x27;bert-base-cased&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> e: tokenizer(e[<span class="hljs-string">&#x27;sentence1&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-string">&#x27;max_length&#x27;</span>), batched=<span class="hljs-literal">True</span>)<br>...<br><span class="hljs-meta">&gt;&gt;&gt; </span>dataset.set_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;torch&#x27;</span>, columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span>dataloader = torch.utils.data.DataLoader(dataset, batch_size=<span class="hljs-number">32</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(dataloader))<br>&#123;<span class="hljs-string">&#x27;attention_mask&#x27;</span>: tensor([[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,  ..., <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],<br>                         ...,<br>                         [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,  ..., <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]]),<br><span class="hljs-string">&#x27;input_ids&#x27;</span>: tensor([[  <span class="hljs-number">101</span>,  <span class="hljs-number">7277</span>,  <span class="hljs-number">2180</span>,  ...,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>],<br>                    ...,<br>                    [  <span class="hljs-number">101</span>,  <span class="hljs-number">1109</span>,  <span class="hljs-number">4173</span>,  ...,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>]]),<br><span class="hljs-string">&#x27;label&#x27;</span>: tensor([<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>]),<br><span class="hljs-string">&#x27;token_type_ids&#x27;</span>: tensor([[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,  ..., <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],<br>                         ...,<br>                         [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,  ..., <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]])&#125;<br></code></pre></td></tr></table></figure><h2 id="Evaluate-Predictions"><a href="#Evaluate-Predictions" class="headerlink" title="Evaluate Predictions"></a>Evaluate Predictions</h2><p>🤗 Datasets provides various common and NLP-specific <a href="https://huggingface.co/metrics">metrics</a> for you to measure your models performance. In this section of the tutorials, you will load a metric and use it to evaluate your models predictions.</p><p>You can see what metrics are available with <a href="https://huggingface.co/docs/datasets/package_reference/loading_methods.html#datasets.list_metrics"><code>datasets.list_metrics()</code></a></p><h3 id="Load-Metric"><a href="#Load-Metric" class="headerlink" title="Load Metric"></a>Load Metric</h3><p>It is very easy to load a metric with 🤗 Datasets. In fact, you will notice that it is very similar to loading a dataset! Load a metric from the Hub with <a href="https://huggingface.co/docs/datasets/package_reference/loading_methods.html#datasets.load_metric"><code>datasets.load_metric()</code></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric<br><span class="hljs-meta">&gt;&gt;&gt; </span>metric = load_metric(<span class="hljs-string">&#x27;glue&#x27;</span>, <span class="hljs-string">&#x27;mrpc&#x27;</span>)<br></code></pre></td></tr></table></figure><p>This will load the metric associated with the MRPC dataset from the GLUE benchmark.</p><h3 id="Metrics-Object"><a href="#Metrics-Object" class="headerlink" title="Metrics Object"></a>Metrics Object</h3><p>Before you begin using a <a href="https://huggingface.co/docs/datasets/package_reference/main_classes.html#datasets.Metric"><code>datasets.Metric</code></a> object, you should get to know it a little better. As with a dataset, you can return some basic information about a metric. For example, use <code>datasets.Metric.inputs_description</code> to get more information about a metrics expected input format and some usage examples:</p><h3 id="Compute-metric"><a href="#Compute-metric" class="headerlink" title="Compute metric"></a>Compute metric</h3><p>Once you have loaded a metric, you are ready to use it to evaluate a models predictions. Provide the model predictions and references to <a href="https://huggingface.co/docs/datasets/package_reference/main_classes.html#datasets.Metric.compute"><code>datasets.Metric.compute</code></a>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;&gt; model_predictions = model(model_inputs)<br><span class="hljs-meta">&gt;&gt;&gt; </span>final_score = metric.compute(predictions=model_predictions, references=gold_references)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Huggingface</tag>
      
      <tag>Programming</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Huggingface transformers</title>
    <link href="/2021/10/01/Huggingface-transformers/"/>
    <url>/2021/10/01/Huggingface-transformers/</url>
    
    <content type="html"><![CDATA[<p>Excerpts from <a href="https://huggingface.co/docs/transformers/quicktour">https://huggingface.co/docs/transformers/quicktour</a></p><h1 id="Quick-Tour"><a href="#Quick-Tour" class="headerlink" title="Quick Tour"></a>Quick Tour</h1><p>Let’s have a quick look at the huggingface 🤗 Transformers library features. The library downloads pretrained models for Natural Language Understanding (NLU) tasks, such as analyzing the sentiment of a text, and Natural Language Generation (NLG), such as completing a prompt with new text or translating in another language.</p><h2 id="Getting-started-with-a-pipeline"><a href="#Getting-started-with-a-pipeline" class="headerlink" title="Getting started with a pipeline"></a>Getting started with a pipeline</h2><p>Let’s see how this work for sentiment analysis (the other tasks are all covered in the <a href="https://huggingface.co/transformers/task_summary.html">task summary</a>):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline<br><span class="hljs-meta">&gt;&gt;&gt; </span>classifier = pipeline(<span class="hljs-string">&#x27;sentiment-analysis&#x27;</span>)<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>classifier(<span class="hljs-string">&#x27;We are very happy to show you the 🤗 Transformers library.&#x27;</span>)<br>[&#123;<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;POSITIVE&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9998</span>&#125;]<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>results = classifier([<span class="hljs-string">&quot;We are very happy to show you the 🤗 Transformers library.&quot;</span>,<br><span class="hljs-meta">... </span>           <span class="hljs-string">&quot;We hope you don&#x27;t hate it.&quot;</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> result <span class="hljs-keyword">in</span> results:<br><span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;label: <span class="hljs-subst">&#123;result[<span class="hljs-string">&#x27;label&#x27;</span>]&#125;</span>, with score: <span class="hljs-subst">&#123;<span class="hljs-built_in">round</span>(result[<span class="hljs-string">&#x27;score&#x27;</span>], <span class="hljs-number">4</span>)&#125;</span>&quot;</span>)<br>label: POSITIVE, <span class="hljs-keyword">with</span> score: <span class="hljs-number">0.9998</span><br>label: NEGATIVE, <span class="hljs-keyword">with</span> score: <span class="hljs-number">0.5309</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">transformers.pipeline(*task: <span class="hljs-built_in">str</span>*, *model: <span class="hljs-type">Optional</span> = <span class="hljs-literal">None</span>*, *config: <span class="hljs-type">Optional</span>[<span class="hljs-type">Union</span>[<span class="hljs-built_in">str</span>, transformers.configuration_utils.PretrainedConfig]] = <span class="hljs-literal">None</span>*, *tokenizer: <span class="hljs-type">Optional</span>[<span class="hljs-type">Union</span>[<span class="hljs-built_in">str</span>, transformers.tokenization_utils.PreTrainedTokenizer]] = <span class="hljs-literal">None</span>*, *feature_extractor: <span class="hljs-type">Optional</span>[<span class="hljs-type">Union</span>[<span class="hljs-built_in">str</span>, SequenceFeatureExtractor]] = <span class="hljs-literal">None</span>*, *framework: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">str</span>] = <span class="hljs-literal">None</span>*, *revision: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">str</span>] = <span class="hljs-literal">None</span>*, *use_fast: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">True</span>*, *use_auth_token: <span class="hljs-type">Optional</span>[<span class="hljs-type">Union</span>[<span class="hljs-built_in">bool</span>, <span class="hljs-built_in">str</span>]] = <span class="hljs-literal">None</span>*, *model_kwargs: <span class="hljs-type">Dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-type">Any</span>] = &#123;&#125;*, ***kwargs*) → transformers.pipelines.base.Pipeline<br></code></pre></td></tr></table></figure><p>[<a href="https://huggingface.co/transformers/_modules/transformers/pipelines.html#pipeline">SOURCE]</a></p><p>Utility factory method to build a <a href="https://huggingface.co/transformers/main_classes/pipelines.html#transformers.Pipeline"><code>Pipeline</code></a>.</p><p>Pipelines are made of:</p><blockquote><ul><li>A <a href="https://huggingface.co/transformers/main_classes/tokenizer.html">tokenizer</a> in charge of mapping raw textual input to token.</li><li>A <a href="https://huggingface.co/transformers/main_classes/model.html">model</a> to make predictions from the inputs.</li><li>Some (optional) post processing for enhancing model’s output.</li></ul></blockquote><p>See <a href="https://huggingface.co/transformers/main_classes/pipelines.html#transformers.pipeline">documentation</a></p><h2 id="Pretrained-Model"><a href="#Pretrained-Model" class="headerlink" title="Pretrained Model"></a>Pretrained Model</h2><p>The model and tokenizer are created using the <code>from_pretrained</code> method</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, AutoModelForSequenceClassification<br><span class="hljs-meta">&gt;&gt;&gt; </span>model_name = <span class="hljs-string">&quot;distilbert-base-uncased-finetuned-sst-2-english&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>pt_model = AutoModelForSequenceClassification.from_pretrained(model_name)<br><span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(model_name)<br></code></pre></td></tr></table></figure><h3 id="Using-the-tokenizer"><a href="#Using-the-tokenizer" class="headerlink" title="Using the tokenizer"></a>Using the tokenizer</h3><p>We mentioned the tokenizer is responsible for the preprocessing of your texts. First, it will split a given text in words (or part of words, punctuation symbols, etc.) usually called tokens. There are multiple rules that can govern that process (you can learn more about them in the <a href="https://huggingface.co/transformers/tokenizer_summary.html">tokenizer summary</a>), which is why we need to instantiate the tokenizer using the name of the model, to make sure we use the same rules as when the model was pretrained.</p><p>The second step is to convert those tokens into numbers, to be able to build a tensor out of them and feed them to the model. To do this, the tokenizer has a <strong>vocab</strong>, which is the part we download when we instantiate it with the <code>from_pretrained</code> method, since we need to use the same vocab as when the model was pretrained.</p><p>To apply these steps on a given text, we can just feed it to our tokenizer:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;We are very happy to show you the 🤗 Transformers library.&quot;</span>)<br></code></pre></td></tr></table></figure><p>This returns a dictionary string to list of ints. It contains the <a href="https://huggingface.co/transformers/glossary.html#input-ids">ids of the tokens</a>, as mentioned before, but also additional arguments that will be useful to the model. Here for instance, we also have an <a href="https://huggingface.co/transformers/glossary.html#attention-mask">attention mask</a> that the model will use to have a better understanding of the sequence:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(inputs)<br>&#123;<span class="hljs-string">&#x27;input_ids&#x27;</span>: [<span class="hljs-number">101</span>, <span class="hljs-number">2057</span>, <span class="hljs-number">2024</span>, <span class="hljs-number">2200</span>, <span class="hljs-number">3407</span>, <span class="hljs-number">2000</span>, <span class="hljs-number">2265</span>, <span class="hljs-number">2017</span>, <span class="hljs-number">1996</span>, <span class="hljs-number">100</span>, <span class="hljs-number">19081</span>, <span class="hljs-number">3075</span>, <span class="hljs-number">1012</span>, <span class="hljs-number">102</span>],<br> <span class="hljs-string">&#x27;attention_mask&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]&#125;<br></code></pre></td></tr></table></figure><p>You can pass a list of sentences directly to your tokenizer. If your goal is to send them through your model as a batch, you probably want to pad them all to the same length, truncate them to the maximum length the model can accept and get tensors back. You can specify all of that to the tokenizer:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>pt_batch = tokenizer(<br><span class="hljs-meta">... </span>    [<span class="hljs-string">&quot;We are very happy to show you the 🤗 Transformers library.&quot;</span>, <span class="hljs-string">&quot;We hope you don&#x27;t hate it.&quot;</span>],<br><span class="hljs-meta">... </span>    padding=<span class="hljs-literal">True</span>,<br><span class="hljs-meta">... </span>    truncation=<span class="hljs-literal">True</span>,<br><span class="hljs-meta">... </span>    max_length=<span class="hljs-number">512</span>,<br><span class="hljs-meta">... </span>    return_tensors=<span class="hljs-string">&quot;pt&quot;</span><br><span class="hljs-meta">... </span>)<br></code></pre></td></tr></table></figure><p>The padding is automatically applied on the side expected by the model (in this case, on the right), with the padding token the model was pretrained with. The attention mask is also adapted to take the padding into account:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> pt_batch.items():<br><span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;key&#125;</span>: <span class="hljs-subst">&#123;value.numpy().tolist()&#125;</span>&quot;</span>)<br>input_ids: [[<span class="hljs-number">101</span>, <span class="hljs-number">2057</span>, <span class="hljs-number">2024</span>, <span class="hljs-number">2200</span>, <span class="hljs-number">3407</span>, <span class="hljs-number">2000</span>, <span class="hljs-number">2265</span>, <span class="hljs-number">2017</span>, <span class="hljs-number">1996</span>, <span class="hljs-number">100</span>, <span class="hljs-number">19081</span>, <span class="hljs-number">3075</span>, <span class="hljs-number">1012</span>, <span class="hljs-number">102</span>], [<span class="hljs-number">101</span>, <span class="hljs-number">2057</span>, <span class="hljs-number">3246</span>, <span class="hljs-number">2017</span>, <span class="hljs-number">2123</span>, <span class="hljs-number">1005</span>, <span class="hljs-number">1056</span>, <span class="hljs-number">5223</span>, <span class="hljs-number">2009</span>, <span class="hljs-number">1012</span>, <span class="hljs-number">102</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]]<br>attention_mask: [[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]]<br></code></pre></td></tr></table></figure><h3 id="Using-the-model"><a href="#Using-the-model" class="headerlink" title="Using the model"></a>Using the model</h3><p>Once your input has been preprocessed by the tokenizer, you can send it directly to the model. As we mentioned, it will contain all the relevant information the model needs. If you’re using a TensorFlow model, you can pass the dictionary keys directly to tensors, for a PyTorch model, you need to unpack the dictionary by adding <code>**</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>pt_outputs = pt_model(**pt_batch)<br></code></pre></td></tr></table></figure><p>Once your model is fine-tuned, you can save it with its tokenizer in the following way:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">tokenizer.save_pretrained(save_directory)<br>model.save_pretrained(save_directory)<br></code></pre></td></tr></table></figure><p>You can then load this model back using the <a href="https://huggingface.co/transformers/model_doc/auto.html#transformers.AutoModel.from_pretrained"><code>from_pretrained()</code></a> method by passing the directory name instead of the model name. One cool feature of 🤗 Transformers is that you can easily switch between PyTorch and TensorFlow: <strong>any model saved as before can be loaded back either in PyTorch or TensorFlow</strong>. If you are loading a saved PyTorch model in a TensorFlow model, use <a href="https://huggingface.co/transformers/model_doc/auto.html#transformers.TFAutoModel.from_pretrained"><code>from_pretrained()</code></a> like this:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">from transformers import TFAutoModel<br>tokenizer = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AutoTokenizer</span>.</span></span>from<span class="hljs-constructor">_pretrained(<span class="hljs-params">save_directory</span>)</span><br>model = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TFAutoModel</span>.</span></span>from<span class="hljs-constructor">_pretrained(<span class="hljs-params">save_directory</span>, <span class="hljs-params">from_pt</span>=True)</span><br></code></pre></td></tr></table></figure><p>and if you are loading a saved TensorFlow model in a PyTorch model, you should use the following code:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">from transformers import AutoModel<br>tokenizer = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AutoTokenizer</span>.</span></span>from<span class="hljs-constructor">_pretrained(<span class="hljs-params">save_directory</span>)</span><br>model = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AutoModel</span>.</span></span>from<span class="hljs-constructor">_pretrained(<span class="hljs-params">save_directory</span>, <span class="hljs-params">from_tf</span>=True)</span><br></code></pre></td></tr></table></figure><h3 id="Customizing-the-model"><a href="#Customizing-the-model" class="headerlink" title="Customizing the model"></a>Customizing the model</h3><p>If you want to change how the model itself is built, you can define a custom configuration class. Each architecture comes with its own relevant configuration. For example, <a href="https://huggingface.co/transformers/model_doc/distilbert.html#transformers.DistilBertConfig"><code>DistilBertConfig</code></a> allows you to specify parameters such as the hidden dimension, dropout rate, etc for DistilBERT. If you do core modifications, like changing the hidden size, you won’t be able to use a pretrained model anymore and will need to train from scratch. You would then instantiate the model directly from this configuration.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DistilBertConfig, DistilBertTokenizer, DistilBertForSequenceClassification<br><span class="hljs-meta">&gt;&gt;&gt; </span>config = DistilBertConfig(n_heads=<span class="hljs-number">8</span>, dim=<span class="hljs-number">512</span>, hidden_dim=<span class="hljs-number">4</span>*<span class="hljs-number">512</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = DistilBertTokenizer.from_pretrained(<span class="hljs-string">&#x27;distilbert-base-uncased&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>model = DistilBertForSequenceClassification(config)<br></code></pre></td></tr></table></figure><p>For something that only changes the head of the model (for instance, the number of labels), <strong>you can still use a pretrained model for the body.</strong> For instance, let’s define a classifier for 10 different labels using a pretrained body. Instead of creating a new configuration with all the default values just to change the number of labels, we can instead pass any argument a configuration would take to the <code>from_pretrained()</code> method and it will update the default configuration appropriately:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DistilBertConfig, DistilBertTokenizer, DistilBertForSequenceClassification<br><span class="hljs-meta">&gt;&gt;&gt; </span>model_name = <span class="hljs-string">&quot;distilbert-base-uncased&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>model = DistilBertForSequenceClassification.from_pretrained(model_name, num_labels=<span class="hljs-number">10</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = DistilBertTokenizer.from_pretrained(model_name)<br></code></pre></td></tr></table></figure><h1 id="Fine-tuning-a-pretrained-model"><a href="#Fine-tuning-a-pretrained-model" class="headerlink" title="Fine-tuning a pretrained model"></a>Fine-tuning a pretrained model</h1><p>In PyTorch, there is no generic training loop so the 🤗 Transformers library provides an API with the class <a href="https://huggingface.co/transformers/main_classes/trainer.html#transformers.Trainer"><code>Trainer</code></a> to let you fine-tune or train a model from scratch easily. Then we will show you how to alternatively write the whole training loop in PyTorch.</p><h2 id="Preparing-the-dataset"><a href="#Preparing-the-dataset" class="headerlink" title="Preparing the dataset"></a>Preparing the dataset</h2><p>We will use the <a href="https://github.com/huggingface/datasets/">🤗 Datasets</a> library to download and preprocess the IMDB datasets. We will go over this part pretty quickly. Since the focus of this tutorial is on training, you should refer to the 🤗 Datasets <a href="https://huggingface.co/docs/datasets/">documentation</a> or the <a href="https://huggingface.co/transformers/preprocessing.html">Preprocessing data</a> tutorial for more information.</p><p>First, we can use the <code>load_dataset</code> function to download and cache the dataset:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset<br><br>raw_datasets = load_dataset(<span class="hljs-string">&quot;imdb&quot;</span>)<br></code></pre></td></tr></table></figure><p>To preprocess our data, we will need a tokenizer:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer<br><br>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)<br>inputs = tokenizer(sentences, padding=<span class="hljs-string">&quot;max_length&quot;</span>, truncation=<span class="hljs-literal">True</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tokenize_function</span>(<span class="hljs-params">examples</span>):</span><br>    <span class="hljs-keyword">return</span> tokenizer(examples[<span class="hljs-string">&quot;text&quot;</span>], padding=<span class="hljs-string">&quot;max_length&quot;</span>, truncation=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># transform the dataset</span><br>tokenized_datasets = raw_datasets.<span class="hljs-built_in">map</span>(tokenize_function, batched=<span class="hljs-literal">True</span>)<br><br></code></pre></td></tr></table></figure><h2 id="Fine-tuning-with-Trainer-API"><a href="#Fine-tuning-with-Trainer-API" class="headerlink" title="Fine-tuning with Trainer API"></a>Fine-tuning with Trainer API</h2><p>First, let’s define our model:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModelForSequenceClassification<br><br>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, num_labels=<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>Then, to define our <a href="https://huggingface.co/transformers/main_classes/trainer.html#transformers.Trainer"><code>Trainer</code></a>, we will need to instantiate a <a href="https://huggingface.co/transformers/main_classes/trainer.html#transformers.TrainingArguments"><code>TrainingArguments</code></a>. This class contains all the hyperparameters we can tune for the <a href="https://huggingface.co/transformers/main_classes/trainer.html#transformers.Trainer"><code>Trainer</code></a> or the flags to activate the different training options it supports. Let’s begin by using all the defaults, the only thing we then have to provide is a directory in which the checkpoints will be saved:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TrainingArguments<br><br>training_args = TrainingArguments(<span class="hljs-string">&quot;test_trainer&quot;</span>)<br></code></pre></td></tr></table></figure><p>Then we can instantiate a <a href="https://huggingface.co/transformers/main_classes/trainer.html#transformers.Trainer"><code>Trainer</code></a> like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> Trainer<br><br>trainer = Trainer(<br>    model=model, args=training_args, train_dataset=small_train_dataset, eval_dataset=small_eval_dataset<br>)<br></code></pre></td></tr></table></figure><p>To fine-tune our model, we just need to call</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">trainer.train()<br></code></pre></td></tr></table></figure><p>To have the <a href="https://huggingface.co/transformers/main_classes/trainer.html#transformers.Trainer"><code>Trainer</code></a> compute and report metrics, we need to give it a <code>compute_metrics</code> function that takes predictions and labels (grouped in a namedtuple called <a href="https://huggingface.co/transformers/internal/trainer_utils.html#transformers.EvalPrediction"><code>EvalPrediction</code></a>) and return a dictionary with string items (the metric names) and float values (the metric values).</p><p>The 🤗 Datasets library provides an easy way to get the common metrics used in NLP with the <code>load_metric</code> function. here we simply use accuracy. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric<br><br>metric = load_metric(<span class="hljs-string">&quot;accuracy&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">compute_metrics</span>(<span class="hljs-params">eval_pred</span>):</span><br>    logits, labels = eval_pred<br>    predictions = np.argmax(logits, axis=-<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> metric.compute(predictions=predictions, references=labels)<br></code></pre></td></tr></table></figure><p>To check if this works on practice, let’s create a new <a href="https://huggingface.co/transformers/main_classes/trainer.html#transformers.Trainer"><code>Trainer</code></a> with our fine-tuned model:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">trainer = Trainer(<br>    model=model,<br>    args=training_args,<br>    train_dataset=small_train_dataset,<br>    eval_dataset=small_eval_dataset,<br>    compute_metrics=compute_metrics,<br>)<br>trainer.evaluate()<br></code></pre></td></tr></table></figure><p>If you want to fine-tune your model and regularly report the evaluation metrics (for instance at the end of each epoch), here is how you should define your training arguments:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TrainingArguments<br><br>training_args = TrainingArguments(<span class="hljs-string">&quot;test_trainer&quot;</span>, evaluation_strategy=<span class="hljs-string">&quot;epoch&quot;</span>)<br></code></pre></td></tr></table></figure><p>See the documentation of <a href="https://huggingface.co/transformers/main_classes/trainer.html#transformers.TrainingArguments"><code>TrainingArguments</code></a> for more options.</p><h2 id="Fine-tuning-with-native-PyTorch"><a href="#Fine-tuning-with-native-PyTorch" class="headerlink" title="Fine-tuning with native PyTorch"></a>Fine-tuning with native PyTorch</h2><p>We just need to apply a bit of post-processing to our <code>tokenized_datasets</code> before doing that to:</p><ul><li>remove the columns corresponding to values the model does not expect (here the <code>&quot;text&quot;</code> column)</li><li>rename the column <code>&quot;label&quot;</code> to <code>&quot;labels&quot;</code> (because the model expect the argument to be named <code>labels</code>)</li><li>set the format of the datasets so they return PyTorch Tensors instead of lists.</li></ul><p>Our <code>tokenized_datasets</code> has one method for each of those steps:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">tokenized_datasets = tokenized_datasets.remove_columns([<span class="hljs-string">&quot;text&quot;</span>])<br>tokenized_datasets = tokenized_datasets.rename_column(<span class="hljs-string">&quot;label&quot;</span>, <span class="hljs-string">&quot;labels&quot;</span>)<br>tokenized_datasets.set_format(<span class="hljs-string">&quot;torch&quot;</span>)<br><br>small_train_dataset = tokenized_datasets[<span class="hljs-string">&quot;train&quot;</span>].shuffle(seed=<span class="hljs-number">42</span>).select(<span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>))<br>small_eval_dataset = tokenized_datasets[<span class="hljs-string">&quot;test&quot;</span>].shuffle(seed=<span class="hljs-number">42</span>).select(<span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>))<br></code></pre></td></tr></table></figure><p>We can easily define our dataloaders:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><br>train_dataloader = DataLoader(small_train_dataset, shuffle=<span class="hljs-literal">True</span>, batch_size=<span class="hljs-number">8</span>)<br>eval_dataloader = DataLoader(small_eval_dataset, batch_size=<span class="hljs-number">8</span>)<br></code></pre></td></tr></table></figure><p>Next, we define our model:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModelForSequenceClassification<br><br>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, num_labels=<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>We are almost ready to write our training loop. The only two things to add are an <strong>optimizer</strong> and a <strong>learning rate scheduler</strong>. The default optimizer used by the <code>Trainer</code> is <code>AdamW</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AdamW<br><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> get_scheduler<br><br>optimizer = AdamW(model.parameters(), lr=<span class="hljs-number">5e-5</span>)<br>num_epochs = <span class="hljs-number">3</span><br>num_training_steps = num_epochs * <span class="hljs-built_in">len</span>(train_dataloader)<br>lr_scheduler = get_scheduler(<br>    <span class="hljs-string">&quot;linear&quot;</span>,<br>    optimizer=optimizer,<br>    num_warmup_steps=<span class="hljs-number">0</span>,<br>    num_training_steps=num_training_steps<br>)<br></code></pre></td></tr></table></figure><p>We will want to use the GPU if we have access to one. To do this, we define a <code>device</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><br>device = torch.device(<span class="hljs-string">&quot;cuda&quot;</span>) <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> torch.device(<span class="hljs-string">&quot;cpu&quot;</span>)<br>model.to(device)<br></code></pre></td></tr></table></figure><p>We now are ready to train! To get some sense of when it will be finished, we add a progress bar over our number of training steps, using the tqdm library.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> tqdm.auto <span class="hljs-keyword">import</span> tqdm<br><br>progress_bar = tqdm(<span class="hljs-built_in">range</span>(num_training_steps))<br><br>model.train()<br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_epochs):<br>    <span class="hljs-keyword">for</span> batch <span class="hljs-keyword">in</span> train_dataloader:<br>        batch = &#123;k: v.to(device) <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> batch.items()&#125;<br>        outputs = model(**batch)<br>        loss = outputs.loss<br>        loss.backward()<br><br>        optimizer.step()<br>        lr_scheduler.step()<br>        optimizer.zero_grad()<br>        progress_bar.update(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>Now to check the results, we need to write the <strong>evaluation loop</strong>. Like in the <a href="https://huggingface.co/transformers/training.html#trainer">trainer section</a> we will use a metric from the datasets library. Here we accumulate the predictions at each batch before computing the final result when the loop is finished.</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">metric= load<span class="hljs-constructor">_metric(<span class="hljs-string">&quot;accuracy&quot;</span>)</span><br>model.eval<span class="hljs-literal">()</span><br><span class="hljs-keyword">for</span> batch <span class="hljs-keyword">in</span> eval_dataloader:<br>    batch = &#123;k: v.<span class="hljs-keyword">to</span>(device) <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> batch.items<span class="hljs-literal">()</span>&#125;<br>    <span class="hljs-keyword">with</span> torch.no<span class="hljs-constructor">_grad()</span>:<br>        outputs = model(**batch)<br><br>    logits = outputs.logits<br>    predictions = torch.argmax(logits, dim=-<span class="hljs-number">1</span>)<br>    metric.add<span class="hljs-constructor">_batch(<span class="hljs-params">predictions</span>=<span class="hljs-params">predictions</span>, <span class="hljs-params">references</span>=<span class="hljs-params">batch</span>[<span class="hljs-string">&quot;labels&quot;</span>])</span><br><br>metric.compute<span class="hljs-literal">()</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Big Data Analysis with Scala and Spark</title>
    <link href="/2021/07/01/Big-Data-Analysis-with-Scala-and-Spark/"/>
    <url>/2021/07/01/Big-Data-Analysis-with-Scala-and-Spark/</url>
    
    <content type="html"><![CDATA[<p>Course Link: <a href="https://www.coursera.org/learn/scala-spark-big-data/">https://www.coursera.org/learn/scala-spark-big-data/</a></p><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><h2 id="Why-Scala-Why-Spark"><a href="#Why-Scala-Why-Spark" class="headerlink" title="Why Scala? Why Spark?"></a>Why Scala? Why Spark?</h2><p>When the dataset gets too large to fit into memory, languages like R/Python/Matlab will not be able to work with it.</p><p>By working in Scala, in a functional style, you can quickly scale your algorithms</p><p>In this course you will learn:</p><ol><li>Extending data parallel paradigm to the distributed case, uisng Spark</li><li>Spark’s programming model</li><li>Distributing computation, and cluster topology in Spark</li><li>How to improve performance; data locality, how to avoid recomputation and shuffles in Spark</li><li>Relational operations with DataFrames and Datasets</li></ol><p>Prerequisites:</p><ul><li>Principles of Functional Programming in Scala</li><li>Functional Program Design in Scala</li><li>Parallel Programming (in Scala)</li></ul><p>Recommended books: <em>Learning Spark</em>, <em>Spark in Action</em>, <em>Advanced Analytics with Spark</em></p><h2 id="Data-Parallel-to-Distributed-Data-Parallel"><a href="#Data-Parallel-to-Distributed-Data-Parallel" class="headerlink" title="Data-Parallel to Distributed Data-Parallel"></a>Data-Parallel to Distributed Data-Parallel</h2><h3 id="Shared-memory-data-parallelism"><a href="#Shared-memory-data-parallelism" class="headerlink" title="Shared memory data parallelism"></a>Shared memory data parallelism</h3><p><img src="%E6%88%AA%E5%B1%8F2021-07-17%20%E4%B8%8B%E5%8D%887.57.09.png" alt="截屏2021-07-17 下午7.57.09"></p><h3 id="Distributed-data-parallelism"><a href="#Distributed-data-parallelism" class="headerlink" title="Distributed data parallelism"></a>Distributed data parallelism</h3><p>Although the code looks identical using the collection abstraction, the internal working is very different. In particular we need to consider the <strong>latency</strong> that is introduced by the network between the nodes.</p><p><img src="%E6%88%AA%E5%B1%8F2021-07-17%20%E4%B8%8B%E5%8D%888.00.24.png" alt="截屏2021-07-17 下午8.00.24"></p><h3 id="RDD-Resilient-Distributed-Dataset"><a href="#RDD-Resilient-Distributed-Dataset" class="headerlink" title="RDD (Resilient Distributed Dataset)"></a>RDD (Resilient Distributed Dataset)</h3><p>Spark implements a distributed data parallel model called RDD. It is the counterpart of shared memory collection abstraction in data parallelism paradigm.</p><h2 id="Latency"><a href="#Latency" class="headerlink" title="Latency"></a>Latency</h2><p>Distribution introduces important concerns beyond what we had to worry about when dealing with parallelism in the shared memory case:</p><ul><li><em>Parial failure</em>: crash failure of a subset of the machines involved in a distributed computation</li><li><em>Latency</em>: certain operations have a much higher latency than other operations due to network communication</li></ul><p>Spark handles this two issues particularly well.</p><blockquote><p><strong>Latency cannot be masked completely; it will be an important aspect that also impacts the programming model</strong></p></blockquote><p><img src="%E6%88%AA%E5%B1%8F2021-07-17%20%E4%B8%8B%E5%8D%888.14.12.png" alt="截屏2021-07-17 下午8.14.12"></p><p>Reading from memory is 100x times faster than reading from disk</p><p>If we multiplied the number by <strong>a billion</strong>, we get a humanized latency number</p><p><img src="%E6%88%AA%E5%B1%8F2021-07-17%20%E4%B8%8B%E5%8D%888.16.03.png" alt="截屏2021-07-17 下午8.16.03"></p><p><img src="%E6%88%AA%E5%B1%8F2021-07-17%20%E4%B8%8B%E5%8D%888.16.32.png" alt="截屏2021-07-17 下午8.16.32"></p><p><img src="%E6%88%AA%E5%B1%8F2021-07-17%20%E4%B8%8B%E5%8D%888.17.42.png" alt="截屏2021-07-17 下午8.17.42"></p><p><img src="%E6%88%AA%E5%B1%8F2021-07-17%20%E4%B8%8B%E5%8D%888.18.30.png" alt="截屏2021-07-17 下午8.18.30"></p><h3 id="Why-is-Spark-faster-than-Hadoop"><a href="#Why-is-Spark-faster-than-Hadoop" class="headerlink" title="Why is Spark faster than Hadoop"></a>Why is Spark faster than Hadoop</h3><p><strong>Idea</strong>: Keep all data <strong>immutable and in-memory</strong>. All operations on data are just functional transformations, like regular Scala collections. <strong>Fault tolerance</strong> is achieved by replaying functional transformations over original dataset.</p><p><strong>Result</strong>: Spark has been shown to be 100x more perforant than Hadoop while adding even more expressive APIs</p><h2 id="Basics-of-Spark’s-RDDs"><a href="#Basics-of-Spark’s-RDDs" class="headerlink" title="Basics of Spark’s RDDs"></a>Basics of Spark’s RDDs</h2><p>RDDs seem like <strong>immutable</strong> sequential or parallel Scala collections.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RDD</span>[<span class="hljs-type">T</span>] </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">map</span></span>[<span class="hljs-type">U</span>](f: <span class="hljs-type">T</span> =&gt; <span class="hljs-type">U</span>): <span class="hljs-type">RDD</span>[<span class="hljs-type">U</span>] = ...<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">flatMap</span></span>[<span class="hljs-type">U</span>](f: <span class="hljs-type">T</span> =&gt; <span class="hljs-type">TraversableOnce</span>[<span class="hljs-type">U</span>]): <span class="hljs-type">RDD</span>[<span class="hljs-type">U</span>] = ...<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">filter</span></span>(f: <span class="hljs-type">T</span> =&gt; <span class="hljs-type">Boolean</span>): <span class="hljs-type">RDD</span>[<span class="hljs-type">T</span>] = ...<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reduce</span></span>(f: (<span class="hljs-type">T</span>, <span class="hljs-type">T</span>) =&gt; <span class="hljs-type">T</span> ): <span class="hljs-type">T</span> = ...<br>&#125;<br></code></pre></td></tr></table></figure><p>RDD makes heavy use of higher-order functions.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">// word count with RDD</span><br><br><span class="hljs-keyword">val</span> rdd = sparks.textFile(<span class="hljs-string">&quot;hdfs://...&quot;</span>)<br><span class="hljs-keyword">val</span> count = rdd.flatMap(line =&gt; line.split(<span class="hljs-string">&quot; &quot;</span>)) <span class="hljs-comment">// separate lines into words</span><br>.map(word =&gt; (word, <span class="hljs-number">1</span>)) <span class="hljs-comment">// include something to count</span><br>.reduceByKey(_ + _) <span class="hljs-comment">// sum up the 1s in the pairs</span><br></code></pre></td></tr></table></figure><h3 id="Creating-RDDs"><a href="#Creating-RDDs" class="headerlink" title="Creating RDDs"></a>Creating RDDs</h3><p>RDDs can be created in two ways:</p><ol><li><p>Transforming an existing RDD</p><p>Just like a call to <code>map</code> on a <code>List</code></p></li><li><p>From a <code>SparkContext</code> or <code>SparkSession</code> object</p><p>The <code>SparkContext</code> object (renamed <code>SparkSession</code>) can be thought of as your handle to the Spark cluster. It represents the connection between the Spark cluster and your running application. It defines a handful of methods which can be used to create and populate a new RDD:</p><ul><li><code>parallelize</code>: convert a local Scala collection to an RDD</li><li><code>textFile</code>: read a text file from HDFS or a local file system and return an RDD of <code>String</code></li></ul></li></ol><h3 id="Transformations-and-Actions"><a href="#Transformations-and-Actions" class="headerlink" title="Transformations and Actions"></a>Transformations and Actions</h3><p><strong>Transformers</strong> return new collections as results (Not single value)</p><p>Examples: map, filter, flatMap, groupBy</p><p><strong>Accessors</strong>: Return single values as results (Not collection)</p><p>Example: reduce, fold, aggregate</p><p>Similarly, Spark defines <strong><em>transformations</em></strong> and <strong><em>actions</em></strong> on RDDS</p><p><strong>Transformation</strong>: Return new RDDs as result</p><blockquote><p><strong>They are lazy</strong>, their result RDD is not immediately computed</p></blockquote><p><strong>Actions</strong>: Compute a result based on an RDD,  and either returned or saved to an external storage system</p><blockquote><p> <strong>They are eager</strong>, their result is immediately computed</p></blockquote><p><strong>Laziness / eagerness</strong> is how we can limit network communication using the programming model</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> largeList: <span class="hljs-type">List</span>[<span class="hljs-type">String</span>] = ...<br><span class="hljs-keyword">val</span> wordsRdd = sc.parallelize(largeList)<br><span class="hljs-keyword">val</span> lengthsRdd = wordsRdd.map(_.length) <span class="hljs-comment">// nothing happens in cluster (yet)!</span><br><span class="hljs-keyword">val</span> totalChars = lengthsRdd.reduce(_ + _) <span class="hljs-comment">// actual computation begins</span><br></code></pre></td></tr></table></figure><p><img src="%E6%88%AA%E5%B1%8F2021-07-17%20%E4%B8%8B%E5%8D%888.50.18.png" alt="截屏2021-07-17 下午8.50.18"></p><p><img src="%E6%88%AA%E5%B1%8F2021-07-17%20%E4%B8%8B%E5%8D%888.50.34.png" alt="截屏2021-07-17 下午8.50.34"></p><p>The action will get the result back to your machine, so typically you will need some transformations beforehand to reduce the size of your RDD.</p><p><img src="%E6%88%AA%E5%B1%8F2021-07-17%20%E4%B8%8B%E5%8D%889.12.08.png" alt="截屏2021-07-17 下午9.12.08"></p><p><img src="%E6%88%AA%E5%B1%8F2021-07-17%20%E4%B8%8B%E5%8D%889.12.33.png" alt="截屏2021-07-17 下午9.12.33"></p><h3 id="Evaluations-in-Spark-Unlike-Scala-Collections"><a href="#Evaluations-in-Spark-Unlike-Scala-Collections" class="headerlink" title="Evaluations in Spark: Unlike Scala Collections"></a>Evaluations in Spark: Unlike Scala Collections</h3><p>Spark is faster in terms of running iterations because it doesn’t need to persist the data in HDFS (disk) as in Hadoop but in memory.</p><p><img src="%E6%88%AA%E5%B1%8F2021-07-17%20%E4%B8%8B%E5%8D%8810.16.53.png" alt="截屏2021-07-17 下午10.16.53"></p><p>By default, RDDS are recomputed each time you run an action on them. This can be expansive (in time) if you need to a dataset more than once. <strong>Spark allows you to contorl what is cached in memory</strong> using <code>persist()</code> or <code>cache()</code> </p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> lastYearsLogs: <span class="hljs-type">RDD</span>[<span class="hljs-type">String</span>] = ...<br><span class="hljs-keyword">val</span> logsWithErrors = lastYearsLogs.filter(_.contains(<span class="hljs-string">&quot;ERROR&quot;</span>)).persist()<br><span class="hljs-keyword">val</span> firstLogsWithErrors = logsWithErrors.take(<span class="hljs-number">10</span>)<br><span class="hljs-keyword">val</span> numErrors = logsWithErrors.count() <span class="hljs-comment">// faster</span><br></code></pre></td></tr></table></figure><p>Without the <code>persist()</code> we will run the transformation <code>filter(_.contains(&quot;ERROR&quot;))</code> two times in the above snippet. </p><p>There are many ways to configure how your data is persisted.</p><ul><li>in memory as regular Java objects</li><li>on disk as regular Java objects</li><li>in memory as serialized Java objects (more compact)</li><li>on disk as serialized Java objects (more compact)</li><li>both in memory and on disk (spill over to disk to avoid re-computation)</li></ul><p><strong>cache()</strong>: is the shorthand for using the default storage level, which is in memory only as regular Java objects</p><p><strong>persist</strong>(): Persistance can be customized with this method. Pass the storage level you’d like as a parameter to <code>persist</code>.</p><p><img src="%E6%88%AA%E5%B1%8F2021-07-17%20%E4%B8%8B%E5%8D%8810.29.50.png" alt="截屏2021-07-17 下午10.29.50"></p><p>The default is the <strong>MEMORY_ONLY</strong> storage level.</p><blockquote><p>The deferred semantics of Spark’s RDDs are very unlike Scala Collections</p></blockquote><p><strong>…One of the most common performance bottlenecks of newcomers of Spark arises from unknowingly re-evaluating several transformations when caching could be used.</strong></p><p>Lazy evaluation allows Spark to <strong>stage</strong> computations and make important <strong>optimization</strong> to the <strong>chain of operations</strong> before execution (e.g., <code>map()</code> followed by <code>filter() </code>can be traversed once only)</p><h2 id="Cluster-Topology-Matters"><a href="#Cluster-Topology-Matters" class="headerlink" title="Cluster Topology Matters!"></a>Cluster Topology Matters!</h2><p>An example to kick start:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">case</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name: <span class="hljs-type">String</span>, age: <span class="hljs-type">Int</span></span>)</span><br><span class="hljs-keyword">val</span> people: <span class="hljs-type">RDD</span>[<span class="hljs-type">Person</span>] = ...<br>people.foreach(println) <span class="hljs-comment">// this prints in the executor, can&#x27;t see in the driver (master)</span><br><span class="hljs-keyword">val</span> first10 = people.take(<span class="hljs-number">10</span>) <span class="hljs-comment">// this ends up in the driver program </span><br></code></pre></td></tr></table></figure><p>The atonomy of a Spark job.</p><p><img src="%E6%88%AA%E5%B1%8F2021-07-17%20%E4%B8%8B%E5%8D%8810.42.55.png" alt="截屏2021-07-17 下午10.42.55"></p><p><img src="%E6%88%AA%E5%B1%8F2021-07-17%20%E4%B8%8B%E5%8D%8810.43.05.png" alt="截屏2021-07-17 下午10.43.05"></p><p><img src="%E6%88%AA%E5%B1%8F2021-07-17%20%E4%B8%8B%E5%8D%8810.43.59.png" alt="截屏2021-07-17 下午10.43.59"></p><p><img src="%E6%88%AA%E5%B1%8F2021-07-17%20%E4%B8%8B%E5%8D%8810.44.28.png" alt="截屏2021-07-17 下午10.44.28"></p><p><img src="%E6%88%AA%E5%B1%8F2021-07-17%20%E4%B8%8B%E5%8D%8810.44.52.png" alt="截屏2021-07-17 下午10.44.52"></p><h1 id="Reduction-Ops-amp-Distributed-Key-Value-Pairs"><a href="#Reduction-Ops-amp-Distributed-Key-Value-Pairs" class="headerlink" title="Reduction Ops &amp; Distributed Key-Value Pairs"></a>Reduction Ops &amp; Distributed Key-Value Pairs</h1><h2 id="Reduction-Operations"><a href="#Reduction-Operations" class="headerlink" title="Reduction Operations"></a>Reduction Operations</h2><p>Operations such as <code>fold</code>, <code>reduce</code> and <code>aggreate</code> from Scala sequential collections.</p><p>They <strong>walk through a collection and combine neighbouring. elements of the collection together to product a single combined result</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">case</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Taco</span>(<span class="hljs-params">kind: <span class="hljs-type">String</span>, price: <span class="hljs-type">Double</span></span>)</span><br><span class="hljs-keyword">val</span> tacoOrder = <br>  <span class="hljs-type">List</span>(<br>  <span class="hljs-type">Taco</span>(<span class="hljs-string">&quot;...&quot;</span>, <span class="hljs-number">2.25</span>),<br>  <span class="hljs-type">Taco</span>(<span class="hljs-string">&quot;xxx&quot;</span>, <span class="hljs-number">1.1</span>)<br> )<br><br><span class="hljs-keyword">val</span> cost = tacoOrder.foldLeft(<span class="hljs-number">0</span>)((sum, taco) =&gt; sum + taco.price)<br><br></code></pre></td></tr></table></figure><p><code>foldLeft</code> is not parallelizable due to its signature <code>def foldLeft[B](z:B)(f: (B,A) =&gt; B ): B</code>, because if you try to parallelize the computation, the types wouldn’t match in the combine stage.</p><p><img src="%E6%88%AA%E5%B1%8F2021-07-18%20%E4%B8%8B%E5%8D%883.36.51.png" alt="截屏2021-07-18 下午3.36.51"></p><p><code>fold</code> enables us to parallelize things. Because it’s signiture restricts us to always returning the same type <code>def fold(z: A)(f: (A,A) =&gt; A): A</code></p><p><code>aggregate</code> lets you still do sequential-style folds in chunks and then combine them together. It is the generalization of <code>foldLeft</code></p><p><code>aggregate[B] (z: =&gt; B) (seqop: (B, A) =&gt; A, combop: (B,B) =&gt; B): B</code></p><p>Spark doesn’t give you the option to use <code>foldLeft/foldRight</code>, which means that if you have to change the return type of your reduction operation, your only choice is <code>aggregate</code></p><blockquote><p>It simply doesn’t make sense to enforce sequential execution across a cluster.</p></blockquote><h2 id="Distributed-Key-Value-Pairs-Pair-RDDs"><a href="#Distributed-Key-Value-Pairs-Pair-RDDs" class="headerlink" title="Distributed Key-Value Pairs (Pair RDDs)"></a>Distributed Key-Value Pairs (Pair RDDs)</h2><p>In single-node Scala, key-value pairs can be thought of as <strong>maps</strong></p><p>Large datasets are often made up of unfathomably large numbers of complex, nested data records. To be able to work with such datasets, it’s often desirable to project down these complex datatypes into <strong>key-vlaue pairs</strong></p><p><img src="%E6%88%AA%E5%B1%8F2021-07-18%20%E4%B8%8B%E5%8D%883.47.18.png" alt="截屏2021-07-18 下午3.47.18"></p><p>Pair RDDs have additional, specialized methods for working with data associated with keys <code>RDD[(K,V)]</code>. Commonly used ones are <code>groupBykey(), reduceByKey, join()</code></p><h3 id="Creating-a-Pair-RDD"><a href="#Creating-a-Pair-RDD" class="headerlink" title="Creating a Pair RDD"></a>Creating a Pair RDD</h3><p>Pair RDDs are most often created from already-existing non-pair RDDs, for example by using the <code>map</code> operation on RDDs.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> rdd: <span class="hljs-type">RDD</span>[<span class="hljs-type">WikipediaPage</span>]<br><br><span class="hljs-keyword">val</span> pairRdd = rdd.map(page =&gt; (page.title, page.text))<br><span class="hljs-comment">// now you have a lot more operations at hand!</span><br></code></pre></td></tr></table></figure><h3 id="Transformation-and-Action-for-pair-RDD"><a href="#Transformation-and-Action-for-pair-RDD" class="headerlink" title="Transformation and Action for pair RDD"></a>Transformation and Action for pair RDD</h3><p>Transformations:</p><ul><li>groupByKey</li><li>reduceByKey</li><li>mapValues</li><li>keys</li><li>join</li><li>leftOuterJoin/rightOuterJoin</li></ul><h4 id="groupByKey"><a href="#groupByKey" class="headerlink" title="groupByKey"></a><strong>groupByKey</strong></h4><p><em>Regular Scala</em></p><p><code>def groupBy[K](f: A =&gt; K): Map[K, Traversable[A]]</code></p><p>Partions this traversable collection into a map of traversable collections according to some discriminator function.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> ages = <span class="hljs-type">List</span>(<span class="hljs-number">2</span>, <span class="hljs-number">52</span>, <span class="hljs-number">44</span>, <span class="hljs-number">23</span>, <span class="hljs-number">88</span>)<br><span class="hljs-keyword">val</span> grouped = ages.groupBy&#123; age =&gt;<br><span class="hljs-keyword">if</span> (age &gt;= <span class="hljs-number">18</span> &amp;&amp; age &lt; <span class="hljs-number">65</span>) <span class="hljs-string">&quot;adult&quot;</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (age &lt; <span class="hljs-number">18</span>) <span class="hljs-string">&quot;child&quot;</span><br><span class="hljs-keyword">else</span> <span class="hljs-string">&quot;senior&quot;</span><br>&#125;<br><span class="hljs-comment">// Map(senor-&gt;List(88), audlt -&gt; List(52, 44, 23), child -&gt; List(2))</span><br></code></pre></td></tr></table></figure><p><em>Spark</em></p><p><code>def groupByKey(): RDD[(K, Iterable[V])]</code></p><p>It is specialized at collection values of the same key, because the RDD is already paired, we don’t need a discrimitive function.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">case</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Event</span>(<span class="hljs-params">organizer: <span class="hljs-type">String</span>, name: <span class="hljs-type">String</span>, budget: <span class="hljs-type">Int</span></span>)</span><br><span class="hljs-keyword">val</span> eventsRdd = sc.parallelize(...)<br>.map(event =&gt; event.organizer, event.budget)<br><br><span class="hljs-keyword">val</span> groupedRdd = eventsRdd.groupByKey() <span class="hljs-comment">// LAZY!!!</span><br>groupedRdd.collect().foreach(println) <span class="hljs-comment">// executed here</span><br></code></pre></td></tr></table></figure><h4 id="reduceByKey"><a href="#reduceByKey" class="headerlink" title="reduceByKey"></a><strong>reduceByKey</strong></h4><p>Conceptually, <code>reduceByKey</code> can be thought of as a combination of <code>groupByKey</code> aand <code>reduce</code>-ing on all the values per key.</p><blockquote><p>But <code>reduceByKey</code> is much more efficient than applying separate steps!!!</p></blockquote><p><code>def reduceByKey(func: (V,V) =&gt; V): RDD[(K,V)]</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">case</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Event</span>(<span class="hljs-params">organizer: <span class="hljs-type">String</span>, name: <span class="hljs-type">String</span>, budget: <span class="hljs-type">Int</span></span>)</span><br><span class="hljs-keyword">val</span> eventsRdd = sc.parallelize(...)<br>.map(event =&gt; event.organizer, event.budget)<br><br><span class="hljs-keyword">val</span> budgetsRdd = eventsRdd.reduceByKey(_ + _)<br>budgetsRdd.collect().foreach(println)<br></code></pre></td></tr></table></figure><h4 id="mapValues"><a href="#mapValues" class="headerlink" title="mapValues"></a><strong>mapValues</strong></h4><p><code>def mapValues[U] (f: V =&gt; U): RDD[(K,U)]</code> can be thought of as a shorthand for <code>rdd.map&#123; case(x,y): (x, func(y))&#125;</code> That is, it simply applies a function to only the values in a Pair RDD.</p><h4 id="countByKey"><a href="#countByKey" class="headerlink" title="countByKey"></a><strong>countByKey</strong></h4><p><code>def countByKey(): Map[K, Long]</code> simply counts the number of elements per key in a pair RDD, returning a normal scala map.</p><p>Let’s compute the <strong>average budget of the organziers</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> res = <br>eventsRdd.mapValues(b =&gt; (b,<span class="hljs-number">1</span>))<br>  .reduceByKey((v1, v2) =&gt; (v1._1+v2._1, v1._2 + v2._2))<br>  .mapValues(<span class="hljs-keyword">case</span> (total, cnt) =&gt; total/cnt )<br>.collect().foreach(println)<br></code></pre></td></tr></table></figure><h4 id="keys"><a href="#keys" class="headerlink" title="keys"></a><strong>keys</strong></h4><p><code>def keys; RDD[K]</code> returns an RDD with the keys of each tuple</p><blockquote><p>This method is a transformation and thus returns an RDD because the number of keys in a pair RDD may be unbounded.</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">case</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Visitor</span>(<span class="hljs-params">ip: <span class="hljs-type">String</span>, timestamp: <span class="hljs-type">String</span>, duration: <span class="hljs-type">String</span></span>)</span><br><span class="hljs-keyword">val</span> visits: <span class="hljs-type">RDD</span>[<span class="hljs-type">Visitor</span>] = sc.textfile(...)<br><span class="hljs-keyword">val</span> numUniqueVisits = visits.keys.distinct().count()<br></code></pre></td></tr></table></figure><h4 id="Joins"><a href="#Joins" class="headerlink" title="Joins"></a>Joins</h4><p>Joins are another sort of transformation on pair RDDS. They’re used to combine multiple datasets . They are one of the most commonly-used operations on Pair RDDs</p><p>There are two kinds of joins:</p><ul><li>Inner joins <code>join</code></li><li>Outer joins <code>leftOuterJoin / rightOuterJoin</code></li></ul><p>The key difference between the two is what happens to the keys when both RDDs don’t contain the key</p><p><img src="%E6%88%AA%E5%B1%8F2021-07-18%20%E4%B8%8B%E5%8D%884.23.51.png" alt="截屏2021-07-18 下午4.23.51"></p><p><strong>Inner Joins</strong></p><p>Inner joins returns a new RDD containing combined pairs whose <strong>keys are present in both input RDDs</strong></p><p><code>def join[W] (other: RDD[(K,W)]): RDD[(K, (V, W))]</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> abos = ...<br><span class="hljs-keyword">val</span> locations = ...<br><br><span class="hljs-keyword">val</span> trackedCustomers = <br>abos.join(location)<br>.keys.distinct().count()<br></code></pre></td></tr></table></figure><blockquote><p>Inner joins are <strong>lossy</strong></p></blockquote><p><strong>Outer Joins (leftOuterJoin, rightOuterJoin)</strong></p><p>Outer joins return a new RDD containing combined pairs <strong>whose keys don’t have to be present in both input RDDS</strong></p><p><code>def leftOuterJoin[W] (other: RDD[(K,W)]): RDD[(K, (V, Option[W]))]</code></p><p><code>def rightOuterJoin[W] (other: RDD[(K,W)]): RDD[(K, (Option[V], W))]</code></p><p><img src="%E6%88%AA%E5%B1%8F2021-07-18%20%E4%B8%8B%E5%8D%884.33.45.png" alt="截屏2021-07-18 下午4.33.45"></p><h1 id="Partition-and-Shuffling"><a href="#Partition-and-Shuffling" class="headerlink" title="Partition and Shuffling"></a>Partition and Shuffling</h1><h2 id="Shuffling"><a href="#Shuffling" class="headerlink" title="Shuffling"></a>Shuffling</h2><p>Shuffles happen with operation like <code>groupByKey</code> because data has to move around the network. </p><p><img src="%E6%88%AA%E5%B1%8F2021-07-18%20%E4%B8%8B%E5%8D%884.42.27.png" alt="截屏2021-07-18 下午4.42.27"></p><p>Shuffling is bad because the network transport is very slow (in humanized scale from seconds to days)</p><p>The <code>reduceByKey</code> operation will <strong>reduce whenever possible to reduce the amount of data shuffled between the nodes</strong>.</p><p><img src="%E6%88%AA%E5%B1%8F2021-07-18%20%E4%B8%8B%E5%8D%886.07.43.png" alt="截屏2021-07-18 下午6.07.43"></p><p>But how does Spark know which key to put on which machine?</p><h2 id="Partitioning"><a href="#Partitioning" class="headerlink" title="Partitioning"></a>Partitioning</h2><p>The dat withint an RDD is split into many <em>partitions</em></p><ul><li>Partitions never span multiple machines. </li><li>Each machine in the cluster contains one or more partitions</li><li>THe number of partitions to use is configurable. By default, it equals the <em>total number of cores on executor nodes</em></li></ul><p>There are two kinds of partitioning available in Spark:</p><ul><li>Hash partitioning</li><li>Range partitioning</li></ul><blockquote><p>Partitioning only works with pair RDDs</p></blockquote><h3 id="Hash-Partitioning"><a href="#Hash-Partitioning" class="headerlink" title="Hash Partitioning"></a>Hash Partitioning</h3><p>Hash partitioning attempts to spread data evenly across partitions <em>based on the keys</em>. </p><h3 id="Range-Partitioning"><a href="#Range-Partitioning" class="headerlink" title="Range Partitioning"></a>Range Partitioning</h3><p>Pair RDDs may contain keys that have an ordering defined: Int, Char, String, …</p><p>For such RDDs, <em>range partitioning</em> may be more efficient -&gt; tuples with keys in the same range will live on the same node</p><h3 id="Partitioning-Data"><a href="#Partitioning-Data" class="headerlink" title="Partitioning Data"></a>Partitioning Data</h3><ol><li>Call <code>partitionBy</code>, providing specific <code>partitioner</code></li><li>Using transformations that return RDDs with specific partitioners</li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> pairs = purchasesRdd.map(p =&gt; (p.customerId, p.price))<br><br><span class="hljs-keyword">val</span> tunedPartitioner = <span class="hljs-keyword">new</span> <span class="hljs-type">RangePartitioner</span>(<span class="hljs-number">8</span>, pairs)<br><span class="hljs-keyword">val</span> partitioned =<br>pairs.partitionBy(tunedPartitioner)<br>.persist() <span class="hljs-comment">// persist! Otherwise shuffled every time</span><br></code></pre></td></tr></table></figure><blockquote><p>Important: the result of the partition should always be persisted</p></blockquote><p>Partitioner from parent RDD:</p><p>Automatically-set partitioners:</p><p><code>sortByKey</code> invokes a <code>RangePartitioner</code></p><p><img src="%E6%88%AA%E5%B1%8F2021-07-18%20%E4%B8%8B%E5%8D%886.22.01.png" alt="截屏2021-07-18 下午6.22.01"></p><p><strong>All other operations will produce a result without a partitioner</strong></p><p>Make sure you use these transformations if you want to keep the partition. Notice <code>map</code> and <code>flatMap</code> are <strong>NOT</strong> on the list. Because <code>map</code> and <code>flatMap</code> can change the keys of the pair RDDs.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scala">rdd.map((k: <span class="hljs-type">String</span>, v: <span class="hljs-type">Int</span>) =&gt; (<span class="hljs-string">&quot;doh!&quot;</span>, v))<br></code></pre></td></tr></table></figure><p>That is why you should always try to use <code>mapValues</code> if possible, because it’s impossible to change the key, hence keeping the partitioning.</p><h3 id="Improve-Efficiency-with-Partitioning"><a href="#Improve-Efficiency-with-Partitioning" class="headerlink" title="Improve Efficiency with Partitioning"></a>Improve Efficiency with Partitioning</h3><p>From <em>Learning Spark</em> Page 61- 64</p><p><img src="%E6%88%AA%E5%B1%8F2021-07-18%20%E4%B8%8B%E5%8D%886.34.32.png" alt="截屏2021-07-18 下午6.34.32"></p><p>There are two common scenarios where partition can reduce shuffling:</p><ol><li><code>reduceByKey</code> running on a pre-partitioned RDD will cuase the values to be computed <strong>locally</strong>.</li><li><code>join</code> called on two RDDs that are pre-partitioned with the same partitioner are cached on the same machine will cause the join to be computed <strong>locally</strong>.</li></ol><h2 id="Know-when-shuffle-will-occur"><a href="#Know-when-shuffle-will-occur" class="headerlink" title="Know when shuffle will occur"></a>Know when shuffle will occur</h2><p><strong>A shuffle <em>can</em> occur when the resulting RDD depends on other elements from the same RDD or another RDD.</strong> Paritioning is often the solution.</p><p>Or look at the return type, or use the function <code>toDebugString</code> to see its execution plan.</p><p><img src="%E6%88%AA%E5%B1%8F2021-07-18%20%E4%B8%8B%E5%8D%886.36.33.png" alt="截屏2021-07-18 下午6.36.33"></p><p><img src="%E6%88%AA%E5%B1%8F2021-07-18%20%E4%B8%8B%E5%8D%886.38.17.png" alt="截屏2021-07-18 下午6.38.17"></p><h1 id="Wide-vs-Narrow-Dependencies"><a href="#Wide-vs-Narrow-Dependencies" class="headerlink" title="Wide vs Narrow Dependencies"></a>Wide vs Narrow Dependencies</h1><p>Some transformationnns are significantly more expensive than others </p><h2 id="Linages"><a href="#Linages" class="headerlink" title="Linages"></a>Linages</h2><p>Computations on RDDs are represented as a <strong>lineage graph</strong>; a Direct Acyclic Graph (DAG) representing the computations done on the RDD.</p><p><img src="%E6%88%AA%E5%B1%8F2021-07-18%20%E4%B8%8B%E5%8D%886.43.27.png" alt="截屏2021-07-18 下午6.43.27"></p><h2 id="How-are-RDDs-represented"><a href="#How-are-RDDs-represented" class="headerlink" title="How are RDDs represented?"></a>How are RDDs represented?</h2><p>RDDs are made up of 4 important parts</p><ul><li><strong>Partitions</strong>: Atomic pieces of the dataset. One or many per compute node</li><li><strong>Dependencies</strong>: Models relationship between this RDD <em>and its partitions</em> with the RDD(s) it was derived from</li><li><strong>A function</strong>: for computing the dataset based on its parent RDDs</li><li><strong>Metadata</strong> about its partitioning scheme</li></ul><p><img src="%E6%88%AA%E5%B1%8F2021-07-18%20%E4%B8%8B%E5%8D%886.46.45.png" alt="截屏2021-07-18 下午6.46.45"></p><p><img src="%E6%88%AA%E5%B1%8F2021-07-18%20%E4%B8%8B%E5%8D%886.47.45.png" alt="截屏2021-07-18 下午6.47.45"></p><p>RDD dependencies encode when data must move across the network. There are two kinds of dependencies:</p><ol><li><strong>Narrow Dependency</strong>: Each partition of the parent RDD is used by at most one partition of the child RDD </li><li><strong>Wide Dependency</strong>: Each partition of the parent RDD may be depended on by <strong>multiple</strong> child partitions</li></ol><p><img src="%E6%88%AA%E5%B1%8F2021-07-18%20%E4%B8%8B%E5%8D%886.49.58.png" alt="截屏2021-07-18 下午6.49.58"></p><p><img src="%E6%88%AA%E5%B1%8F2021-07-18%20%E4%B8%8B%E5%8D%886.57.07.png" alt="截屏2021-07-18 下午6.57.07"></p><p><img src="%E6%88%AA%E5%B1%8F2021-07-18%20%E4%B8%8B%E5%8D%886.59.30.png" alt="截屏2021-07-18 下午6.59.30"></p><p><img src="%E6%88%AA%E5%B1%8F2021-07-18%20%E4%B8%8B%E5%8D%887.00.03.png" alt="截屏2021-07-18 下午7.00.03"></p><p>You can use <code>dependencies</code> method on RDDs to figure out the dependency</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> pairs = wordsRdd.map(c =&gt; (c,<span class="hljs-number">1</span>))<br>.groupByKey()<br>.dependencies <span class="hljs-comment">// or toDebugString</span><br></code></pre></td></tr></table></figure><p>The <em>lineage graph</em> is composed of <em>stages</em>. </p><h2 id="Fault-Tolerance"><a href="#Fault-Tolerance" class="headerlink" title="Fault Tolerance"></a>Fault Tolerance</h2><p><img src="%E6%88%AA%E5%B1%8F2021-07-18%20%E4%B8%8B%E5%8D%887.06.09.png" alt="截屏2021-07-18 下午7.06.09"></p><p><img src="%E6%88%AA%E5%B1%8F2021-07-18%20%E4%B8%8B%E5%8D%887.07.07.png" alt="截屏2021-07-18 下午7.07.07"></p><p>Recomputing missing partitions is fast for narrow dependencies, but slow for wide dependencies.</p><h1 id="SQL-Dataframes-and-Datasets"><a href="#SQL-Dataframes-and-Datasets" class="headerlink" title="SQL, Dataframes and Datasets"></a>SQL, Dataframes and Datasets</h1><p>Given a bit of extra structural information, Spark can do many optimizations for you.</p><p><strong>Unstructured</strong>: Log files, images</p><p><strong>Semi-structured</strong>: json, xml (self-describing)</p><p><strong>Structured</strong>: database tables </p><p>Spark + regular RDDs don’t know anything about the <strong>schema</strong> of the data it’s dealing with.</p><p><img src="%E6%88%AA%E5%B1%8F2021-07-18%20%E4%B8%8B%E5%8D%888.21.33.png" alt="截屏2021-07-18 下午8.21.33"></p><p><strong>Structured vs Unstructured Computation</strong></p><p>In Spark: we do functional transformations on data. We pass user-defined function literals to higher-order functions like <code>map</code>, <code>flatMap</code> and <code>filter</code></p><p>In database/Hive: We do declarative transformation on data.</p><p><img src="%E6%88%AA%E5%B1%8F2021-07-18%20%E4%B8%8B%E5%8D%888.24.15.png" alt="截屏2021-07-18 下午8.24.15"></p><h2 id="Spark-SQL"><a href="#Spark-SQL" class="headerlink" title="Spark SQL"></a>Spark SQL</h2><p>SQL is the lingua franca for doing analytics. But it’s a pain in the neck to connect big data processing pipelines like Spark or Hadoop to an SQL database</p><p>Spark SQL makes it possible to seamlessly <strong>intermix</strong> SQL queries with Scala and to get all of the <strong>optimization</strong> we’re used to in the databases community on Spark Jobs. </p><p>Three main goals:</p><ol><li>Support <strong>relational processing</strong> both within Spark programs (on RDDs) and on external data sources with a friendly API</li><li>High performance</li><li>Easily support new data sources such as semi-structured data and external databases</li></ol><p>Three main APIs:</p><ol><li>SQL literal syntax</li><li>DataFrames</li><li>Datasets</li></ol><p>Two specialized backend components:</p><ol><li>Catalyst, query optimizer</li><li>Tungsten, off-heap serializer</li></ol><p><img src="%E6%88%AA%E5%B1%8F2021-07-18%20%E4%B8%8B%E5%8D%888.30.39.png" alt="截屏2021-07-18 下午8.30.39"></p><p>To get started using Spark SQL, everything starts with <code>SparkSession</code>. (rather than <code>SparkContext</code>)</p><h2 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h2><p><strong>DataFrame</strong> is Spark SQL’s core abstraction. DataFrames are conceptually RDDs full of records with a known schema. DataFrames are <strong>untyped</strong></p><p>Transformations on DataFrames are also known as <strong>untyped transformation</strong></p><h3 id="Creating-DataFrames"><a href="#Creating-DataFrames" class="headerlink" title="Creating DataFrames"></a>Creating DataFrames</h3><ol><li>From an existing RDD <code>toDF()</code>, or explicitly specify the schema</li><li>Reading in specific <strong>data source</strong> from file</li></ol><p>toDF()</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> tupleRDD = ...<br><span class="hljs-keyword">val</span> tupleDF = tupleRDD.toDF(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;city&quot;</span>, <span class="hljs-string">&quot;country&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> schemaString = <span class="hljs-string">&quot;name age&quot;</span><br><span class="hljs-keyword">val</span> fields = schemaString.split(<span class="hljs-string">&quot; &quot;</span>)<br> .map(fieldName =&gt; <span class="hljs-type">StructField</span>(fieldName, <span class="hljs-type">StringType</span>, nullable = <span class="hljs-literal">true</span>))<br><br><span class="hljs-keyword">val</span> schema = <span class="hljs-type">StructType</span>(fields)<br><br><span class="hljs-keyword">val</span> rowRDD = peopleRDD<br>.map(_.split(<span class="hljs-string">&quot;,&quot;</span>))<br>.map(attributes =&gt; <span class="hljs-type">Row</span>(attributes(<span class="hljs-number">0</span>), attributes(<span class="hljs-number">1</span>).trim))<br><br><span class="hljs-keyword">val</span> peopleDF = spark.createDataFrame(rowRDD, schema)<br></code></pre></td></tr></table></figure><p>Semi-structured sources: Json, csv, parquet, JDBC</p><h3 id="SQL-Literals"><a href="#SQL-Literals" class="headerlink" title="SQL Literals"></a>SQL Literals</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scala">peopleDF.createOrReplaceTempView(<span class="hljs-string">&quot;people&quot;</span>)<br><span class="hljs-keyword">val</span> adultsDF<br> = spark.sql(<span class="hljs-string">&quot;SELECT * FROM people WHERE age &gt; 17&quot;</span>)<br></code></pre></td></tr></table></figure><p>The SQL statements available to you are largely what’s available in HiveQL. </p><h2 id="DataFrames-API"><a href="#DataFrames-API" class="headerlink" title="DataFrames API"></a>DataFrames API</h2><p>DataFrames are <strong>a relational API over Spark’s RDDs</strong></p><h3 id="DataFrames-Data-Types"><a href="#DataFrames-Data-Types" class="headerlink" title="DataFrames Data Types"></a>DataFrames Data Types</h3><p><img src="%E6%88%AA%E5%B1%8F2021-07-18%20%E4%B8%8B%E5%8D%888.47.23.png" alt="截屏2021-07-18 下午8.47.23"></p><p>Complex Spark SQL Data Types</p><p><img src="%E6%88%AA%E5%B1%8F2021-07-18%20%E4%B8%8B%E5%8D%888.49.55.png" alt="截屏2021-07-18 下午8.49.55"></p><p><img src="%E6%88%AA%E5%B1%8F2021-07-18%20%E4%B8%8B%E5%8D%888.51.54.png" alt="截屏2021-07-18 下午8.51.54"></p><p>It is possible to arbitrarily nest complex data types</p><blockquote><p>In order to use Spark SQL Types you need to import <code>import org.apache.spark.types._</code></p></blockquote><h3 id="Common-Transformations"><a href="#Common-Transformations" class="headerlink" title="Common Transformations"></a>Common Transformations</h3><p>Common transformation includes <code>select</code> ,<code>agg</code>, <code>groupBy</code> and <code>join</code></p><p><img src="%E6%88%AA%E5%B1%8F2021-07-18%20%E4%B8%8B%E5%8D%888.56.51.png" alt="截屏2021-07-18 下午8.56.51"></p><p><code>select</code> selects a set of named columns and returns a new DataFrame with these columns as a result</p><p><code>agg</code> performs aggregations of a series of columns and returns a new DataFrame with the calculated output</p><p><code>groupBy</code> groups the DataFrame using the specified columns. <strong>Intended to be used before an aggregation</strong></p><p><code>join</code> inner join with another DataFrame</p><p>Other transformations include: <code>filter, limit, orderBy, where, as, sort, union, drop</code> etc </p><blockquote><p><strong>Three ways to specify Columns:</strong> </p><ol><li>Using $-notation: <code>df.filter($&quot;age&quot; &gt; 18)</code> It requries <code>import spark.implicits._</code></li><li>Referring to the DataFrame <code>df.filter(df(&quot;age&quot; &gt; 18))</code></li><li>Using SQL query string <code>df.filter(&quot;age&gt; 18&quot;)</code></li></ol></blockquote><p>An example:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">case</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span>(<span class="hljs-params">id: <span class="hljs-type">Int</span>, fname: <span class="hljs-type">String</span>, lname: <span class="hljs-type">String</span>, age: <span class="hljs-type">Int</span>, <span class="hljs-type">Stirng</span></span>)</span><br><span class="hljs-keyword">val</span> sydneyEmployeesDF = employeeDF.select(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;lanme&quot;</span>)<br>.where(<span class="hljs-string">&quot;city == &#x27;sydney&#x27;&quot;</span>)<br>.orderBy(<span class="hljs-string">&quot;id&quot;</span>)<br></code></pre></td></tr></table></figure><p><code>filter</code> and <code>where</code> are the same</p><blockquote><p>Note that to use equal condition for filter, the syntax is</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scala">df.filter($<span class="hljs-string">&quot;col_name&quot;</span> === <span class="hljs-symbol">&#x27;valu</span>e&#x27;) <span class="hljs-comment">// note &#x27;===&#x27;!</span><br></code></pre></td></tr></table></figure></blockquote><h3 id="Grouping-and-Aggregating-on-DataFrames"><a href="#Grouping-and-Aggregating-on-DataFrames" class="headerlink" title="Grouping and Aggregating on DataFrames"></a>Grouping and Aggregating on DataFrames</h3><p>One of the most common tasks on tables is to (1) group data by a ceratin attribute, and then (2) do some kind of aggregation on it like a count</p><p>a <code>groupy</code> function which returns a <code>RelationalGroupedDataset</code> </p><p><strong>Example</strong></p><p>Compute the most expensive and least expensive homes for sale per zip code.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">case</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Listing</span>(<span class="hljs-params">street: <span class="hljs-type">String</span>, zip: <span class="hljs-type">Int</span>, price: <span class="hljs-type">Int</span></span>)</span><br><span class="hljs-keyword">val</span> listingsDF = ... <span class="hljs-comment">// DataFrame of Listing</span><br><br><span class="hljs-keyword">import</span> org.apache.spark.sql.functions._<br><span class="hljs-keyword">val</span> mostExpensiveDF = listingsDF.groupBy($<span class="hljs-string">&quot;zip&quot;</span>)<br>.max(<span class="hljs-string">&quot;price&quot;</span>)<br><span class="hljs-keyword">val</span> mostExpensiveDF = listingsDF.groupBy($<span class="hljs-string">&quot;zip&quot;</span>)<br>.min(<span class="hljs-string">&quot;price&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">case</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Post</span>(<span class="hljs-params">authorID: <span class="hljs-type">Int</span>, subforum: <span class="hljs-type">String</span>, likes: <span class="hljs-type">Int</span>, date: <span class="hljs-type">String</span></span>)</span><br><span class="hljs-keyword">val</span> postDF = ... <span class="hljs-comment">// DataFrame of Posts</span><br><br><span class="hljs-keyword">import</span> org.apache.spark.sql.functions._<br><br><span class="hljs-keyword">val</span> rankedDF = <br> postsDF.groupBy($<span class="hljs-string">&quot;authorID&quot;</span>,$<span class="hljs-string">&quot;subforum&quot;</span>)<br> .agg(count($<span class="hljs-string">&quot;authorID&quot;</span>)) <span class="hljs-comment">// new DF with columns authorID, subforum, count(authorID)</span><br> .orderBy($<span class="hljs-string">&quot;subforum&quot;</span>, $<span class="hljs-string">&quot;count(authorID)&quot;</span>.desc)<br></code></pre></td></tr></table></figure><h3 id="Getting-a-look-at-your-data"><a href="#Getting-a-look-at-your-data" class="headerlink" title="Getting a look at your data"></a>Getting a look at your data</h3><p>You can us <code>show()</code> which pretty prints the DataFrame in tabular form (by default 20 row). <code>printSchema()</code> prints the schema of your DataFrame in a tree format.</p><h2 id="Closer-look-in-DataFrame"><a href="#Closer-look-in-DataFrame" class="headerlink" title="Closer look in DataFrame"></a>Closer look in DataFrame</h2><h3 id="Cleaning-Data-with-DataFrames"><a href="#Cleaning-Data-with-DataFrames" class="headerlink" title="Cleaning Data with DataFrames"></a>Cleaning Data with DataFrames</h3><p>It’s desirable to do one of the following:</p><ul><li>drop row/records with unwanted values like <code>null</code> or <code>NaN</code></li><li>replace certain values with a constant</li></ul><p><strong>Dropping</strong></p><p>We can use <code>drop()</code> which drops rows that contain <code>null</code> or NaN values in <strong>any</strong> columns and returns a new DataFrame</p><p><code>drop(&quot;all&quot;)</code> drops rows that contain <code>null</code> or <code>NaN</code> values in <strong>all</strong> columns</p><p><code>drop(Array(&quot;id&quot;, &quot;name&quot;))</code> drops rows that contain <code>null</code> or <code>NaN</code>values in the <strong>specified</strong> columns and returns a new <code>DataFrame</code></p><p><strong>Replacing</strong></p><p><code>fill(0)</code> replaces all occurrences of <code>null</code> or <code>NaN</code> in <strong>numeric columns</strong> with <strong>specified vlaue</strong> and returns a new <code>DataFrame</code></p><p><code>fill(Map(&quot;column_name&quot;-&gt;0))</code> replaces all occurrences of <code>null</code> or <code>NaN</code> in <strong>specified column</strong> with <strong>specified value</strong> and returns a new <code>DataFrame</code></p><p><code>replace(Array(&quot;id&quot;), Map(1234-&gt;8923))</code> replaces <strong>specified value</strong> in <strong>specified column</strong> with <strong>specified replacemet value</strong> and returns a new <code>DataFrame</code></p><h3 id="Common-Actions-on-DataFrames"><a href="#Common-Actions-on-DataFrames" class="headerlink" title="Common Actions on DataFrames"></a>Common Actions on DataFrames</h3><p><code>collect(): Array[Row]</code> Returns an array that contains all of Rows in this DataFrame</p><p><code>count(): Long</code> </p><p><code>first(): Row/head(): Row</code>: returns the first row in the DataFrame</p><p><code>show(): Unit</code>: Displays the top 20 rows of DataFrame </p><p><code>take(n: Int): Array[Row]</code></p><h3 id="Joins-on-DataFrames"><a href="#Joins-on-DataFrames" class="headerlink" title="Joins on DataFrames"></a>Joins on DataFrames</h3><p>We need to specify which columns we should join on. <code>inner</code>, <code>outer</code>, <code>left_outer</code>, <code>right_outer</code>, <code>left_semi</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scala">df1.join(df2, $<span class="hljs-string">&quot;df1.id&quot;</span> === $<span class="hljs-string">&quot;df2.id&quot;</span>)<br>df1.join(df2, $<span class="hljs-string">&quot;df1.id&quot;</span> === $<span class="hljs-string">&quot;df2.id&quot;</span>, <span class="hljs-string">&quot;right_outer&quot;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>Different methods are specified as an argument</p></blockquote><h3 id="Optimizations"><a href="#Optimizations" class="headerlink" title="Optimizations"></a>Optimizations</h3><p><strong>Catalyst</strong>: query optimizer</p><p><em>Reordering operations</em> (Laziness + structure gives us the ability to analyze and rearrange DAG of computation, often pushing filter up)</p><p>Reduce the amount of data we must read</p><p><strong>Tungsten</strong>: off-heap data encoder (searializer)</p><ul><li>highly-specialized data encoders</li><li><strong>column-based</strong></li><li>off-heap (free from garbage collection overhead)</li></ul><blockquote><p>Tungsten can take schema information and tightly pack serialized data into memory. This means more data can fit in memory and faster serialization/deserialization.</p><p>Column-based data storage is well-known to be more efficient across DBMS</p></blockquote><h3 id="Limitations-of-DataFrmaes"><a href="#Limitations-of-DataFrmaes" class="headerlink" title="Limitations of DataFrmaes"></a>Limitations of DataFrmaes</h3><p>DFs are <strong>untyped</strong>.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scala">listingDF.filter($<span class="hljs-string">&quot;state&quot;</span> === <span class="hljs-string">&quot;CA&quot;</span>) <span class="hljs-comment">// compile, but state can be non-existent</span><br></code></pre></td></tr></table></figure><p>We can only use a <strong>Limited Data Types</strong>. This is can be hard when you already uses some kind of complicated regular Scala class</p><p>DF requires <strong>Semi-structured / Structured Data</strong>. There might be no structure to it. </p><h2 id="Datasets"><a href="#Datasets" class="headerlink" title="Datasets"></a>Datasets</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> averagePrices = averagePricesDF.collect()<br><span class="hljs-comment">// averagePrices: Array[org.apache.spark.sql.Row]</span><br><br><span class="hljs-keyword">val</span> averagePrices = averagePrice.map &#123;<br>  row =&gt; (row(<span class="hljs-number">0</span>).asInstanceOf[<span class="hljs-type">Int</span>], row(<span class="hljs-number">1</span>).asInstanceOf[<span class="hljs-type">Double</span>])<br>&#125; <span class="hljs-comment">// inconvenient</span><br></code></pre></td></tr></table></figure><p>We can check the schema using</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scala">averagePrices.head.printSchema()<br></code></pre></td></tr></table></figure><p>The motivation is that we want type safety as well as the optimization.</p><p>DataFrame is <strong>untyped</strong>. Dataset is <strong>typed</strong>.  DataFrame is actually a dataset</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">DataFrame</span> = Dataset[Row]<br></code></pre></td></tr></table></figure><p>A Dataset is a <strong>typed</strong> distributed collections of data. It unifies the <code>DataFrame</code> and <code>RDD</code> APIs. It requires structured/ semi-structured data. Schemas and <code>Encoder</code> s are core parts of <code>Dataset</code> </p><p>Datasets are something in the middle between DataFrames and RDDs. You can use relational operations and functional operations like <code>map</code>, <code>flatMap</code> and <code>filter</code>. It’s a good choice when you need to mix and match.</p><h3 id="Creating-Dataset"><a href="#Creating-Dataset" class="headerlink" title="Creating Dataset"></a>Creating Dataset</h3><p><strong>From a Dataset</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scala">myDF.toDS <span class="hljs-comment">// requires import spark.implicits._</span><br></code></pre></td></tr></table></figure><p><strong>From File</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> myDS = spark.read.json(<span class="hljs-string">&quot;people.json&quot;</span>).as[<span class="hljs-type">Person</span>]<br><span class="hljs-comment">// if case class Person match </span><br></code></pre></td></tr></table></figure><p><strong>From an RDD &amp; Common Scala types</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scala">.toDS<br></code></pre></td></tr></table></figure><h3 id="Typed-Columns"><a href="#Typed-Columns" class="headerlink" title="Typed Columns"></a>Typed Columns</h3><p>A <code>TypedColumn</code> is different from <code>Column</code> , you can cast it with </p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scala">$<span class="hljs-string">&quot;price&quot;</span>.as[<span class="hljs-type">Double</span>] <span class="hljs-comment">// this is a TypedColumn</span><br></code></pre></td></tr></table></figure><h3 id="Transformations-on-Dataset"><a href="#Transformations-on-Dataset" class="headerlink" title="Transformations on Dataset"></a>Transformations on Dataset</h3><p>Dataset introduces <strong>typed transformations</strong>. </p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scala">map[<span class="hljs-type">U</span>](f: <span class="hljs-type">T</span>=&gt;<span class="hljs-type">U</span>): <span class="hljs-type">Dataset</span>[<span class="hljs-type">U</span>]<br>flatMap[<span class="hljs-type">U</span>](f: <span class="hljs-type">T</span>=&gt;<span class="hljs-type">TraversableOnce</span>[<span class="hljs-type">U</span>]): <span class="hljs-type">Dataset</span>[<span class="hljs-type">U</span>]<br><br>groupByKey[<span class="hljs-type">K</span>](f: <span class="hljs-type">T</span> =&gt; <span class="hljs-type">K</span>): <span class="hljs-type">KeyValueGroupedDataset</span>[<span class="hljs-type">K</span>,<span class="hljs-type">T</span>]<br></code></pre></td></tr></table></figure><h3 id="Grouping-Operations-on-Datasets"><a href="#Grouping-Operations-on-Datasets" class="headerlink" title="Grouping Operations on Datasets"></a>Grouping Operations on Datasets</h3><p>Calling <code>groupByKey</code> on a <code>Dataset</code> returns a <code>KeyValueGroupedDataset</code>, it contains a number of aggregation operations which return <code>Datasets</code></p><h1 id="Practicals"><a href="#Practicals" class="headerlink" title="Practicals"></a>Practicals</h1><h2 id="Create-Column-with-literal-values"><a href="#Create-Column-with-literal-values" class="headerlink" title="Create Column with literal values"></a>Create Column with literal values</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scala">df2 = df1.withColumn(<span class="hljs-string">&quot;col_name&quot;</span>, lit(<span class="hljs-string">&quot;value&quot;</span>))<br>df2 = df1.select($<span class="hljs-string">&quot;*&quot;</span>, lit(<span class="hljs-string">&quot;value&quot;</span>).as(<span class="hljs-string">&quot;col_name&quot;</span>))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Scala</tag>
      
      <tag>Big Data</tag>
      
      <tag>Spark</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>complex datatype in dataframe</title>
    <link href="/2021/07/01/complex-datatype-in-dataframe/"/>
    <url>/2021/07/01/complex-datatype-in-dataframe/</url>
    
    <content type="html"><![CDATA[<h1 id="Data-Sources-and-formats"><a href="#Data-Sources-and-formats" class="headerlink" title="Data Sources and formats"></a>Data Sources and formats</h1><p><img src="%E6%88%AA%E5%B1%8F2021-07-20%20%E4%B8%8A%E5%8D%8810.02.11.png" alt="截屏2021-07-20 上午10.02.11"></p><h1 id="Interchanging-data-formats-with-Spark-SQL"><a href="#Interchanging-data-formats-with-Spark-SQL" class="headerlink" title="Interchanging data formats with Spark SQL"></a>Interchanging data formats with Spark SQL</h1><p>Spark can be used to interchange data formats as easily as:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs scala">events = spark.readStream \<br>  .format(<span class="hljs-string">&quot;json&quot;</span>) \           # or parquet, kafka, orc...<br>  .option() \                 # format specific options<br>  .schema(my_schema) \        # required<br>  .load(<span class="hljs-string">&quot;path/to/data&quot;</span>)<br><br>output = …                   # perform your transformations<br><br>output.writeStream \          # write out your data <br>  .format(<span class="hljs-string">&quot;parquet&quot;</span>) \<br>  .start(<span class="hljs-string">&quot;path/to/write&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="Transforming-Complex-Data-Types"><a href="#Transforming-Complex-Data-Types" class="headerlink" title="Transforming Complex Data Types"></a>Transforming Complex Data Types</h1><p>This <a href="https://databricks.com/blog/2017/02/23/working-complex-data-formats-structured-streaming-apache-spark-2-1.html">blog</a> is very useful.</p><p>It is common to have complex data types such as <strong>structs, maps, and arrays</strong> when working with semi-structured formats. </p><h3 id="Selecting-from-nested-columns"><a href="#Selecting-from-nested-columns" class="headerlink" title="Selecting from nested columns"></a>Selecting from nested columns</h3><p>Dots (<code>.</code>) can be used to access nested columns for structs and maps.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">// input</span><br>&#123;<br>  <span class="hljs-string">&quot;a&quot;</span>: &#123;<br>     <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">1</span><br>  &#125;<br>&#125;<br><br><span class="hljs-type">Python</span>: events.select(<span class="hljs-string">&quot;a.b&quot;</span>)<br> <span class="hljs-type">Scala</span>: events.select(<span class="hljs-string">&quot;a.b&quot;</span>)<br>   <span class="hljs-type">SQL</span>: select a.b from events<br><br><span class="hljs-comment">// output</span><br>&#123;<br>  <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Flattening-structs"><a href="#Flattening-structs" class="headerlink" title="Flattening structs"></a>Flattening structs</h3><p>A star (<code>*</code>) can be used to select all of the subfields in a struct.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">// input</span><br>&#123;<br>  <span class="hljs-string">&quot;a&quot;</span>: &#123;<br>     <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">1</span>,<br>     <span class="hljs-string">&quot;c&quot;</span>: <span class="hljs-number">2</span><br>  &#125;<br>&#125;<br><br><span class="hljs-type">Python</span>:  events.select(<span class="hljs-string">&quot;a.*&quot;</span>)<br> <span class="hljs-type">Scala</span>:  events.select(<span class="hljs-string">&quot;a.*&quot;</span>)<br>   <span class="hljs-type">SQL</span>:  select a.* from events<br><br><span class="hljs-comment">// output</span><br>&#123;<br>  <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-string">&quot;c&quot;</span>: <span class="hljs-number">2</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Nesting-columns"><a href="#Nesting-columns" class="headerlink" title="Nesting columns"></a>Nesting columns</h3><p>The struct function or just parentheses in SQL can be used to create a new struct.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs language-scala">// input<br>&#123;<br>  &quot;a&quot;: 1,<br>  &quot;b&quot;: 2,<br>  &quot;c&quot;: 3<br>&#125;<br><br>Python: events.select(struct(col(&quot;a&quot;).alias(&quot;y&quot;)).alias(&quot;x&quot;))<br> Scala: events.select(struct(&#x27;a as &#x27;y) as &#x27;x)<br>   SQL: select named_struct(&quot;y&quot;, a) as x from events<br><br>// output<br>&#123;<br>  &quot;x&quot;: &#123;<br>    &quot;y&quot;: 1<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Selecting-a-single-array-or-map-element"><a href="#Selecting-a-single-array-or-map-element" class="headerlink" title="Selecting a single array or map element"></a>Selecting a single array or map element</h3><p><code>getItem()</code> or square brackets (i.e. <code>[ ]</code>) can be used to select a single element out of an array or a map.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs language-scala">// input<br>&#123;<br>  &quot;a&quot;: [1, 2]<br>&#125;<br><br>Python: events.select(col(&quot;a&quot;).getItem(0).alias(&quot;x&quot;))<br> Scala: events.select(&#x27;a.getItem(0) as &#x27;x)<br>   SQL: select a[0] as x from events<br><br>// output<br>&#123; &quot;x&quot;: 1 &#125;<br>// input<br>&#123;<br>  &quot;a&quot;: &#123;<br>    &quot;b&quot;: 1<br>  &#125;<br>&#125;<br><br>Python: events.select(col(&quot;a&quot;).getItem(&quot;b&quot;).alias(&quot;x&quot;))<br> Scala: events.select(&#x27;a.getItem(&quot;b&quot;) as &#x27;x)<br>   SQL: select a[&#x27;b&#x27;] as x from events<br><br>// output<br>&#123; &quot;x&quot;: 1 &#125;<br></code></pre></td></tr></table></figure><h3 id="Creating-a-row-for-each-array-or-map-element"><a href="#Creating-a-row-for-each-array-or-map-element" class="headerlink" title="Creating a row for each array or map element"></a>Creating a row for each array or map element</h3><p><code>explode()</code> can be used to create a new row for each element in an array or each key-value pair. This is similar to LATERAL VIEW EXPLODE in HiveQL.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs language-scala">// input<br>&#123;<br>  &quot;a&quot;: [1, 2]<br>&#125;<br><br>Python: events.select(explode(&quot;a&quot;).alias(&quot;x&quot;))<br> Scala: events.select(explode(&#x27;a) as &#x27;x)<br>   SQL: select explode(a) as x from events<br><br>// output<br>[&#123; &quot;x&quot;: 1 &#125;, &#123; &quot;x&quot;: 2 &#125;]<br>// input<br>&#123;<br>  &quot;a&quot;: &#123;<br>    &quot;b&quot;: 1,<br>    &quot;c&quot;: 2<br>  &#125;<br>&#125;<br><br>Python: events.select(explode(&quot;a&quot;).alias(&quot;x&quot;, &quot;y&quot;))<br> Scala: events.select(explode(&#x27;a) as Seq(&quot;x&quot;, &quot;y&quot;))<br>   SQL: select explode(a) as (x, y) from events<br><br>// output<br>[&#123; &quot;x&quot;: &quot;b&quot;, &quot;y&quot;: 1 &#125;, &#123; &quot;x&quot;: &quot;c&quot;, &quot;y&quot;: 2 &#125;]<br></code></pre></td></tr></table></figure><h3 id="Collecting-multiple-rows-into-an-array"><a href="#Collecting-multiple-rows-into-an-array" class="headerlink" title="Collecting multiple rows into an array"></a>Collecting multiple rows into an array</h3><p><code>collect_list()</code> and <code>collect_set()</code> can be used to aggregate items into an array.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs language-scala">// input<br>[&#123; &quot;x&quot;: 1 &#125;, &#123; &quot;x&quot;: 2 &#125;]<br><br>Python: events.select(collect_list(&quot;x&quot;).alias(&quot;x&quot;))<br> Scala: events.select(collect_list(&#x27;x) as &#x27;x)<br>   SQL: select collect_list(x) as x from events<br><br>// output<br>&#123; &quot;x&quot;: [1, 2] &#125;<br>// input<br>[&#123; &quot;x&quot;: 1, &quot;y&quot;: &quot;a&quot; &#125;, &#123; &quot;x&quot;: 2, &quot;y&quot;: &quot;b&quot; &#125;]<br><br>Python: events.groupBy(&quot;y&quot;).agg(collect_list(&quot;x&quot;).alias(&quot;x&quot;))<br> Scala: events.groupBy(&quot;y&quot;).agg(collect_list(&#x27;x) as &#x27;x)<br>   SQL: select y, collect_list(x) as x from events group by y<br><br>// output<br>[&#123; &quot;y&quot;: &quot;a&quot;, &quot;x&quot;: [1]&#125;, &#123; &quot;y&quot;: &quot;b&quot;, &quot;x&quot;: [2]&#125;]<br></code></pre></td></tr></table></figure><h3 id="Selecting-one-field-from-each-item-in-an-array"><a href="#Selecting-one-field-from-each-item-in-an-array" class="headerlink" title="Selecting one field from each item in an array"></a>Selecting one field from each item in an array</h3><p>When you use dot notation on an array we return a new array where that field has been selected from each array element.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs language-scala">// input<br>&#123;<br>  &quot;a&quot;: [<br>    &#123;&quot;b&quot;: 1&#125;,<br>    &#123;&quot;b&quot;: 2&#125;<br>  ]<br>&#125;<br><br>Python: events.select(&quot;a.b&quot;)<br> Scala: events.select(&quot;a.b&quot;)<br>   SQL: select a.b from events<br><br>// output<br>&#123;<br>  &quot;b&quot;: [1, 2]<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Power-of-to-json-and-from-json"><a href="#Power-of-to-json-and-from-json" class="headerlink" title="Power of to_json() and from_json()"></a>Power of to_json() and from_json()</h2><p>Spark SQL provides functions like <code>to_json()</code> to encode a struct as a string and <code>from_json()</code> to retrieve the struct as a complex type. Using JSON strings as columns are useful when reading from or writing to a streaming source like Kafka. Each Kafka key-value record will be augmented with some metadata, such as the ingestion timestamp into Kafka, the offset in Kafka, etc. If the “value” field that contains your data is in JSON, you could use <code>from_json()</code> to extract your data, enrich it, clean it, and then push it downstream to Kafka again or write it out to a file.</p><h4 id="Encode-a-struct-as-json"><a href="#Encode-a-struct-as-json" class="headerlink" title="Encode a struct as json"></a>Encode a struct as json</h4><p><code>to_json()</code> can be used to turn structs into JSON strings. This method is particularly useful when you would like to re-encode multiple columns into a single one when writing data out to Kafka. This method is not presently available in SQL.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs language-scala">// input<br>&#123;<br>  &quot;a&quot;: &#123;<br>    &quot;b&quot;: 1<br>  &#125;<br>&#125;<br><br>Python: events.select(to_json(&quot;a&quot;).alias(&quot;c&quot;))<br> Scala: events.select(to_json(&#x27;a) as &#x27;c)<br><br>// output<br>&#123;<br>  &quot;c&quot;: &quot;&#123;\&quot;b\&quot;:1&#125;&quot;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Decode-json-column-as-a-struct"><a href="#Decode-json-column-as-a-struct" class="headerlink" title="Decode json column as a struct"></a>Decode json column as a struct</h4><p><code>from_json()</code> can be used to turn a string column with JSON data into a struct. Then you may flatten the struct as described above to have individual columns. This method is not presently available in SQL.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs language-scala">// input<br>&#123;<br>  &quot;a&quot;: &quot;&#123;\&quot;b\&quot;:1&#125;&quot;<br>&#125;<br><br>Python: <br>  schema = StructType().add(&quot;b&quot;, IntegerType())<br>  events.select(from_json(&quot;a&quot;, schema).alias(&quot;c&quot;))<br>Scala:<br>  val schema = new StructType().add(&quot;b&quot;, IntegerType)<br>  events.select(from_json(&#x27;a, schema) as &#x27;c)<br><br>// output<br>&#123;<br>  &quot;c&quot;: &#123;<br>    &quot;b&quot;: 1<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Sometimes you may want to leave a part of the JSON string still as JSON to avoid too much complexity in your schema.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs language-scala">// input<br>&#123;<br>  &quot;a&quot;: &quot;&#123;\&quot;b\&quot;:&#123;\&quot;x\&quot;:1,\&quot;y\&quot;:&#123;\&quot;z\&quot;:2&#125;&#125;&#125;&quot;<br>&#125;<br><br>Python: <br>  schema = StructType().add(&quot;b&quot;, StructType().add(&quot;x&quot;, IntegerType())<br>                              .add(&quot;y&quot;, StringType()))<br>  events.select(from_json(&quot;a&quot;, schema).alias(&quot;c&quot;))<br>Scala:<br>  val schema = new StructType().add(&quot;b&quot;, new StructType().add(&quot;x&quot;, IntegerType)<br>    .add(&quot;y&quot;, StringType))<br>  events.select(from_json(&#x27;a, schema) as &#x27;c)<br><br>// output<br>&#123;<br>  &quot;c&quot;: &#123;<br>    &quot;b&quot;: &#123;<br>      &quot;x&quot;: 1,<br>      &quot;y&quot;: &quot;&#123;\&quot;z\&quot;:2&#125;&quot;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Parse-a-set-of-fields-from-a-column-containing-JSON"><a href="#Parse-a-set-of-fields-from-a-column-containing-JSON" class="headerlink" title="Parse a set of fields from a column containing JSON"></a>Parse a set of fields from a column containing JSON</h4><p><code>json_tuple()</code> can be used to extract fields available in a string column with JSON data.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs language-scala">// input<br>&#123;<br>  &quot;a&quot;: &quot;&#123;\&quot;b\&quot;:1&#125;&quot;<br>&#125;<br><br>Python: events.select(json_tuple(&quot;a&quot;, &quot;b&quot;).alias(&quot;c&quot;))<br>Scala:  events.select(json_tuple(&#x27;a, &quot;b&quot;) as &#x27;c)<br>SQL:    select json_tuple(a, &quot;b&quot;) as c from events<br><br>// output<br>&#123; &quot;c&quot;: 1 &#125;<br></code></pre></td></tr></table></figure><p>Sometimes a string column may not be self-describing as JSON, but may still have a well-formed structure. For example, it could be a log message generated using a specific Log4j format. Spark SQL can be used to structure those strings for you with ease!</p><h4 id="Parse-a-well-formed-string-column"><a href="#Parse-a-well-formed-string-column" class="headerlink" title="Parse a well-formed string column"></a>Parse a well-formed string column</h4><p><code>regexp_extract()</code> can be used to parse strings using regular expressions.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs language-scala">// input<br>[&#123; &quot;a&quot;: &quot;x: 1&quot; &#125;, &#123; &quot;a&quot;: &quot;y: 2&quot; &#125;]<br><br>Python: events.select(regexp_extract(&quot;a&quot;, &quot;([a-z]):&quot;, 1).alias(&quot;c&quot;))<br>Scala:  events.select(regexp_extract(&#x27;a, &quot;([a-z]):&quot;, 1) as &#x27;c)<br>SQL:    select regexp_extract(a, &quot;([a-z]):&quot;, 1) as c from events<br><br>// output<br>[&#123; &quot;c&quot;: &quot;x&quot; &#125;, &#123; &quot;c&quot;: &quot;y&quot; &#125;]<br></code></pre></td></tr></table></figure><h2 id="More-Json"><a href="#More-Json" class="headerlink" title="More Json!"></a>More Json!</h2><p>The useful functions are <code>get_json_object()</code>, <code>from_json()</code>, <code>to_json()</code>, <code>explode()</code> and <code>selectExpr()</code></p><p>Checkout this <a href="https://docs.databricks.com/_static/notebooks/complex-nested-structured.html">notebook</a> on databricks!!!</p><h3 id="A-simple-Json-Schema-without-nested-Structure"><a href="#A-simple-Json-Schema-without-nested-Structure" class="headerlink" title="A simple Json Schema without nested Structure"></a>A simple Json Schema without nested Structure</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">import</span> org.apache.spark.sql.types._                         <span class="hljs-comment">// include the Spark Types to define our schema</span><br><span class="hljs-keyword">import</span> org.apache.spark.sql.functions._                     <span class="hljs-comment">// include the Spark helper functions</span><br><br><span class="hljs-keyword">val</span> jsonSchema = <span class="hljs-keyword">new</span> <span class="hljs-type">StructType</span>()<br>        .add(<span class="hljs-string">&quot;battery_level&quot;</span>, <span class="hljs-type">LongType</span>)<br>        .add(<span class="hljs-string">&quot;c02_level&quot;</span>, <span class="hljs-type">LongType</span>)<br>        .add(<span class="hljs-string">&quot;cca3&quot;</span>,<span class="hljs-type">StringType</span>)<br>        .add(<span class="hljs-string">&quot;cn&quot;</span>, <span class="hljs-type">StringType</span>)<br>        .add(<span class="hljs-string">&quot;device_id&quot;</span>, <span class="hljs-type">LongType</span>)<br>        .add(<span class="hljs-string">&quot;device_type&quot;</span>, <span class="hljs-type">StringType</span>)<br>        .add(<span class="hljs-string">&quot;signal&quot;</span>, <span class="hljs-type">LongType</span>)<br>        .add(<span class="hljs-string">&quot;ip&quot;</span>, <span class="hljs-type">StringType</span>)<br>        .add(<span class="hljs-string">&quot;temp&quot;</span>, <span class="hljs-type">LongType</span>)<br>        .add(<span class="hljs-string">&quot;timestamp&quot;</span>, <span class="hljs-type">TimestampType</span>)<br></code></pre></td></tr></table></figure><h3 id="get-json-object"><a href="#get-json-object" class="headerlink" title="get_json_object()"></a><code>get_json_object()</code></h3><p><code>get_json_object()</code> extracts a JSON object from a JSON string based on JSON path specified, and returns a JSON string as the extracted JSON object. </p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> jsDF = eventsFromJSONDF.select($<span class="hljs-string">&quot;id&quot;</span>, get_json_object($<span class="hljs-string">&quot;json&quot;</span>, <span class="hljs-string">&quot;$.device_type&quot;</span>).alias(<span class="hljs-string">&quot;device_type&quot;</span>),<br>                                          get_json_object($<span class="hljs-string">&quot;json&quot;</span>, <span class="hljs-string">&quot;$.ip&quot;</span>).alias(<span class="hljs-string">&quot;ip&quot;</span>),<br>                                         get_json_object($<span class="hljs-string">&quot;json&quot;</span>, <span class="hljs-string">&quot;$.cca3&quot;</span>).alias(<span class="hljs-string">&quot;cca3&quot;</span>))<br></code></pre></td></tr></table></figure><p>This allows you to <strong>extract json fields as columns</strong></p><h3 id="from-json"><a href="#from-json" class="headerlink" title="from_json()"></a><code>from_json()</code></h3><p><code>from_json()</code> is a variation of <code>get_json_object()</code>, this function <strong>uses schema to extract individual columns</strong>. Using <code>from_json()</code> helper function within the <code>select()</code> Dataset API call, we can extract or encode data’s attributes and values from a JSON string into a DataFrame as columns, dictated by a schema.</p><p>In example below:</p><ul><li>Uses the schema above to extract from the JSON string attributes and values and represent them as individual columns as part of <code>devices</code></li><li><code>select()</code> all its columns</li><li>Filters on desired attributes using the <code>.</code> notation</li></ul><p>Once you have extracted data from a JSON string into its respective DataFrame columns, you can apply DataFrame/Dataset APIs calls to select, filter, and subsequtly display, to your satisfaction.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> devicesDF = eventsDS.select(from_json($<span class="hljs-string">&quot;device&quot;</span>, jsonSchema) as <span class="hljs-string">&quot;devices&quot;</span>)<br>.select($<span class="hljs-string">&quot;devices.*&quot;</span>)<br>.filter($<span class="hljs-string">&quot;devices.temp&quot;</span> &gt; <span class="hljs-number">10</span> and $<span class="hljs-string">&quot;devices.signal&quot;</span> &gt; <span class="hljs-number">15</span>)<br></code></pre></td></tr></table></figure><h3 id="to-json"><a href="#to-json" class="headerlink" title="to_json()"></a><code>to_json()</code></h3><p>You can convert or encode our filtered devices into JSON string using <code>to_json()</code>. That is, <strong>convert a JSON struct into a string.</strong> </p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> stringJsonDF = eventsDS.select(to_json(struct($<span class="hljs-string">&quot;*&quot;</span>))).toDF(<span class="hljs-string">&quot;devices&quot;</span>)<br><br></code></pre></td></tr></table></figure><h3 id="selectExpr"><a href="#selectExpr" class="headerlink" title="selectExpr()"></a><code>selectExpr()</code></h3><p>Another way to convert or encode a column into a JSON object as string is to use the <em>selectExpr()</em> utility function. For instance, I can convert the “device” column of our DataFrame from above into a JSON String</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> stringsDF = eventsDS.selectExpr(<span class="hljs-string">&quot;CAST(id AS INT)&quot;</span>, <span class="hljs-string">&quot;CAST(device AS STRING)&quot;</span>)<br></code></pre></td></tr></table></figure><p>Another use of <code>selectExpr()</code> is its ability, as the function name suggests, <strong>take expressions as arguments and convert them into respective columns</strong>. For instance, say I want to express c02 levels and temperature ratios.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scala">devicesDF.selectExpr(<span class="hljs-string">&quot;c02_level&quot;</span>, <span class="hljs-string">&quot;round(c02_level/temp) as ratio_c02_temperature&quot;</span>).orderBy($<span class="hljs-string">&quot;ratio_c02_temperature&quot;</span> desc)<br></code></pre></td></tr></table></figure><h3 id="Nested-Structure"><a href="#Nested-Structure" class="headerlink" title="Nested Structure"></a>Nested Structure</h3><p>It’s not unreasonable to assume that your JSON nested structures may have Maps as well as nested JSON. For illustration, let’s use a single string comprised of complex and nested data types, including a Map. In a real life scenario, this could be a reading from a device event, with dangerous levels of C02 emissions or high temperature readings, that needs Network Operation Center (NOC) notification for some immediate action.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">import</span> org.apache.spark.sql.types._<br><br><span class="hljs-keyword">val</span> schema = <span class="hljs-keyword">new</span> <span class="hljs-type">StructType</span>()<br>  .add(<span class="hljs-string">&quot;dc_id&quot;</span>, <span class="hljs-type">StringType</span>)                               <span class="hljs-comment">// data center where data was posted to Kafka cluster</span><br>  .add(<span class="hljs-string">&quot;source&quot;</span>,                                          <span class="hljs-comment">// info about the source of alarm</span><br>    <span class="hljs-type">MapType</span>(                                              <span class="hljs-comment">// define this as a Map(Key-&gt;value)</span><br>      <span class="hljs-type">StringType</span>,<br>      <span class="hljs-keyword">new</span> <span class="hljs-type">StructType</span>()<br>      .add(<span class="hljs-string">&quot;description&quot;</span>, <span class="hljs-type">StringType</span>)<br>      .add(<span class="hljs-string">&quot;ip&quot;</span>, <span class="hljs-type">StringType</span>)<br>      .add(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-type">LongType</span>)<br>      .add(<span class="hljs-string">&quot;temp&quot;</span>, <span class="hljs-type">LongType</span>)<br>      .add(<span class="hljs-string">&quot;c02_level&quot;</span>, <span class="hljs-type">LongType</span>)<br>      .add(<span class="hljs-string">&quot;geo&quot;</span>, <br>         <span class="hljs-keyword">new</span> <span class="hljs-type">StructType</span>()<br>          .add(<span class="hljs-string">&quot;lat&quot;</span>, <span class="hljs-type">DoubleType</span>)<br>          .add(<span class="hljs-string">&quot;long&quot;</span>, <span class="hljs-type">DoubleType</span>)<br>        )<br>      )<br>    )<br></code></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">//create a single entry with id and its complex and nested data types</span><br><br><span class="hljs-keyword">val</span> dataDS = <span class="hljs-type">Seq</span>(<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">&quot;dc_id&quot;: &quot;dc-101&quot;,</span><br><span class="hljs-string">&quot;source&quot;: &#123;</span><br><span class="hljs-string">    &quot;sensor-igauge&quot;: &#123;</span><br><span class="hljs-string">      &quot;id&quot;: 10,</span><br><span class="hljs-string">      &quot;ip&quot;: &quot;68.28.91.22&quot;,</span><br><span class="hljs-string">      &quot;description&quot;: &quot;Sensor attached to the container ceilings&quot;,</span><br><span class="hljs-string">      &quot;temp&quot;:35,</span><br><span class="hljs-string">      &quot;c02_level&quot;: 1475,</span><br><span class="hljs-string">      &quot;geo&quot;: &#123;&quot;lat&quot;:38.00, &quot;long&quot;:97.00&#125;                        </span><br><span class="hljs-string">    &#125;,</span><br><span class="hljs-string">    &quot;sensor-ipad&quot;: &#123;</span><br><span class="hljs-string">      &quot;id&quot;: 13,</span><br><span class="hljs-string">      &quot;ip&quot;: &quot;67.185.72.1&quot;,</span><br><span class="hljs-string">      &quot;description&quot;: &quot;Sensor ipad attached to carbon cylinders&quot;,</span><br><span class="hljs-string">      &quot;temp&quot;: 34,</span><br><span class="hljs-string">      &quot;c02_level&quot;: 1370,</span><br><span class="hljs-string">      &quot;geo&quot;: &#123;&quot;lat&quot;:47.41, &quot;long&quot;:-122.00&#125;</span><br><span class="hljs-string">    &#125;,</span><br><span class="hljs-string">    &quot;sensor-inest&quot;: &#123;</span><br><span class="hljs-string">      &quot;id&quot;: 8,</span><br><span class="hljs-string">      &quot;ip&quot;: &quot;208.109.163.218&quot;,</span><br><span class="hljs-string">      &quot;description&quot;: &quot;Sensor attached to the factory ceilings&quot;,</span><br><span class="hljs-string">      &quot;temp&quot;: 40,</span><br><span class="hljs-string">      &quot;c02_level&quot;: 1346,</span><br><span class="hljs-string">      &quot;geo&quot;: &#123;&quot;lat&quot;:33.61, &quot;long&quot;:-111.89&#125;</span><br><span class="hljs-string">    &#125;,</span><br><span class="hljs-string">    &quot;sensor-istick&quot;: &#123;</span><br><span class="hljs-string">      &quot;id&quot;: 5,</span><br><span class="hljs-string">      &quot;ip&quot;: &quot;204.116.105.67&quot;,</span><br><span class="hljs-string">      &quot;description&quot;: &quot;Sensor embedded in exhaust pipes in the ceilings&quot;,</span><br><span class="hljs-string">      &quot;temp&quot;: 40,</span><br><span class="hljs-string">      &quot;c02_level&quot;: 1574,</span><br><span class="hljs-string">      &quot;geo&quot;: &#123;&quot;lat&quot;:35.93, &quot;long&quot;:-85.46&#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">&#125;&quot;&quot;&quot;</span>).toDS()<br><span class="hljs-comment">// should only be one item</span><br>dataDS.count()<br></code></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> df = spark                  <span class="hljs-comment">// spark session </span><br>.read                           <span class="hljs-comment">// get DataFrameReader</span><br>.schema(schema)                 <span class="hljs-comment">// use the defined schema above and read format as JSON</span><br>.json(dataDS.rdd)               <span class="hljs-comment">// RDD[String]</span><br></code></pre></td></tr></table></figure><h3 id="explode"><a href="#explode" class="headerlink" title="explode()"></a><code>explode()</code></h3><p>The <a href="https://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.sql.functions$"><code>explode()</code></a> function is used to show how to extract nested structures. Plus, it sheds more light when we see how it works alongside <code>to_json()</code> and <code>from_json()</code> functions, when extracting attributes and values from complex JSON structures. So on occasion, you will want to use <code>explode()</code>, alongside <code>to_json()</code> and <code>from_json()</code> functions. And here’s one case where we do.</p><p>The <code>explode()</code> function creates a new row for each element in the given map column. In this case, the map column is <code>source</code>. Note that for each key-value in the map, you have a respective Row, in this case four.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> explodedDF = df.select($<span class="hljs-string">&quot;dc_id&quot;</span>, explode($<span class="hljs-string">&quot;source&quot;</span>))<br></code></pre></td></tr></table></figure><p>Now we can access the data from our exploded data using Map</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">//case class to denote our desired Scala object</span><br><span class="hljs-keyword">case</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeviceAlert</span>(<span class="hljs-params">dcId: <span class="hljs-type">String</span>, deviceType:<span class="hljs-type">String</span>, ip:<span class="hljs-type">String</span>, deviceId:<span class="hljs-type">Long</span>, temp:<span class="hljs-type">Long</span>, c02_level: <span class="hljs-type">Long</span>, lat: <span class="hljs-type">Double</span>, lon: <span class="hljs-type">Double</span></span>)</span><br><span class="hljs-comment">//access all values using getItem() method on value, by providing the &quot;key,&quot; which is attribute in our JSON object.</span><br><span class="hljs-keyword">val</span> notifydevicesDS = explodedDF.select( $<span class="hljs-string">&quot;dc_id&quot;</span> as <span class="hljs-string">&quot;dcId&quot;</span>,<br>                        $<span class="hljs-string">&quot;key&quot;</span> as <span class="hljs-string">&quot;deviceType&quot;</span>,<br>                        <span class="hljs-symbol">&#x27;value</span>.getItem(<span class="hljs-string">&quot;ip&quot;</span>) as <span class="hljs-symbol">&#x27;ip</span>,<br>                        <span class="hljs-symbol">&#x27;value</span>.getItem(<span class="hljs-string">&quot;id&quot;</span>) as <span class="hljs-symbol">&#x27;deviceId</span>,<br>                        <span class="hljs-symbol">&#x27;value</span>.getItem(<span class="hljs-string">&quot;c02_level&quot;</span>) as <span class="hljs-symbol">&#x27;c02_level</span>,<br>                        <span class="hljs-symbol">&#x27;value</span>.getItem(<span class="hljs-string">&quot;temp&quot;</span>) as <span class="hljs-symbol">&#x27;temp</span>,<br>                        <span class="hljs-symbol">&#x27;value</span>.getItem(<span class="hljs-string">&quot;geo&quot;</span>).getItem(<span class="hljs-string">&quot;lat&quot;</span>) as <span class="hljs-symbol">&#x27;lat</span>,                <span class="hljs-comment">//note embedded level requires yet another level of fetching.</span><br>                        <span class="hljs-symbol">&#x27;value</span>.getItem(<span class="hljs-string">&quot;geo&quot;</span>).getItem(<span class="hljs-string">&quot;long&quot;</span>) as <span class="hljs-symbol">&#x27;lon</span>)<br>                        .as[<span class="hljs-type">DeviceAlert</span>]  <span class="hljs-comment">// return as a Dataset</span><br></code></pre></td></tr></table></figure><blockquote><p>Note that we use <code>getItem()</code> to retrieve a value in a map</p></blockquote><h1 id="Working-with-complex-type-Columns"><a href="#Working-with-complex-type-Columns" class="headerlink" title="Working with complex type Columns"></a>Working with complex type Columns</h1><h2 id="Map-Type-Columns"><a href="#Map-Type-Columns" class="headerlink" title="Map Type Columns"></a>Map Type Columns</h2><h3 id="Fetching-values-from-maps-with-dot"><a href="#Fetching-values-from-maps-with-dot" class="headerlink" title="Fetching values from maps with . (dot)"></a>Fetching values from maps with <code>.</code> (dot)</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scala">singersDF<br>.withColumn(<span class="hljs-string">&quot;song_to_love&quot;</span>, $<span class="hljs-string">&quot;songs.good_song&quot;</span>)<br>.show(<span class="hljs-literal">false</span>)<br></code></pre></td></tr></table></figure><h1 id="A-real-Example"><a href="#A-real-Example" class="headerlink" title="A real Example"></a>A real Example</h1><p>If your schema is wrong, there will <strong>not</strong> be exception thrown but the corresponding columns will be Null!!!! (Which is annoying but fundamentally due to the <strong>untyped</strong> nature of dataframe)</p><p><img src="%E6%88%AA%E5%B1%8F2021-07-20%20%E4%B8%8B%E5%8D%886.37.38.png" alt="截屏2021-07-20 下午6.37.38"></p><p>对应解析代码：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">import</span> org.apache.spark.sql.types._<br><span class="hljs-keyword">import</span> org.apache.spark.sql.functions._                     <span class="hljs-comment">// include the Spark helper functions</span><br><span class="hljs-keyword">val</span> aidRecallInfoSchema<br> = <span class="hljs-keyword">new</span> <span class="hljs-type">StructType</span>()<br>    .add(<span class="hljs-string">&quot;ad_type&quot;</span>, <span class="hljs-type">LongType</span>)<br>    .add(<span class="hljs-string">&quot;dpa_id&quot;</span>, <span class="hljs-type">LongType</span>)<br>    .add(<span class="hljs-string">&quot;cids&quot;</span>, <br>        <span class="hljs-type">ArrayType</span> (<br>            <span class="hljs-type">LongType</span>, <span class="hljs-literal">true</span><br>        )<br>    )<br>    .add(<span class="hljs-string">&quot;aid&quot;</span>, <span class="hljs-type">LongType</span>)<br>    .add(<span class="hljs-string">&quot;direct_id_infos&quot;</span>, <br>        <span class="hljs-type">MapType</span> (<br>            <span class="hljs-type">StringType</span>,<br>            <span class="hljs-keyword">new</span> <span class="hljs-type">StructType</span>()<br>            .add (<span class="hljs-string">&quot;check_id_infos&quot;</span>,<br>                <span class="hljs-type">MapType</span>  (<br>                    <span class="hljs-type">StringType</span>,<br>                    <span class="hljs-keyword">new</span> <span class="hljs-type">StructType</span>()<br>                    .add(<span class="hljs-string">&quot;through_count&quot;</span>, <span class="hljs-type">LongType</span>, <span class="hljs-literal">true</span>)<br>                    .add(<span class="hljs-string">&quot;step_count&quot;</span>, <span class="hljs-type">LongType</span>, <span class="hljs-literal">true</span>)<br>                    .add(<span class="hljs-string">&quot;pid_infos&quot;</span>, <br>                        <span class="hljs-type">ArrayType</span> (<br>                            <span class="hljs-keyword">new</span> <span class="hljs-type">StructType</span>()<br>                            .add(<span class="hljs-string">&quot;product_id&quot;</span>, <span class="hljs-type">LongType</span>, <span class="hljs-literal">true</span>)<br>                            .add(<span class="hljs-string">&quot;recallInfo&quot;</span>, <br>                                <span class="hljs-keyword">new</span> <span class="hljs-type">StructType</span>()<br>                                .add(<span class="hljs-string">&quot;source_type&quot;</span>, <span class="hljs-type">StringType</span>, <span class="hljs-literal">true</span>)<br>                                .add(<span class="hljs-string">&quot;source_key&quot;</span>, <span class="hljs-type">StringType</span>, <span class="hljs-literal">true</span>)<br>                                .add(<span class="hljs-string">&quot;sim_score&quot;</span>, <span class="hljs-type">FloatType</span>, <span class="hljs-literal">true</span>)<br>                                , <span class="hljs-literal">true</span>)<br>                            .add(<span class="hljs-string">&quot;recommend_pkg_name&quot;</span>, <span class="hljs-type">StringType</span>, <span class="hljs-literal">true</span>)<br>                        ), <span class="hljs-literal">true</span>)<br>                )<br>            )<br>        )<br>    )<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Scala</tag>
      
      <tag>Big Data</tag>
      
      <tag>Spark</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Introduction to scala</title>
    <link href="/2021/07/01/Introduction-to-scala/"/>
    <url>/2021/07/01/Introduction-to-scala/</url>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><h2 id="What-is-Scala"><a href="#What-is-Scala" class="headerlink" title="What is Scala?"></a>What is Scala?</h2><p>Scala is a modern multi-paradigm programming language designed to express common programming patterns in a concise, elegant, and type-safe way. It seamlessly integrates features of object-oriented and functional languages.</p><h2 id="Scala-is-object-oriented"><a href="#Scala-is-object-oriented" class="headerlink" title="Scala is object-oriented"></a>Scala is object-oriented</h2><p>Scala is a <strong>pure object-oriented language</strong> in the sense that <a href="https://docs.scala-lang.org/tour/unified-types.html">every value is an object</a>. Types and behaviors of objects are described by <a href="https://docs.scala-lang.org/tour/classes.html">classes</a> and <a href="https://docs.scala-lang.org/tour/traits.html">traits</a>. Classes can be extended by subclassing, and by using a flexible <a href="https://docs.scala-lang.org/tour/mixin-class-composition.html">mixin-based composition</a> mechanism as a clean replacement for multiple inheritance.</p><h2 id="Scala-is-functional"><a href="#Scala-is-functional" class="headerlink" title="Scala is functional"></a>Scala is functional</h2><p>Scala is also <strong>a functional language</strong> in the sense that <a href="https://docs.scala-lang.org/tour/unified-types.html">every function is a value</a>. Scala provides a <a href="https://docs.scala-lang.org/tour/basics.html#functions">lightweight syntax</a> for defining anonymous functions, it supports <a href="https://docs.scala-lang.org/tour/higher-order-functions.html">higher-order functions</a>, it allows functions to be <a href="https://docs.scala-lang.org/tour/nested-functions.html">nested</a>, and it supports <a href="https://docs.scala-lang.org/tour/multiple-parameter-lists.html">currying</a>. Scala’s <a href="https://docs.scala-lang.org/tour/case-classes.html">case classes</a> and its built-in support for <a href="https://docs.scala-lang.org/tour/pattern-matching.html">pattern matching</a> provide the functionality of algebraic types, which are used in many functional languages. <a href="https://docs.scala-lang.org/tour/singleton-objects.html">Singleton objects</a> provide a convenient way to group functions that aren’t members of a class.</p><p>Furthermore, Scala’s notion of pattern matching naturally extends to the <a href="https://github.com/scala/scala-xml/wiki/XML-Processing">processing of XML data</a> with the help of <a href="https://docs.scala-lang.org/tour/regular-expression-patterns.html">right-ignoring sequence patterns</a>, by way of general extension via <a href="https://docs.scala-lang.org/tour/extractor-objects.html">extractor objects</a>. In this context, <a href="https://docs.scala-lang.org/tour/for-comprehensions.html">for comprehensions</a> are useful for formulating queries. These features make Scala ideal for developing applications like web services.</p><h2 id="Scala-is-statically-typed"><a href="#Scala-is-statically-typed" class="headerlink" title="Scala is statically typed"></a>Scala is statically typed</h2><p>Scala’s expressive type system enforces, at compile-time, that abstractions are used in a safe and coherent manner. In particular, the type system supports:</p><ul><li><a href="https://docs.scala-lang.org/tour/generic-classes.html">Generic classes</a></li><li><a href="https://docs.scala-lang.org/tour/variances.html">Variance annotations</a></li><li><a href="https://docs.scala-lang.org/tour/upper-type-bounds.html">Upper</a> and <a href="https://docs.scala-lang.org/tour/lower-type-bounds.html">lower</a> type bounds</li><li><a href="https://docs.scala-lang.org/tour/inner-classes.html">Inner classes</a> and <a href="https://docs.scala-lang.org/tour/abstract-type-members.html">abstract type members</a> as object members</li><li><a href="https://docs.scala-lang.org/tour/compound-types.html">Compound types</a></li><li><a href="https://docs.scala-lang.org/tour/self-types.html">Explicitly typed self references</a></li><li><a href="https://docs.scala-lang.org/tour/implicit-parameters.html">Implicit parameters</a> and <a href="https://docs.scala-lang.org/tour/implicit-conversions.html">conversions</a></li><li><a href="https://docs.scala-lang.org/tour/polymorphic-methods.html">Polymorphic methods</a></li></ul><p><a href="https://docs.scala-lang.org/tour/type-inference.html">Type inference</a> means the user is not required to annotate code with redundant type information. In combination, these features provide a powerful basis for the safe reuse of programming abstractions and for the type-safe extension of software.</p><h2 id="Scala-is-extensible"><a href="#Scala-is-extensible" class="headerlink" title="Scala is extensible"></a>Scala is extensible</h2><p>In practice, the development of domain-specific applications often requires domain-specific language extensions. Scala provides a unique combination of language mechanisms that make it straightforward to add new language constructs in the form of libraries.</p><p>In many cases, this can be done without using meta-programming facilities such as macros. For example:</p><ul><li><a href="https://docs.scala-lang.org/overviews/core/implicit-classes.html">Implicit classes</a> allow adding extension methods to existing types.</li><li><a href="https://docs.scala-lang.org/overviews/core/string-interpolation.html">String interpolation</a> is user-extensible with custom interpolators.</li></ul><h2 id="Scala-interoperates"><a href="#Scala-interoperates" class="headerlink" title="Scala interoperates"></a>Scala interoperates</h2><p>Scala is designed to interoperate well with the popular Java Runtime Environment (JRE). In particular, the interaction with the mainstream object-oriented Java programming language is as seamless as possible. Newer Java features like SAMs, <a href="https://docs.scala-lang.org/tour/higher-order-functions.html">lambdas</a>, <a href="https://docs.scala-lang.org/tour/annotations.html">annotations</a>, and <a href="https://docs.scala-lang.org/tour/generic-classes.html">generics</a> have direct analogues in Scala.</p><p>Those Scala features without Java analogues, such as <a href="https://docs.scala-lang.org/tour/default-parameter-values.html">default</a> and <a href="https://docs.scala-lang.org/tour/named-arguments.html">named parameters</a>, compile as closely to Java as reasonably possible. Scala has the same compilation model (separate compilation, dynamic class loading) as Java and allows access to thousands of existing high-quality libraries.</p><h1 id="Scala-Basics"><a href="#Scala-Basics" class="headerlink" title="Scala Basics"></a>Scala Basics</h1><h2 id="Values-and-Variables"><a href="#Values-and-Variables" class="headerlink" title="Values and Variables"></a>Values and Variables</h2><p>You can name the results of expressions using the <code>val</code> keyword.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> x = <span class="hljs-number">1</span> + <span class="hljs-number">1</span><br>println(x) <span class="hljs-comment">// 2</span><br>x = <span class="hljs-number">3</span> <span class="hljs-comment">// This does not compile</span><br></code></pre></td></tr></table></figure><p><strong>Values cannot be reassigned.</strong> The type of a value can be omitted and inferred, or explicitly stated</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> x: <span class="hljs-type">Int</span> = <span class="hljs-number">1</span> + <span class="hljs-number">1</span> <br></code></pre></td></tr></table></figure><blockquote><p>However, if <code>val</code> defines an object of a class, its mutable members defined by <code>var</code> can be modified. </p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Point</span>(<span class="hljs-params">var x: <span class="hljs-type">Int</span>, var y: <span class="hljs-type">Int</span></span>)</span><br><span class="hljs-keyword">val</span> pt1 = <span class="hljs-keyword">new</span> <span class="hljs-type">Point</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>pt1.x = <span class="hljs-number">2</span> <span class="hljs-comment">// This is valid!</span><br></code></pre></td></tr></table></figure></blockquote><p>Variables are like values, except you can re-assign them. You can define a variable with the <code>var</code> keyword</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">var</span> x = <span class="hljs-number">1</span> + <span class="hljs-number">1</span>;<br>x = <span class="hljs-number">3</span> <span class="hljs-comment">// valid</span><br>println(x*x)<br></code></pre></td></tr></table></figure><h2 id="Blocks"><a href="#Blocks" class="headerlink" title="Blocks"></a>Blocks</h2><p>You can combine expressions by surrounding them with <code>&#123;&#125;</code>. We call this a block.</p><p><strong>The result of the last expression in the block is the result of the overall block</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scala">println(&#123;<br>  <span class="hljs-keyword">val</span> x = <span class="hljs-number">1</span> + <span class="hljs-number">1</span><br>  x + <span class="hljs-number">1</span><br>&#125;) <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><p>unctions are expressions that have parameters, and take arguments.</p><p>You can define an anonymous function (i.e., a function that has no name) that returns a given integer plus one:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scala">(x: <span class="hljs-type">Int</span>) =&gt; x + <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>On the left of <code>=&gt;</code> is a list of parameters. On the right is an expression involving the parameters.</p><p>You can also name functions:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> addOne = (x: <span class="hljs-type">Int</span>) =&gt; x + <span class="hljs-number">1</span><br>println(addOne(<span class="hljs-number">1</span>)) <span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><p>A function can have multiple parameters:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> add = (x: <span class="hljs-type">Int</span>, y: <span class="hljs-type">Int</span>) =&gt; x + y<br>println(add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)) <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><p>Or it can have no parameters at all:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> getTheAnswer = () =&gt; <span class="hljs-number">42</span><br>println(getTheAnswer()) <span class="hljs-comment">// 42</span><br></code></pre></td></tr></table></figure><blockquote><p>The syntax is similar to the JavaScript’s arrow function.</p></blockquote><h2 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h2><p>Methods look and behave very similar to functions, but there are a few key differences between them.</p><p>Methods are defined with the <code>def</code> keyword. <code>def</code> is followed by a name, parameter list(s), a return type, and a body:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span></span>(x: <span class="hljs-type">Int</span>, y: <span class="hljs-type">Int</span>): <span class="hljs-type">Int</span> = x + y<br>println(add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)) <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><p>Notice how the return type <code>Int</code> is declared <em>after</em> the parameter list and a <code>:</code>.</p><p><strong>A method can take multiple parameter lists:</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">addThenMultiply</span></span>(x: <span class="hljs-type">Int</span>, y: <span class="hljs-type">Int</span>)(multiplier: <span class="hljs-type">Int</span>): <span class="hljs-type">Int</span> = (x + y) * multiplier<br>println(addThenMultiply(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)(<span class="hljs-number">3</span>)) <span class="hljs-comment">// 9</span><br></code></pre></td></tr></table></figure><blockquote><p>Notice how the function is called with multiple parameter lists</p></blockquote><p>Or no parameter lists at all:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">name</span></span>: <span class="hljs-type">String</span> = <span class="hljs-type">System</span>.getProperty(<span class="hljs-string">&quot;user.name&quot;</span>)<br>println(<span class="hljs-string">&quot;Hello, &quot;</span> + name + <span class="hljs-string">&quot;!&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="Classes"><a href="#Classes" class="headerlink" title="Classes"></a>Classes</h2><p>You can define classes with the <code>class</code> keyword, followed by its name and constructor parameters:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Greeter</span>(<span class="hljs-params">prefix: <span class="hljs-type">String</span>, suffix: <span class="hljs-type">String</span></span>) </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">greet</span></span>(name: <span class="hljs-type">String</span>): <span class="hljs-type">Unit</span> =<br>    println(prefix + name + suffix)<br>&#125;<br></code></pre></td></tr></table></figure><p>T<strong>he return type of the method <code>greet</code> is <code>Unit</code>, which signifies that there is nothing meaningful to return. It is used similarly to <code>void</code> in Java and C.</strong> (A difference is that, because every Scala expression must have some value, there is actually a singleton value of type Unit, written (). It carries no information.)</p><p>You can make an instance of a class with the <code>new</code> keyword:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> greeter = <span class="hljs-keyword">new</span> <span class="hljs-type">Greeter</span>(<span class="hljs-string">&quot;Hello, &quot;</span>, <span class="hljs-string">&quot;!&quot;</span>)<br>greeter.greet(<span class="hljs-string">&quot;Scala developer&quot;</span>) <span class="hljs-comment">// Hello, Scala developer!</span><br></code></pre></td></tr></table></figure><h2 id="Case-Classes"><a href="#Case-Classes" class="headerlink" title="Case Classes"></a>Case Classes</h2><p>Scala has a special type of class called a “case” class. By default, instances of case classes are immutable, and they are compared by value (unlike classes, whose instances are compared by reference). This makes them additionally useful for <a href="https://docs.scala-lang.org/tour/pattern-matching.html#matching-on-case-classes">pattern matching</a>.</p><p>You can define case classes with the <code>case class</code> keywords:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">case</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Point</span>(<span class="hljs-params">x: <span class="hljs-type">Int</span>, y: <span class="hljs-type">Int</span></span>)</span><br></code></pre></td></tr></table></figure><p>You can instantiate case classes without the <code>new</code> keyword:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> point = <span class="hljs-type">Point</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><span class="hljs-keyword">val</span> anotherPoint = <span class="hljs-type">Point</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><span class="hljs-keyword">val</span> yetAnotherPoint = <span class="hljs-type">Point</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>Instances of case classes are compared by value, not by reference:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">if</span> (point == anotherPoint) &#123;<br>  println(point + <span class="hljs-string">&quot; and &quot;</span> + anotherPoint + <span class="hljs-string">&quot; are the same.&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  println(point + <span class="hljs-string">&quot; and &quot;</span> + anotherPoint + <span class="hljs-string">&quot; are different.&quot;</span>)<br>&#125; <span class="hljs-comment">// Point(1,2) and Point(1,2) are the same.</span><br><br><span class="hljs-keyword">if</span> (point == yetAnotherPoint) &#123;<br>  println(point + <span class="hljs-string">&quot; and &quot;</span> + yetAnotherPoint + <span class="hljs-string">&quot; are the same.&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  println(point + <span class="hljs-string">&quot; and &quot;</span> + yetAnotherPoint + <span class="hljs-string">&quot; are different.&quot;</span>)<br>&#125; <span class="hljs-comment">// Point(1,2) and Point(2,2) are different.</span><br></code></pre></td></tr></table></figure><blockquote><p>Note that if the Point is a class and its objects initialized with the <code>new</code> keyword, <code>point </code>will not equal <code>anotherPoint</code> because we are now comparing the addresses. Case classes is like an auto-implementation of the equal <code>=</code> operator with element-wise comparison </p></blockquote><h2 id="Objects"><a href="#Objects" class="headerlink" title="Objects"></a>Objects</h2><p>Objects are single instances of their own definitions. You can think of them as singletons of their own classes.</p><p>You can define objects with the <code>object</code> keyword:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">object</span> <span class="hljs-title">IdFactory</span> </span>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> counter = <span class="hljs-number">0</span><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create</span></span>(): <span class="hljs-type">Int</span> = &#123;<br>    counter += <span class="hljs-number">1</span><br>    counter<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>You can access an object by referring to its name:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> newId: <span class="hljs-type">Int</span> = <span class="hljs-type">IdFactory</span>.create()<br>println(newId) <span class="hljs-comment">// 1</span><br><span class="hljs-keyword">val</span> newerId: <span class="hljs-type">Int</span> = <span class="hljs-type">IdFactory</span>.create()<br>println(newerId) <span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><h2 id="Traits"><a href="#Traits" class="headerlink" title="Traits"></a>Traits</h2><p>Traits are abstract data types containing certain fields and methods. In Scala inheritance, a class can only extend one other class, but it can extend multiple traits.</p><p>You can define traits with the <code>trait</code> keyword:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">trait</span> <span class="hljs-title">Greeter</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">greet</span></span>(name: <span class="hljs-type">String</span>): <span class="hljs-type">Unit</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Traits can also have default implementations:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">trait</span> <span class="hljs-title">Greeter</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">greet</span></span>(name: <span class="hljs-type">String</span>): <span class="hljs-type">Unit</span> =<br>    println(<span class="hljs-string">&quot;Hello, &quot;</span> + name + <span class="hljs-string">&quot;!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>You can extend traits with the <code>extends</code> keyword and override an implementation with the <code>override</code> keyword:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DefaultGreeter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Greeter</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomizableGreeter</span>(<span class="hljs-params">prefix: <span class="hljs-type">String</span>, postfix: <span class="hljs-type">String</span></span>) <span class="hljs-keyword">extends</span> <span class="hljs-title">Greeter</span> </span>&#123;<br>  <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">greet</span></span>(name: <span class="hljs-type">String</span>): <span class="hljs-type">Unit</span> = &#123;<br>    println(prefix + name + postfix)<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">val</span> greeter = <span class="hljs-keyword">new</span> <span class="hljs-type">DefaultGreeter</span>()<br>greeter.greet(<span class="hljs-string">&quot;Scala developer&quot;</span>) <span class="hljs-comment">// Hello, Scala developer!</span><br><br><span class="hljs-keyword">val</span> customGreeter = <span class="hljs-keyword">new</span> <span class="hljs-type">CustomizableGreeter</span>(<span class="hljs-string">&quot;How are you, &quot;</span>, <span class="hljs-string">&quot;?&quot;</span>)<br>customGreeter.greet(<span class="hljs-string">&quot;Scala developer&quot;</span>) <span class="hljs-comment">// How are you, Scala developer?</span><br></code></pre></td></tr></table></figure><h2 id="Main-Method"><a href="#Main-Method" class="headerlink" title="Main Method"></a>Main Method</h2><p>The main method is the entry point of a Scala program. The Java Virtual Machine requires a main method, named <code>main</code>, that takes one argument: an array of strings.</p><p>Using an object, you can define the main method as follows:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">object</span> <span class="hljs-title">Main</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span></span>(args: <span class="hljs-type">Array</span>[<span class="hljs-type">String</span>]): <span class="hljs-type">Unit</span> =<br>    println(<span class="hljs-string">&quot;Hello, Scala developer!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="infix-syntax-and-dot-notation"><a href="#infix-syntax-and-dot-notation" class="headerlink" title="infix syntax and dot-notation"></a>infix syntax and dot-notation</h2><p>The following codes are equivalent</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-literal">true</span> &amp;&amp; <span class="hljs-literal">true</span>  <span class="hljs-comment">//infix</span><br><span class="hljs-literal">true</span>.&amp;&amp;(<span class="hljs-literal">true</span>) <span class="hljs-comment">//dot-notation</span><br></code></pre></td></tr></table></figure><h1 id="Unified-Types"><a href="#Unified-Types" class="headerlink" title="Unified Types"></a>Unified Types</h1><p>In Scala, all values have a type, including numerical values and functions. The diagram below illustrates a subset of the type hierarchy.</p><p><img src="unified-types-diagram.svg" alt="Scala Type Hierarchy"></p><p><a href="https://www.scala-lang.org/api/2.12.1/scala/Any.html"><code>Any</code></a> is the supertype of all types, also called the top type. It defines certain universal methods such as <code>equals</code>, <code>hashCode</code>, and <code>toString</code>. <code>Any</code> has two direct subclasses: <code>AnyVal</code> and <code>AnyRef</code>.</p><p><code>AnyVal</code> represents value types. There are nine predefined value types and they are non-nullable: <code>Double</code>, <code>Float</code>, <code>Long</code>, <code>Int</code>, <code>Short</code>, <code>Byte</code>, <code>Char</code>, <code>Unit</code>, and <code>Boolean</code>. <code>Unit</code> is a value type which carries no meaningful information. There is exactly one instance of <code>Unit</code> which can be declared literally like so: <code>()</code>. All functions must return something so sometimes <code>Unit</code> is a useful return type.</p><p><code>AnyRef</code> represents reference types. All non-value types are defined as reference types. Every user-defined type in Scala is a subtype of <code>AnyRef</code>. If Scala is used in the context of a Java runtime environment, <code>AnyRef</code> corresponds to <code>java.lang.Object</code>.</p><p>Here is an example that demonstrates that strings, integers, characters, boolean values, and functions are all of type <code>Any</code> just like every other object:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> list: <span class="hljs-type">List</span>[<span class="hljs-type">Any</span>] = <span class="hljs-type">List</span>(<br>  <span class="hljs-string">&quot;a string&quot;</span>,<br>  <span class="hljs-number">732</span>,  <span class="hljs-comment">// an integer</span><br>  &#x27;c&#x27;,  <span class="hljs-comment">// a character</span><br>  <span class="hljs-literal">true</span>, <span class="hljs-comment">// a boolean value</span><br>  () =&gt; <span class="hljs-string">&quot;an anonymous function returning a string&quot;</span><br>)<br><br>list.foreach(element =&gt; println(element))<br></code></pre></td></tr></table></figure><h2 id="Type-Casting"><a href="#Type-Casting" class="headerlink" title="Type Casting"></a>Type Casting</h2><p>Value types can be cast in the following way: <a href="https://docs.scala-lang.org/resources/images/tour/type-casting-diagram.svg"><img src="https://docs.scala-lang.org/resources/images/tour/type-casting-diagram.svg" alt="Scala Type Hierarchy"></a></p><p>For example:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> x: <span class="hljs-type">Long</span> = <span class="hljs-number">987654321</span><br><span class="hljs-keyword">val</span> y: <span class="hljs-type">Float</span> = x  <span class="hljs-comment">// 9.8765434E8 (note that some precision is lost in this case)</span><br><br><span class="hljs-keyword">val</span> face: <span class="hljs-type">Char</span> = &#x27;☺&#x27;<br><span class="hljs-keyword">val</span> number: <span class="hljs-type">Int</span> = face  <span class="hljs-comment">// 9786</span><br></code></pre></td></tr></table></figure><p>Casting is unidirectional. This will not compile:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> x: <span class="hljs-type">Long</span> = <span class="hljs-number">987654321</span><br><span class="hljs-keyword">val</span> y: <span class="hljs-type">Float</span> = x  <span class="hljs-comment">// 9.8765434E8</span><br><span class="hljs-keyword">val</span> z: <span class="hljs-type">Long</span> = y  <span class="hljs-comment">// Does not conform</span><br></code></pre></td></tr></table></figure><p>You can also cast a reference type to a subtype. This will be covered later in the tour.</p><h2 id="Nothing-and-Null"><a href="#Nothing-and-Null" class="headerlink" title="Nothing and Null"></a>Nothing and Null</h2><p><code>Nothing</code> is a subtype of all types, also called the bottom type. There is no value that has type <code>Nothing</code>. A common use is to signal non-termination such as a thrown exception, program exit, or an infinite loop (i.e., it is the type of an expression which does not evaluate to a value, or a method that does not return normally).</p><p><code>Null</code> is a subtype of all reference types (i.e. any subtype of AnyRef). It has a single value identified by the keyword literal <code>null</code>. <code>Null</code> is provided mostly for interoperability with other JVM languages and <strong>should almost never be used in Scala code.</strong> We’ll cover alternatives to <code>null</code> later in the tour.</p><h1 id="Classes-1"><a href="#Classes-1" class="headerlink" title="Classes"></a>Classes</h1><h2 id="Constructors"><a href="#Constructors" class="headerlink" title="Constructors"></a>Constructors</h2><p>Constructors can have optional parameters by providing a default value like so:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Point</span>(<span class="hljs-params">var x: <span class="hljs-type">Int</span> = 0, var y: <span class="hljs-type">Int</span> = 0</span>)</span><br><br><span class="hljs-keyword">val</span> origin = <span class="hljs-keyword">new</span> <span class="hljs-type">Point</span>  <span class="hljs-comment">// x and y are both set to 0</span><br><span class="hljs-keyword">val</span> point1 = <span class="hljs-keyword">new</span> <span class="hljs-type">Point</span>(<span class="hljs-number">1</span>)<br>println(point1.x)  <span class="hljs-comment">// prints 1</span><br></code></pre></td></tr></table></figure><p>In this version of the <code>Point</code> class, <code>x</code> and <code>y</code> have the default value <code>0</code> so no arguments are required. However, because the constructor reads arguments left to right, if you just wanted to pass in a <code>y</code> value, you would need to name the parameter.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Point</span>(<span class="hljs-params">var x: <span class="hljs-type">Int</span> = 0, var y: <span class="hljs-type">Int</span> = 0</span>)</span><br><span class="hljs-keyword">val</span> point2 = <span class="hljs-keyword">new</span> <span class="hljs-type">Point</span>(y = <span class="hljs-number">2</span>)<br>println(point2.y)  <span class="hljs-comment">// prints 2</span><br></code></pre></td></tr></table></figure><h2 id="Private-Members-and-Getter-Setter-Syntax"><a href="#Private-Members-and-Getter-Setter-Syntax" class="headerlink" title="Private Members and Getter/Setter Syntax"></a>Private Members and Getter/Setter Syntax</h2><p>Members are public by default. Use the <code>private</code> access modifier to hide them from outside of the class.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Point</span> </span>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> _x = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> _y = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> bound = <span class="hljs-number">100</span><br><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">x</span> </span>= _x<br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">x_=</span> </span>(newValue: <span class="hljs-type">Int</span>): <span class="hljs-type">Unit</span> = &#123;<br>    <span class="hljs-keyword">if</span> (newValue &lt; bound) _x = newValue <span class="hljs-keyword">else</span> printWarning<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">y</span> </span>= _y<br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">y_=</span> </span>(newValue: <span class="hljs-type">Int</span>): <span class="hljs-type">Unit</span> = &#123;<br>    <span class="hljs-keyword">if</span> (newValue &lt; bound) _y = newValue <span class="hljs-keyword">else</span> printWarning<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">printWarning</span> </span>= println(<span class="hljs-string">&quot;WARNING: Out of bounds&quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">val</span> point1 = <span class="hljs-keyword">new</span> <span class="hljs-type">Point</span><br>point1.x = <span class="hljs-number">99</span><br>point1.y = <span class="hljs-number">101</span> <span class="hljs-comment">// prints the warning</span><br></code></pre></td></tr></table></figure><p>In this version of the <code>Point</code> class, the data is stored in private variables <code>_x</code> and <code>_y</code>. There are methods <code>def x</code> and <code>def y</code> for accessing the private data. <code>def x_=</code> and <code>def y_=</code> are for validating and setting the value of <code>_x</code> and <code>_y</code>. Notice the special syntax for the setters: the method has <code>_=</code> appended to the identifier of the getter and the parameters come after.</p><p>Primary constructor parameters with <code>val</code> and <code>var</code> are public. However, because <code>val</code>s are immutable, you can’t write the following.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Point</span>(<span class="hljs-params">val x: <span class="hljs-type">Int</span>, val y: <span class="hljs-type">Int</span></span>)</span><br><span class="hljs-keyword">val</span> point = <span class="hljs-keyword">new</span> <span class="hljs-type">Point</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>point.x = <span class="hljs-number">3</span>  <span class="hljs-comment">// &lt;-- does not compile</span><br></code></pre></td></tr></table></figure><p>Parameters without <code>val</code> or <code>var</code> are private values, visible only within the class.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Point</span>(<span class="hljs-params">x: <span class="hljs-type">Int</span>, y: <span class="hljs-type">Int</span></span>)</span><br><span class="hljs-keyword">val</span> point = <span class="hljs-keyword">new</span> <span class="hljs-type">Point</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>point.x  <span class="hljs-comment">// &lt;-- does not compile</span><br></code></pre></td></tr></table></figure><h1 id="Traits-1"><a href="#Traits-1" class="headerlink" title="Traits"></a>Traits</h1><h2 id="Defining-a-trait"><a href="#Defining-a-trait" class="headerlink" title="Defining a trait"></a>Defining a trait</h2><p>A minimal trait is simply the keyword <code>trait</code> and an identifier:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">trait</span> <span class="hljs-title">HairColor</span></span><br></code></pre></td></tr></table></figure><p>Traits become especially useful as generic types and with abstract methods.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">trait</span> <span class="hljs-title">Iterator</span>[<span class="hljs-type">A</span>] </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hasNext</span></span>: <span class="hljs-type">Boolean</span><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">next</span></span>(): <span class="hljs-type">A</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Extending the <code>trait Iterator[A]</code> requires a type <code>A</code> and implementations of the methods <code>hasNext</code> and <code>next</code>.</p><h2 id="Using-traits"><a href="#Using-traits" class="headerlink" title="Using traits"></a>Using traits</h2><p>Use the <code>extends</code> keyword to extend a trait. Then implement any abstract members of the trait using the <code>override</code> keyword:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">trait</span> <span class="hljs-title">Iterator</span>[<span class="hljs-type">A</span>] </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hasNext</span></span>: <span class="hljs-type">Boolean</span><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">next</span></span>(): <span class="hljs-type">A</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IntIterator</span>(<span class="hljs-params">to: <span class="hljs-type">Int</span></span>) <span class="hljs-keyword">extends</span> <span class="hljs-title">Iterator</span>[<span class="hljs-type">Int</span>] </span>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> current = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hasNext</span></span>: <span class="hljs-type">Boolean</span> = current &lt; to<br>  <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">next</span></span>(): <span class="hljs-type">Int</span> = &#123;<br>    <span class="hljs-keyword">if</span> (hasNext) &#123;<br>      <span class="hljs-keyword">val</span> t = current<br>      current += <span class="hljs-number">1</span><br>      t<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>  &#125;<br>&#125;<br><br><br><span class="hljs-keyword">val</span> iterator = <span class="hljs-keyword">new</span> <span class="hljs-type">IntIterator</span>(<span class="hljs-number">10</span>)<br>iterator.next()  <span class="hljs-comment">// returns 0</span><br>iterator.next()  <span class="hljs-comment">// returns 1</span><br></code></pre></td></tr></table></figure><p>This <code>IntIterator</code> class takes a parameter <code>to</code> as an upper bound. It <code>extends Iterator[Int]</code> which means that the <code>next</code> method must return an Int.</p><h2 id="Subtyping"><a href="#Subtyping" class="headerlink" title="Subtyping"></a>Subtyping</h2><p>Where a given trait is required, a subtype of the trait can be used instead.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">import</span> scala.collection.mutable.<span class="hljs-type">ArrayBuffer</span><br><br><span class="hljs-class"><span class="hljs-keyword">trait</span> <span class="hljs-title">Pet</span> </span>&#123;<br>  <span class="hljs-keyword">val</span> name: <span class="hljs-type">String</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span>(<span class="hljs-params">val name: <span class="hljs-type">String</span></span>) <span class="hljs-keyword">extends</span> <span class="hljs-title">Pet</span></span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span>(<span class="hljs-params">val name: <span class="hljs-type">String</span></span>) <span class="hljs-keyword">extends</span> <span class="hljs-title">Pet</span></span><br><br><span class="hljs-keyword">val</span> dog = <span class="hljs-keyword">new</span> <span class="hljs-type">Dog</span>(<span class="hljs-string">&quot;Harry&quot;</span>)<br><span class="hljs-keyword">val</span> cat = <span class="hljs-keyword">new</span> <span class="hljs-type">Cat</span>(<span class="hljs-string">&quot;Sally&quot;</span>)<br><br><span class="hljs-keyword">val</span> animals = <span class="hljs-type">ArrayBuffer</span>.empty[<span class="hljs-type">Pet</span>]<br>animals.append(dog)<br>animals.append(cat)<br>animals.foreach(pet =&gt; println(pet.name))  <span class="hljs-comment">// Prints Harry Sally</span><br></code></pre></td></tr></table></figure><p>The <code>trait Pet</code> has an abstract field <code>name</code> that gets implemented by Cat and Dog in their constructors. On the last line, we call <code>pet.name</code>, which must be implemented in any subtype of the trait <code>Pet</code>.</p><h1 id="Tuples"><a href="#Tuples" class="headerlink" title="Tuples"></a>Tuples</h1><p>In Scala, a tuple is a value that contains a fixed number of elements, each with its own type. Tuples are immutable.</p><p><strong>Tuples are especially handy for returning multiple values from a method.</strong></p><p>A tuple with two elements can be created as follows:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> ingredient = (<span class="hljs-string">&quot;Sugar&quot;</span> , <span class="hljs-number">25</span>)<br></code></pre></td></tr></table></figure><p>This creates a tuple containing a <code>String</code> element and an <code>Int</code> element.</p><p>The inferred type of <code>ingredient</code> is <code>(String, Int)</code>, which is shorthand for <code>Tuple2[String, Int]</code>.</p><p>To represent tuples, Scala uses a series of classes: <code>Tuple2</code>, <code>Tuple3</code>, etc., through <code>Tuple22</code>. Each class has as many type parameters as it has elements.</p><h2 id="Accessing-the-elements"><a href="#Accessing-the-elements" class="headerlink" title="Accessing the elements"></a>Accessing the elements</h2><p>One way of accessing tuple elements is by position. The individual elements are named <code>_1</code>, <code>_2</code>, and so forth.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scala">println(ingredient._1) <span class="hljs-comment">// Sugar</span><br>println(ingredient._2) <span class="hljs-comment">// 25</span><br></code></pre></td></tr></table></figure><h2 id="Pattern-matching-on-tuples"><a href="#Pattern-matching-on-tuples" class="headerlink" title="Pattern matching on tuples"></a>Pattern matching on tuples</h2><p>A tuple can also be taken apart using pattern matching:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> (name, quantity) = ingredient<br>println(name) <span class="hljs-comment">// Sugar</span><br>println(quantity) <span class="hljs-comment">// 25</span><br></code></pre></td></tr></table></figure><p>Here <code>name</code>’s inferred type is <code>String</code> and <code>quantity</code>’s inferred type is <code>Int</code>.</p><p>Here is another example of pattern-matching a tuple:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> planets =<br>  <span class="hljs-type">List</span>((<span class="hljs-string">&quot;Mercury&quot;</span>, <span class="hljs-number">57.9</span>), (<span class="hljs-string">&quot;Venus&quot;</span>, <span class="hljs-number">108.2</span>), (<span class="hljs-string">&quot;Earth&quot;</span>, <span class="hljs-number">149.6</span>),<br>       (<span class="hljs-string">&quot;Mars&quot;</span>, <span class="hljs-number">227.9</span>), (<span class="hljs-string">&quot;Jupiter&quot;</span>, <span class="hljs-number">778.3</span>))<br>planets.foreach&#123;<br>  <span class="hljs-keyword">case</span> (<span class="hljs-string">&quot;Earth&quot;</span>, distance) =&gt;<br>    println(<span class="hljs-string">s&quot;Our planet is <span class="hljs-subst">$distance</span> million kilometers from the sun&quot;</span>)<br>  <span class="hljs-keyword">case</span> _ =&gt;<br>&#125;<br></code></pre></td></tr></table></figure><p>Or, in <code>for</code> comprehension:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> numPairs = <span class="hljs-type">List</span>((<span class="hljs-number">2</span>, <span class="hljs-number">5</span>), (<span class="hljs-number">3</span>, <span class="hljs-number">-7</span>), (<span class="hljs-number">20</span>, <span class="hljs-number">56</span>))<br><span class="hljs-keyword">for</span> ((a, b) &lt;- numPairs) &#123;<br>  println(a * b)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Tuples-and-case-classes"><a href="#Tuples-and-case-classes" class="headerlink" title="Tuples and case classes"></a>Tuples and case classes</h2><p>Users may sometimes find it hard to choose between tuples and case classes. Case classes have named elements. The names can improve the readability of some kinds of code. In the planet example above, we might define <code>case class Planet(name: String, distance: Double)</code> rather than using tuples.</p><h1 id="Class-Composition-with-Mixins"><a href="#Class-Composition-with-Mixins" class="headerlink" title="Class Composition with Mixins"></a>Class Composition with Mixins</h1><p>Mixins are traits which are used to compose a class.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>  <span class="hljs-keyword">val</span> message: <span class="hljs-type">String</span><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">A</span> </span>&#123;<br>  <span class="hljs-keyword">val</span> message = <span class="hljs-string">&quot;I&#x27;m an instance of class B&quot;</span><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">trait</span> <span class="hljs-title">C</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">A</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">loudMessage</span> </span>= message.toUpperCase()<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">B</span> <span class="hljs-keyword">with</span> <span class="hljs-title">C</span></span><br><br><span class="hljs-keyword">val</span> d = <span class="hljs-keyword">new</span> <span class="hljs-type">D</span><br>println(d.message)  <span class="hljs-comment">// I&#x27;m an instance of class B</span><br>println(d.loudMessage)  <span class="hljs-comment">// I&#x27;M AN INSTANCE OF CLASS B</span><br></code></pre></td></tr></table></figure><p>Class <code>D</code> has a superclass <code>B</code> and a mixin <code>C</code>. Classes can only have one superclass but many mixins (using the keywords <code>extends</code> and <code>with</code> respectively). The mixins and the superclass may have the same supertype.</p><p>Now let’s look at a more interesting example starting with an abstract class:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbsIterator</span> </span>&#123;<br>  <span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">T</span></span><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hasNext</span></span>: <span class="hljs-type">Boolean</span><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">next</span></span>(): <span class="hljs-type">T</span><br>&#125;<br></code></pre></td></tr></table></figure><p>The class has an abstract type <code>T</code> and the standard iterator methods.</p><p>Next, we’ll implement a concrete class (all abstract members <code>T</code>, <code>hasNext</code>, and <code>next</code> have implementations):</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringIterator</span>(<span class="hljs-params">s: <span class="hljs-type">String</span></span>) <span class="hljs-keyword">extends</span> <span class="hljs-title">AbsIterator</span> </span>&#123;<br>  <span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">T</span> </span>= <span class="hljs-type">Char</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hasNext</span> </span>= i &lt; s.length<br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">next</span></span>() = &#123;<br>    <span class="hljs-keyword">val</span> ch = s charAt i<br>    i += <span class="hljs-number">1</span><br>    ch<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>StringIterator</code> takes a <code>String</code> and can be used to iterate over the String (e.g. to see if a String contains a certain character).</p><p>Now let’s create a trait which also extends <code>AbsIterator</code>.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">trait</span> <span class="hljs-title">RichIterator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbsIterator</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">foreach</span></span>(f: <span class="hljs-type">T</span> =&gt; <span class="hljs-type">Unit</span>): <span class="hljs-type">Unit</span> = <span class="hljs-keyword">while</span> (hasNext) f(next())<br>&#125;<br></code></pre></td></tr></table></figure><p>This trait implements <code>foreach</code> by continually calling the provided function <code>f: T =&gt; Unit</code> on the next element (<code>next()</code>) as long as there are further elements (<code>while (hasNext)</code>). Because <code>RichIterator</code> is a trait, it doesn’t need to implement the abstract members of AbsIterator.</p><p>We would like to combine the functionality of <code>StringIterator</code> and <code>RichIterator</code> into a single class.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RichStringIter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StringIterator</span>(<span class="hljs-params">&quot;<span class="hljs-type">Scala</span>&quot;</span>) <span class="hljs-keyword">with</span> <span class="hljs-title">RichIterator</span></span><br><span class="hljs-keyword">val</span> richStringIter = <span class="hljs-keyword">new</span> <span class="hljs-type">RichStringIter</span><br>richStringIter.foreach(println)<br></code></pre></td></tr></table></figure><p>The new class <code>RichStringIter</code> has <code>StringIterator</code> as a superclass and <code>RichIterator</code> as a mixin.</p><p>With single inheritance we would not be able to achieve this level of flexibility.</p><h1 id="Higher-order-Functions"><a href="#Higher-order-Functions" class="headerlink" title="Higher-order Functions"></a>Higher-order Functions</h1><p>Higher order functions take other functions as parameters or return a function as a result. This is possible because functions are first-class values in Scala. The terminology can get a bit confusing at this point, and we use the phrase “higher order function” for both methods and functions that take functions as parameters or that return a function.</p><p>One of the most common examples is the higher-order function <code>map</code> which is available for collections in Scala.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> salaries = <span class="hljs-type">Seq</span>(<span class="hljs-number">20000</span>, <span class="hljs-number">70000</span>, <span class="hljs-number">40000</span>)<br><span class="hljs-keyword">val</span> doubleSalary = (x: <span class="hljs-type">Int</span>) =&gt; x * <span class="hljs-number">2</span><br><span class="hljs-keyword">val</span> newSalaries = salaries.map(doubleSalary) <span class="hljs-comment">// List(40000, 140000, 80000)</span><br></code></pre></td></tr></table></figure><p><code>doubleSalary</code> is a function which takes a single Int, <code>x</code>, and returns <code>x * 2</code>. In general, the tuple on the left of the arrow <code>=&gt;</code> is a parameter list and the value of the expression on the right is what gets returned. On line 3, the function <code>doubleSalary</code> gets applied to each element in the list of salaries.</p><p>To shrink the code, we could make the function anonymous and pass it directly as an argument to map:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> salaries = <span class="hljs-type">Seq</span>(<span class="hljs-number">20000</span>, <span class="hljs-number">70000</span>, <span class="hljs-number">40000</span>)<br><span class="hljs-keyword">val</span> newSalaries = salaries.map(x =&gt; x * <span class="hljs-number">2</span>) <span class="hljs-comment">// List(40000, 140000, 80000)</span><br></code></pre></td></tr></table></figure><p>Notice how <code>x</code> is <strong>not declared as an Int</strong> in the above example. That’s because the compiler can infer the type based on the type of function map expects (see <a href="https://docs.scala-lang.org/tour/multiple-parameter-lists.html">Currying</a>. An even more idiomatic way to write the same piece of code would be:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> salaries = <span class="hljs-type">Seq</span>(<span class="hljs-number">20000</span>, <span class="hljs-number">70000</span>, <span class="hljs-number">40000</span>)<br><span class="hljs-keyword">val</span> newSalaries = salaries.map(_ * <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><blockquote><p> Since the Scala compiler already knows the type of the parameters (a single Int), you just need to provide the right side of the function. The only caveat is that you need to use <code>_</code> in place of a parameter name (it was <code>x</code> in the previous example).</p></blockquote><h2 id="Coercing-methods-into-functions"><a href="#Coercing-methods-into-functions" class="headerlink" title="Coercing methods into functions"></a>Coercing methods into functions</h2><p>It is also possible to pass methods as arguments to higher-order functions because the Scala compiler will coerce the method into a function.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">case</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WeeklyWeatherForecast</span>(<span class="hljs-params">temperatures: <span class="hljs-type">Seq</span>[<span class="hljs-type">Double</span>]</span>) </span>&#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">convertCtoF</span></span>(temp: <span class="hljs-type">Double</span>) = temp * <span class="hljs-number">1.8</span> + <span class="hljs-number">32</span><br><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forecastInFahrenheit</span></span>: <span class="hljs-type">Seq</span>[<span class="hljs-type">Double</span>] = temperatures.map(convertCtoF) <span class="hljs-comment">// &lt;-- passing the method convertCtoF</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Here the method <code>convertCtoF</code> is passed to the higher order function <code>map</code>. This is possible because the compiler coerces <code>convertCtoF</code> to the function <code>x =&gt; convertCtoF(x)</code> (note: <code>x</code> will be a generated name which is guaranteed to be unique within its scope).</p><h2 id="Functions-that-accept-functions"><a href="#Functions-that-accept-functions" class="headerlink" title="Functions that accept functions"></a>Functions that accept functions</h2><p>One reason to use higher-order functions is to reduce redundant code. Let’s say you wanted some methods that could raise someone’s salaries by various factors. Without creating a higher-order function, it might look something like this:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">object</span> <span class="hljs-title">SalaryRaiser</span> </span>&#123;<br><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">smallPromotion</span></span>(salaries: <span class="hljs-type">List</span>[<span class="hljs-type">Double</span>]): <span class="hljs-type">List</span>[<span class="hljs-type">Double</span>] =<br>    salaries.map(salary =&gt; salary * <span class="hljs-number">1.1</span>)<br><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">greatPromotion</span></span>(salaries: <span class="hljs-type">List</span>[<span class="hljs-type">Double</span>]): <span class="hljs-type">List</span>[<span class="hljs-type">Double</span>] =<br>    salaries.map(salary =&gt; salary * math.log(salary))<br><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hugePromotion</span></span>(salaries: <span class="hljs-type">List</span>[<span class="hljs-type">Double</span>]): <span class="hljs-type">List</span>[<span class="hljs-type">Double</span>] =<br>    salaries.map(salary =&gt; salary * salary)<br>&#125;<br></code></pre></td></tr></table></figure><p>Notice how each of the three methods vary only by the multiplication factor. To simplify, you can extract the repeated code into a higher-order function like so:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">object</span> <span class="hljs-title">SalaryRaiser</span> </span>&#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">promotion</span></span>(salaries: <span class="hljs-type">List</span>[<span class="hljs-type">Double</span>], promotionFunction: <span class="hljs-type">Double</span> =&gt; <span class="hljs-type">Double</span>): <span class="hljs-type">List</span>[<span class="hljs-type">Double</span>] =<br>    salaries.map(promotionFunction)<br><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">smallPromotion</span></span>(salaries: <span class="hljs-type">List</span>[<span class="hljs-type">Double</span>]): <span class="hljs-type">List</span>[<span class="hljs-type">Double</span>] =<br>    promotion(salaries, salary =&gt; salary * <span class="hljs-number">1.1</span>)<br><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">greatPromotion</span></span>(salaries: <span class="hljs-type">List</span>[<span class="hljs-type">Double</span>]): <span class="hljs-type">List</span>[<span class="hljs-type">Double</span>] =<br>    promotion(salaries, salary =&gt; salary * math.log(salary))<br><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hugePromotion</span></span>(salaries: <span class="hljs-type">List</span>[<span class="hljs-type">Double</span>]): <span class="hljs-type">List</span>[<span class="hljs-type">Double</span>] =<br>    promotion(salaries, salary =&gt; salary * salary)<br>&#125;<br></code></pre></td></tr></table></figure><p>The new method, <code>promotion</code>, takes the salaries plus a function of type <code>Double =&gt; Double</code> (i.e. a function that takes a Double and returns a Double) and returns the product.</p><p>Methods and functions usually express behaviours or data transformations, therefore having functions that compose based on other functions can help building generic mechanisms. Those generic operations defer to lock down the entire operation behaviour giving clients a way to control or further customize parts of the operation itself.</p><h2 id="Functions-that-return-functions"><a href="#Functions-that-return-functions" class="headerlink" title="Functions that return functions"></a>Functions that return functions</h2><p>There are certain cases where you want to generate a function. Here’s an example of a method that returns a function.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">urlBuilder</span></span>(ssl: <span class="hljs-type">Boolean</span>, domainName: <span class="hljs-type">String</span>): (<span class="hljs-type">String</span>, <span class="hljs-type">String</span>) =&gt; <span class="hljs-type">String</span> = &#123;<br>  <span class="hljs-keyword">val</span> schema = <span class="hljs-keyword">if</span> (ssl) <span class="hljs-string">&quot;https://&quot;</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;http://&quot;</span><br>  (endpoint: <span class="hljs-type">String</span>, query: <span class="hljs-type">String</span>) =&gt; <span class="hljs-string">s&quot;<span class="hljs-subst">$schema</span><span class="hljs-subst">$domainName</span>/<span class="hljs-subst">$endpoint</span>?<span class="hljs-subst">$query</span>&quot;</span><br>&#125;<br><br><span class="hljs-keyword">val</span> domainName = <span class="hljs-string">&quot;www.example.com&quot;</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getURL</span> </span>= urlBuilder(ssl=<span class="hljs-literal">true</span>, domainName)<br><span class="hljs-keyword">val</span> endpoint = <span class="hljs-string">&quot;users&quot;</span><br><span class="hljs-keyword">val</span> query = <span class="hljs-string">&quot;id=1&quot;</span><br><span class="hljs-keyword">val</span> url = getURL(endpoint, query) <span class="hljs-comment">// &quot;https://www.example.com/users?id=1&quot;: String</span><br></code></pre></td></tr></table></figure><p>Notice the return type of urlBuilder <code>(String, String) =&gt; String</code>. This means that the returned anonymous function takes two Strings and returns a String. In this case, the returned anonymous function is <code>(endpoint: String, query: String) =&gt; s&quot;https://www.example.com/$endpoint?$query&quot;</code>.</p><h1 id="Multiple-Parameter-Lists-Currying"><a href="#Multiple-Parameter-Lists-Currying" class="headerlink" title="Multiple Parameter Lists (Currying)"></a>Multiple Parameter Lists (Currying)</h1><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>Here is an example, as defined on the <code>Iterable</code> trait in Scala’s collections API:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">trait</span> <span class="hljs-title">Iterable</span>[<span class="hljs-type">A</span>] </span>&#123;<br>  ...<br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">foldLeft</span></span>[<span class="hljs-type">B</span>](z: <span class="hljs-type">B</span>)(op: (<span class="hljs-type">B</span>, <span class="hljs-type">A</span>) =&gt; <span class="hljs-type">B</span>): <span class="hljs-type">B</span><br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><p><code>foldLeft</code> applies a two-parameter function <code>op</code> to an initial value <code>z</code> and all elements of this collection, going left to right. Shown below is an example of its usage.</p><p>Starting with an initial value of 0, <code>foldLeft</code> here applies the function <code>(m, n) =&gt; m + n</code> to each element in the List and the previous accumulated value.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> numbers = <span class="hljs-type">List</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>)<br><span class="hljs-keyword">val</span> res = numbers.foldLeft(<span class="hljs-number">0</span>)((m, n) =&gt; m + n)<br>println(res) <span class="hljs-comment">// 55</span><br></code></pre></td></tr></table></figure><h3 id="Use-cases"><a href="#Use-cases" class="headerlink" title="Use cases"></a>Use cases</h3><p>Suggested use cases for multiple parameter lists include:</p><h4 id="DRIVE-TYPE-INFERENCE"><a href="#DRIVE-TYPE-INFERENCE" class="headerlink" title="DRIVE TYPE INFERENCE"></a>DRIVE TYPE INFERENCE</h4><p>It so happens that in Scala, type inference proceeds one parameter list at a time. Say you have the following method:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">foldLeft1</span></span>[<span class="hljs-type">A</span>, <span class="hljs-type">B</span>](as: <span class="hljs-type">List</span>[<span class="hljs-type">A</span>], b0: <span class="hljs-type">B</span>, op: (<span class="hljs-type">B</span>, <span class="hljs-type">A</span>) =&gt; <span class="hljs-type">B</span>) = ???<br></code></pre></td></tr></table></figure><p>Then you’d like to call it in the following way, but will find that it doesn’t compile:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">notPossible</span> </span>= foldLeft1(numbers, <span class="hljs-number">0</span>, _ + _)<br></code></pre></td></tr></table></figure><p>you will have to call it like one of the below ways:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">firstWay</span> </span>= foldLeft1[<span class="hljs-type">Int</span>, <span class="hljs-type">Int</span>](numbers, <span class="hljs-number">0</span>, _ + _)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">secondWay</span> </span>= foldLeft1(numbers, <span class="hljs-number">0</span>, (a: <span class="hljs-type">Int</span>, b: <span class="hljs-type">Int</span>) =&gt; a + b)<br></code></pre></td></tr></table></figure><p>That’s because Scala won’t be able to infer the type of the function <code>_ + _</code>, as it’s still inferring <code>A</code> and <code>B</code>. By moving the parameter <code>op</code> to its own parameter list, <code>A</code> and <code>B</code> are inferred in the first parameter list. These inferred types will then be available to the second parameter list and <code>_ + _</code> will match the inferred type <code>(Int, Int) =&gt; Int</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">foldLeft2</span></span>[<span class="hljs-type">A</span>, <span class="hljs-type">B</span>](as: <span class="hljs-type">List</span>[<span class="hljs-type">A</span>], b0: <span class="hljs-type">B</span>)(op: (<span class="hljs-type">B</span>, <span class="hljs-type">A</span>) =&gt; <span class="hljs-type">B</span>) = ???<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">possible</span> </span>= foldLeft2(numbers, <span class="hljs-number">0</span>)(_ + _)<br></code></pre></td></tr></table></figure><h4 id="IMPLICIT-PARAMETERS"><a href="#IMPLICIT-PARAMETERS" class="headerlink" title="IMPLICIT PARAMETERS"></a>IMPLICIT PARAMETERS</h4><p>To specify only certain parameters as <a href="https://docs.scala-lang.org/tour/implicit-parameters.html"><code>implicit</code></a>, they must be placed in their own <code>implicit</code> parameter list.</p><p>An example of this is:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">execute</span></span>(arg: <span class="hljs-type">Int</span>)(<span class="hljs-keyword">implicit</span> ec: scala.concurrent.<span class="hljs-type">ExecutionContext</span>) = ???<br></code></pre></td></tr></table></figure><h4 id="PARTIAL-APPLICATION"><a href="#PARTIAL-APPLICATION" class="headerlink" title="PARTIAL APPLICATION"></a>PARTIAL APPLICATION</h4><p>When a method is called with a fewer number of parameter lists, then this will yield a function taking the missing parameter lists as its arguments. This is formally known as <a href="https://en.wikipedia.org/wiki/Partial_application">partial application</a>.</p><p>For example,</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">val</span> numbers = <span class="hljs-type">List</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>)<br><span class="hljs-keyword">val</span> numberFunc = numbers.foldLeft(<span class="hljs-type">List</span>[<span class="hljs-type">Int</span>]()) _<br><br><span class="hljs-keyword">val</span> squares = numberFunc((xs, x) =&gt; xs :+ x*x)<br>println(squares) <span class="hljs-comment">// List(1, 4, 9, 16, 25, 36, 49, 64, 81, 100)</span><br><br><span class="hljs-keyword">val</span> cubes = numberFunc((xs, x) =&gt; xs :+ x*x*x)<br>println(cubes)  <span class="hljs-comment">// List(1, 8, 27, 64, 125, 216, 343, 512, 729, 1000)</span><br></code></pre></td></tr></table></figure><h1 id="Case-Classes-1"><a href="#Case-Classes-1" class="headerlink" title="Case Classes"></a>Case Classes</h1><h2 id="Defining-a-case-class"><a href="#Defining-a-case-class" class="headerlink" title="Defining a case class"></a>Defining a case class</h2><p>A minimal case class requires the keywords <code>case class</code>, an identifier, and a parameter list (which may be empty):</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">case</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Book</span>(<span class="hljs-params">isbn: <span class="hljs-type">String</span></span>)</span><br><br><span class="hljs-keyword">val</span> frankenstein = <span class="hljs-type">Book</span>(<span class="hljs-string">&quot;978-0486282114&quot;</span>)<br></code></pre></td></tr></table></figure><p>Notice how the keyword <code>new</code> was not used to instantiate the <code>Book</code> case class. This is because case classes have an <code>apply</code> method by default which takes care of object construction.</p><blockquote><p>When you create a case class with parameters, the parameters are public <code>val</code>s.</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">case</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Message</span>(<span class="hljs-params">sender: <span class="hljs-type">String</span>, recipient: <span class="hljs-type">String</span>, body: <span class="hljs-type">String</span></span>)</span><br><span class="hljs-keyword">val</span> message1 = <span class="hljs-type">Message</span>(<span class="hljs-string">&quot;guillaume@quebec.ca&quot;</span>, <span class="hljs-string">&quot;jorge@catalonia.es&quot;</span>, <span class="hljs-string">&quot;Ça va ?&quot;</span>)<br><br>println(message1.sender)  <span class="hljs-comment">// prints guillaume@quebec.ca</span><br>message1.sender = <span class="hljs-string">&quot;travis@washington.us&quot;</span>  <span class="hljs-comment">// this line does not compile</span><br></code></pre></td></tr></table></figure><p>You can’t reassign <code>message1.sender</code> because it is a <code>val</code> (i.e. immutable). It is possible to use <code>var</code>s in case classes but this is discouraged.</p><h2 id="Comparison"><a href="#Comparison" class="headerlink" title="Comparison"></a>Comparison</h2><p>Instances of case classes are compared by structure and not by reference:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">case</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Message</span>(<span class="hljs-params">sender: <span class="hljs-type">String</span>, recipient: <span class="hljs-type">String</span>, body: <span class="hljs-type">String</span></span>)</span><br><br><span class="hljs-keyword">val</span> message2 = <span class="hljs-type">Message</span>(<span class="hljs-string">&quot;jorge@catalonia.es&quot;</span>, <span class="hljs-string">&quot;guillaume@quebec.ca&quot;</span>, <span class="hljs-string">&quot;Com va?&quot;</span>)<br><span class="hljs-keyword">val</span> message3 = <span class="hljs-type">Message</span>(<span class="hljs-string">&quot;jorge@catalonia.es&quot;</span>, <span class="hljs-string">&quot;guillaume@quebec.ca&quot;</span>, <span class="hljs-string">&quot;Com va?&quot;</span>)<br><span class="hljs-keyword">val</span> messagesAreTheSame = message2 == message3  <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>Even though <code>message2</code> and <code>message3</code> refer to different objects, the value of each object is equal.</p><h2 id="Copying"><a href="#Copying" class="headerlink" title="Copying"></a>Copying</h2><p>You can create a (shallow) copy of an instance of a case class simply by using the <code>copy</code> method. You can optionally change the constructor arguments.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">case</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Message</span>(<span class="hljs-params">sender: <span class="hljs-type">String</span>, recipient: <span class="hljs-type">String</span>, body: <span class="hljs-type">String</span></span>)</span><br><span class="hljs-keyword">val</span> message4 = <span class="hljs-type">Message</span>(<span class="hljs-string">&quot;julien@bretagne.fr&quot;</span>, <span class="hljs-string">&quot;travis@washington.us&quot;</span>, <span class="hljs-string">&quot;Me zo o komz gant ma amezeg&quot;</span>)<br><span class="hljs-keyword">val</span> message5 = message4.copy(sender = message4.recipient, recipient = <span class="hljs-string">&quot;claire@bourgogne.fr&quot;</span>)<br>message5.sender  <span class="hljs-comment">// travis@washington.us</span><br>message5.recipient <span class="hljs-comment">// claire@bourgogne.fr</span><br>message5.body  <span class="hljs-comment">// &quot;Me zo o komz gant ma amezeg&quot;</span><br></code></pre></td></tr></table></figure><p>The recipient of <code>message4</code> is used as the sender of <code>message5</code> but the <code>body</code> of <code>message4</code> was copied directly.</p><h1 id="Pattern-Matching"><a href="#Pattern-Matching" class="headerlink" title="Pattern Matching"></a>Pattern Matching</h1><p>Pattern matching is a mechanism for checking a value against a pattern. A successful match can also deconstruct a value into its constituent parts. It is a more powerful version of the <code>switch</code> statement in Java and it can likewise be used in place of a series of if/else statements.</p><h2 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h2><p>A match expression has a value, the <code>match</code> keyword, and at least one <code>case</code> clause.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">import</span> scala.util.<span class="hljs-type">Random</span><br><br><span class="hljs-keyword">val</span> x: <span class="hljs-type">Int</span> = <span class="hljs-type">Random</span>.nextInt(<span class="hljs-number">10</span>)<br><br>x <span class="hljs-keyword">match</span> &#123;<br>  <span class="hljs-keyword">case</span> <span class="hljs-number">0</span> =&gt; <span class="hljs-string">&quot;zero&quot;</span><br>  <span class="hljs-keyword">case</span> <span class="hljs-number">1</span> =&gt; <span class="hljs-string">&quot;one&quot;</span><br>  <span class="hljs-keyword">case</span> <span class="hljs-number">2</span> =&gt; <span class="hljs-string">&quot;two&quot;</span><br>  <span class="hljs-keyword">case</span> _ =&gt; <span class="hljs-string">&quot;other&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>The <code>val x</code> above is a random integer between 0 and 10. <code>x</code> becomes the left operand of the <code>match</code> operator and on the right is an expression with four cases. The last case <code>_</code> is a “catch all” case for any other possible <code>Int</code> values. Cases are also called <em>alternatives</em>.</p><h2 id="Matching-on-case-classes"><a href="#Matching-on-case-classes" class="headerlink" title="Matching on case classes"></a>Matching on case classes</h2><p>Case classes are especially useful for pattern matching.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Notification</span></span><br><br><span class="hljs-keyword">case</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Email</span>(<span class="hljs-params">sender: <span class="hljs-type">String</span>, title: <span class="hljs-type">String</span>, body: <span class="hljs-type">String</span></span>) <span class="hljs-keyword">extends</span> <span class="hljs-title">Notification</span></span><br><br><span class="hljs-keyword">case</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SMS</span>(<span class="hljs-params">caller: <span class="hljs-type">String</span>, message: <span class="hljs-type">String</span></span>) <span class="hljs-keyword">extends</span> <span class="hljs-title">Notification</span></span><br><br><span class="hljs-keyword">case</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VoiceRecording</span>(<span class="hljs-params">contactName: <span class="hljs-type">String</span>, link: <span class="hljs-type">String</span></span>) <span class="hljs-keyword">extends</span> <span class="hljs-title">Notification</span></span><br></code></pre></td></tr></table></figure><p><code>Notification</code> is an abstract super class which has three concrete Notification types implemented with case classes <code>Email</code>, <code>SMS</code>, and <code>VoiceRecording</code>. Now we can do pattern matching on these case classes:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">showNotification</span></span>(notification: <span class="hljs-type">Notification</span>): <span class="hljs-type">String</span> = &#123;<br>  notification <span class="hljs-keyword">match</span> &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-type">Email</span>(sender, title, _) =&gt;<br>      <span class="hljs-string">s&quot;You got an email from <span class="hljs-subst">$sender</span> with title: <span class="hljs-subst">$title</span>&quot;</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-type">SMS</span>(number, message) =&gt;<br>      <span class="hljs-string">s&quot;You got an SMS from <span class="hljs-subst">$number</span>! Message: <span class="hljs-subst">$message</span>&quot;</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-type">VoiceRecording</span>(name, link) =&gt;<br>      <span class="hljs-string">s&quot;You received a Voice Recording from <span class="hljs-subst">$name</span>! Click the link to hear it: <span class="hljs-subst">$link</span>&quot;</span><br>  &#125;<br>&#125;<br><span class="hljs-keyword">val</span> someSms = <span class="hljs-type">SMS</span>(<span class="hljs-string">&quot;12345&quot;</span>, <span class="hljs-string">&quot;Are you there?&quot;</span>)<br><span class="hljs-keyword">val</span> someVoiceRecording = <span class="hljs-type">VoiceRecording</span>(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-string">&quot;voicerecording.org/id/123&quot;</span>)<br><br>println(showNotification(someSms))  <span class="hljs-comment">// prints You got an SMS from 12345! Message: Are you there?</span><br><br>println(showNotification(someVoiceRecording))  <span class="hljs-comment">// prints You received a Voice Recording from Tom! Click the link to hear it: voicerecording.org/id/123</span><br></code></pre></td></tr></table></figure><h2 id="Pattern-guards"><a href="#Pattern-guards" class="headerlink" title="Pattern guards"></a>Pattern guards</h2><p>Pattern guards are simply boolean expressions which are used to make cases more specific. Just add <code>if &lt;boolean expression&gt;</code> after the pattern.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">showImportantNotification</span></span>(notification: <span class="hljs-type">Notification</span>, importantPeopleInfo: <span class="hljs-type">Seq</span>[<span class="hljs-type">String</span>]): <span class="hljs-type">String</span> = &#123;<br>  notification <span class="hljs-keyword">match</span> &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-type">Email</span>(sender, _, _) <span class="hljs-keyword">if</span> importantPeopleInfo.contains(sender) =&gt;<br>      <span class="hljs-string">&quot;You got an email from special someone!&quot;</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-type">SMS</span>(number, _) <span class="hljs-keyword">if</span> importantPeopleInfo.contains(number) =&gt;<br>      <span class="hljs-string">&quot;You got an SMS from special someone!&quot;</span><br>    <span class="hljs-keyword">case</span> other =&gt;<br>      showNotification(other) <span class="hljs-comment">// nothing special, delegate to our original showNotification function</span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">val</span> importantPeopleInfo = <span class="hljs-type">Seq</span>(<span class="hljs-string">&quot;867-5309&quot;</span>, <span class="hljs-string">&quot;jenny@gmail.com&quot;</span>)<br><br><span class="hljs-keyword">val</span> someSms = <span class="hljs-type">SMS</span>(<span class="hljs-string">&quot;123-4567&quot;</span>, <span class="hljs-string">&quot;Are you there?&quot;</span>)<br><span class="hljs-keyword">val</span> someVoiceRecording = <span class="hljs-type">VoiceRecording</span>(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-string">&quot;voicerecording.org/id/123&quot;</span>)<br><span class="hljs-keyword">val</span> importantEmail = <span class="hljs-type">Email</span>(<span class="hljs-string">&quot;jenny@gmail.com&quot;</span>, <span class="hljs-string">&quot;Drinks tonight?&quot;</span>, <span class="hljs-string">&quot;I&#x27;m free after 5!&quot;</span>)<br><span class="hljs-keyword">val</span> importantSms = <span class="hljs-type">SMS</span>(<span class="hljs-string">&quot;867-5309&quot;</span>, <span class="hljs-string">&quot;I&#x27;m here! Where are you?&quot;</span>)<br><br>println(showImportantNotification(someSms, importantPeopleInfo)) <span class="hljs-comment">// prints You got an SMS from 123-4567! Message: Are you there?</span><br>println(showImportantNotification(someVoiceRecording, importantPeopleInfo)) <span class="hljs-comment">// prints You received a Voice Recording from Tom! Click the link to hear it: voicerecording.org/id/123</span><br>println(showImportantNotification(importantEmail, importantPeopleInfo)) <span class="hljs-comment">// prints You got an email from special someone!</span><br><br>println(showImportantNotification(importantSms, importantPeopleInfo)) <span class="hljs-comment">// prints You got an SMS from special someone!</span><br></code></pre></td></tr></table></figure><p>In the <code>case Email(sender, _, _) if importantPeopleInfo.contains(sender)</code>, the pattern is matched only if the <code>sender</code> is in the list of important people.</p><h2 id="Matching-on-type-only"><a href="#Matching-on-type-only" class="headerlink" title="Matching on type only"></a>Matching on type only</h2><p>You can match on the type like so:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Device</span></span><br><span class="hljs-keyword">case</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Phone</span>(<span class="hljs-params">model: <span class="hljs-type">String</span></span>) <span class="hljs-keyword">extends</span> <span class="hljs-title">Device</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">screenOff</span> </span>= <span class="hljs-string">&quot;Turning screen off&quot;</span><br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Computer</span>(<span class="hljs-params">model: <span class="hljs-type">String</span></span>) <span class="hljs-keyword">extends</span> <span class="hljs-title">Device</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">screenSaverOn</span> </span>= <span class="hljs-string">&quot;Turning screen saver on...&quot;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">goIdle</span></span>(device: <span class="hljs-type">Device</span>) = device <span class="hljs-keyword">match</span> &#123;<br>  <span class="hljs-keyword">case</span> p: <span class="hljs-type">Phone</span> =&gt; p.screenOff<br>  <span class="hljs-keyword">case</span> c: <span class="hljs-type">Computer</span> =&gt; c.screenSaverOn<br>&#125;<br></code></pre></td></tr></table></figure><p><code>def goIdle</code> has a different behavior depending on the type of <code>Device</code>. This is useful when the case needs to call a method on the pattern. It is a convention to use the first letter of the type as the case identifier (<code>p</code> and <code>c</code> in this case).</p><h1 id="FOR-Comprehension"><a href="#FOR-Comprehension" class="headerlink" title="FOR Comprehension"></a>FOR Comprehension</h1><p>cala offers a lightweight notation for expressing <em>sequence comprehensions</em>. Comprehensions have the form <code>for (enumerators) yield e</code>, where <code>enumerators</code> refers to a semicolon-separated list of enumerators. An <em>enumerator</em> is either a generator which introduces new variables, or it is a filter. A comprehension evaluates the body <code>e</code> for each binding generated by the enumerators and returns a sequence of these values.</p><p>Here’s an example:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">case</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span>(<span class="hljs-params">name: <span class="hljs-type">String</span>, age: <span class="hljs-type">Int</span></span>)</span><br><br><span class="hljs-keyword">val</span> userBase = <span class="hljs-type">List</span>(<br>  <span class="hljs-type">User</span>(<span class="hljs-string">&quot;Travis&quot;</span>, <span class="hljs-number">28</span>),<br>  <span class="hljs-type">User</span>(<span class="hljs-string">&quot;Kelly&quot;</span>, <span class="hljs-number">33</span>),<br>  <span class="hljs-type">User</span>(<span class="hljs-string">&quot;Jennifer&quot;</span>, <span class="hljs-number">44</span>),<br>  <span class="hljs-type">User</span>(<span class="hljs-string">&quot;Dennis&quot;</span>, <span class="hljs-number">23</span>))<br><br><span class="hljs-keyword">val</span> twentySomethings =<br>  <span class="hljs-keyword">for</span> (user &lt;- userBase <span class="hljs-keyword">if</span> user.age &gt;=<span class="hljs-number">20</span> &amp;&amp; user.age &lt; <span class="hljs-number">30</span>)<br>  <span class="hljs-keyword">yield</span> user.name  <span class="hljs-comment">// i.e. add this to a list</span><br><br>twentySomethings.foreach(println)  <span class="hljs-comment">// prints Travis Dennis</span><br></code></pre></td></tr></table></figure><p>Here is a more complicated example using two generators. It computes all pairs of numbers between <code>0</code> and <code>n-1</code> whose sum is equal to a given value <code>v</code>:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">foo</span></span>(n: <span class="hljs-type">Int</span>, v: <span class="hljs-type">Int</span>) =<br>   <span class="hljs-keyword">for</span> (i &lt;- <span class="hljs-number">0</span> until n;<br>        j &lt;- <span class="hljs-number">0</span> until n <span class="hljs-keyword">if</span> i + j == v)<br>   <span class="hljs-keyword">yield</span> (i, j)<br><br>foo(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>) foreach &#123;<br>  <span class="hljs-keyword">case</span> (i, j) =&gt;<br>    println(<span class="hljs-string">s&quot;(<span class="hljs-subst">$i</span>, <span class="hljs-subst">$j</span>) &quot;</span>)  <span class="hljs-comment">// prints (1, 9) (2, 8) (3, 7) (4, 6) (5, 5) (6, 4) (7, 3) (8, 2) (9, 1)</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Programming</tag>
      
      <tag>Scala</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Introduction to Hive</title>
    <link href="/2021/06/01/Introduction-to-Hive/"/>
    <url>/2021/06/01/Introduction-to-Hive/</url>
    
    <content type="html"><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>The term ‘Big Data’ is used for collections of large datasets that include <strong>huge volume, high velocity, and a variety of data</strong> that is increasing day by day. Using traditional data management systems, it is difficult to process Big Data. Therefore, the Apache Software Foundation introduced a framework called Hadoop to solve Big Data management and processing challenges.</p><h2 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h2><p>Hadoop is an open-source framework to store and process Big Data in a distributed environment. It contains two modules, one is MapReduce and another is Hadoop Distributed File System (HDFS).</p><ul><li><strong>MapReduce:</strong> It is a parallel programming model for processing large amounts of structured, semi-structured, and unstructured data on large clusters of commodity hardware.</li><li><strong>HDFS:</strong> Hadoop Distributed File System is a part of Hadoop framework, used to store and process the datasets. It provides a fault-tolerant file system to run on commodity hardware.</li></ul><p>The Hadoop ecosystem contains different sub-projects (tools) such as Sqoop, Pig, and Hive that are used to help Hadoop modules.</p><ul><li><strong>Sqoop:</strong> It is used to import and export data to and from between HDFS and RDBMS.</li><li><strong>Pig:</strong> It is a procedural language platform used to develop a script for MapReduce operations.</li><li><strong>Hive:</strong> It is a platform used to develop <strong>SQL type scripts to do MapReduce operations.</strong></li></ul><blockquote><p><strong>Note:</strong> There are various ways to execute MapReduce operations:</p><ul><li>The traditional approach using Java MapReduce program for structured, semi-structured, and unstructured data.</li><li>The scripting approach for MapReduce to process structured and semi structured data using Pig.</li><li>The Hive Query Language (HiveQL or HQL) for MapReduce to process structured data using Hive.</li></ul></blockquote><h2 id="What-is-Hive"><a href="#What-is-Hive" class="headerlink" title="What is Hive"></a>What is Hive</h2><p>Hive is a data warehouse infrastructure tool to process structured data in Hadoop. It resides on top of Hadoop to <strong>summarize Big Data, and makes querying and analyzing easy</strong>.</p><blockquote><h3 id="Hive-is-not"><a href="#Hive-is-not" class="headerlink" title="Hive is not"></a>Hive is not</h3><ul><li>A relational database</li><li>A design for OnLine Transaction Processing (OLTP)</li><li>A language for real-time queries and row-level updates</li></ul></blockquote><h2 id="Features-of-Hive"><a href="#Features-of-Hive" class="headerlink" title="Features of Hive"></a>Features of Hive</h2><ul><li>It stores schema in a database and processed data into HDFS.</li><li>It is designed for OLAP (OnLine Analytical Processing)</li><li>It provides SQL type language for querying called HiveQL or HQL.</li><li>It is familiar, fast, scalable, and extensible.</li></ul><h2 id="Architecture-of-Hive"><a href="#Architecture-of-Hive" class="headerlink" title="Architecture of Hive"></a>Architecture of Hive</h2><p>The following component diagram depicts the architecture of Hive:</p><p><img src="hive_architecture.jpg" alt="Hive Architecture"></p><p>This component diagram contains different units. The following table describes each unit:</p><table><thead><tr><th>Unit Name</th><th>Operation</th></tr></thead><tbody><tr><td>User Interface</td><td>Hive is a data warehouse infrastructure software that can create interaction between user and HDFS. The user interfaces that Hive supports are Hive Web UI, Hive command line, and Hive HD Insight (In Windows server).</td></tr><tr><td>Meta Store</td><td>Hive chooses respective database servers to store the schema or Metadata of tables, databases, columns in a table, their data types, and HDFS mapping.</td></tr><tr><td>HiveQL Process Engine</td><td>HiveQL is similar to SQL for querying on schema info on the Metastore. It is one of the replacements of traditional approach for MapReduce program. Instead of writing MapReduce program in Java, we can write a query for MapReduce job and process it.</td></tr><tr><td>Execution Engine</td><td>The conjunction part of HiveQL process Engine and MapReduce is Hive Execution Engine. <strong>Execution engine processes the query and generates results as same as MapReduce results</strong>. It uses the flavor of MapReduce.</td></tr><tr><td>HDFS or HBASE</td><td>Hadoop distributed file system or HBASE are the data storage techniques to store data into file system.</td></tr></tbody></table><h2 id="Working-of-Hive"><a href="#Working-of-Hive" class="headerlink" title="Working of Hive"></a>Working of Hive</h2><p>The following diagram depicts the workflow between Hive and Hadoop.</p><p><img src="how_hive_works.jpg" alt="How Hive Works"></p><p>The following table defines how Hive interacts with Hadoop framework:</p><table><thead><tr><th>Step No.</th><th>Operation</th></tr></thead><tbody><tr><td>1</td><td><strong>Execute Query</strong> The Hive interface such as Command Line or Web UI sends query to Driver (any database driver such as JDBC, ODBC, etc.) to execute.</td></tr><tr><td>2</td><td><strong>Get Plan</strong> The driver takes the help of query compiler that parses the query to check the syntax and query plan or the requirement of query.</td></tr><tr><td>3</td><td><strong>Get Metadata</strong> The compiler sends metadata request to Metastore (any database).</td></tr><tr><td>4</td><td><strong>Send Metadata</strong> Metastore sends metadata as a response to the compiler.</td></tr><tr><td>5</td><td><strong>Send Plan</strong> The compiler checks the requirement and resends the plan to the driver. Up to here, the parsing and compiling of a query is complete.</td></tr><tr><td>6</td><td><strong>Execute Plan</strong> The driver sends the execute plan to the execution engine.</td></tr><tr><td>7</td><td><strong>Execute Job</strong> Internally, the process of execution job is a MapReduce job. The execution engine sends the job to JobTracker, which is in Name node and it assigns this job to TaskTracker, which is in Data node. Here, the query executes MapReduce job.</td></tr><tr><td>7.1</td><td><strong>Metadata Ops</strong> Meanwhile in execution, the execution engine can execute metadata operations with Metastore.</td></tr><tr><td>8</td><td><strong>Fetch Result</strong> The execution engine receives the results from Data nodes.</td></tr><tr><td>9</td><td><strong>Send Results</strong> The execution engine sends those resultant values to the driver.</td></tr><tr><td>10</td><td><strong>Send Results</strong> The driver sends the results to Hive Interfaces.</td></tr></tbody></table><p>Below is an annotated summary</p><p><img src="579BE628-6D0B-4201-B053-E3D95A96C45B_1_105_c.jpeg" alt="579BE628-6D0B-4201-B053-E3D95A96C45B_1_105_c"></p><h1 id="Data-Type"><a href="#Data-Type" class="headerlink" title="Data Type"></a>Data Type</h1><p>This chapter takes you through the different data types in Hive, which are involved in the table creation. All the data types in Hive are classified into four types, given as follows:</p><ul><li>Column Types</li><li>Literals</li><li>Null Values</li><li>Complex Types</li></ul><h2 id="Column-Types"><a href="#Column-Types" class="headerlink" title="Column Types"></a>Column Types</h2><h3 id="Integer-Types"><a href="#Integer-Types" class="headerlink" title="Integer Types"></a>Integer Types</h3><p>Integer type data can be specified using integral data types, INT. When the data range exceeds the range of INT, you need to use BIGINT and if the data range is smaller than the INT, you use SMALLINT. TINYINT is smaller than SMALLINT.</p><p>The following table depicts various INT data types:</p><table><thead><tr><th>Type</th><th>Postfix</th><th>Example</th></tr></thead><tbody><tr><td>TINYINT</td><td>Y</td><td>10Y</td></tr><tr><td>SMALLINT</td><td>S</td><td>10S</td></tr><tr><td>INT</td><td>-</td><td>10</td></tr><tr><td>BIGINT</td><td>L</td><td>10L</td></tr></tbody></table><h3 id="String-Types"><a href="#String-Types" class="headerlink" title="String Types"></a>String Types</h3><p>String type data types can be specified using single quotes (‘ ‘) or double quotes (“ “). It contains two data types: VARCHAR and CHAR. Hive follows C-types escape characters.</p><p>The following table depicts various CHAR data types:</p><table><thead><tr><th>Data Type</th><th>Length</th></tr></thead><tbody><tr><td>VARCHAR</td><td>1 to 65355</td></tr><tr><td>CHAR</td><td>255</td></tr></tbody></table><h3 id="Timestamp"><a href="#Timestamp" class="headerlink" title="Timestamp"></a>Timestamp</h3><p>It supports traditional UNIX timestamp with optional nanosecond precision. It supports java.sql.Timestamp format “YYYY-MM-DD HH:MM:SS.fffffffff” and format “yyyy-mm-dd hh:mm:ss.ffffffffff”.</p><h3 id="Dates"><a href="#Dates" class="headerlink" title="Dates"></a>Dates</h3><p>DATE values are described in year/month/day format in the form NaN.</p><h3 id="Decimals"><a href="#Decimals" class="headerlink" title="Decimals"></a>Decimals</h3><p>The DECIMAL type in Hive is as same as Big Decimal format of Java. It is used for representing immutable arbitrary precision. The syntax and example is as follows:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Sql"><span class="hljs-type">DECIMAL</span>(<span class="hljs-keyword">precision</span>, scale)<br><span class="hljs-type">decimal</span>(<span class="hljs-number">10</span>,<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><h3 id="Union-Types"><a href="#Union-Types" class="headerlink" title="Union Types"></a>Union Types</h3><p>Union is a collection of heterogeneous data types. You can create an instance using <strong>create union</strong>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">UNIONTYPE&lt;int, double, array&lt;string&gt;, struct&lt;a:int,b:string&gt;&gt;<br><br>&#123;0:1&#125; <br>&#123;1:2.0&#125; <br>&#123;2:[&quot;three&quot;,&quot;four&quot;]&#125; <br>&#123;3:&#123;&quot;a&quot;:5,&quot;b&quot;:&quot;five&quot;&#125;&#125; <br>&#123;2:[&quot;six&quot;,&quot;seven&quot;]&#125; <br>&#123;3:&#123;&quot;a&quot;:8,&quot;b&quot;:&quot;eight&quot;&#125;&#125; <br>&#123;0:9&#125; <br>&#123;1:10.0&#125;<br></code></pre></td></tr></table></figure><h2 id="Literals"><a href="#Literals" class="headerlink" title="Literals"></a>Literals</h2><h3 id="Floating-Point-Types"><a href="#Floating-Point-Types" class="headerlink" title="Floating Point Types"></a>Floating Point Types</h3><p>Floating point types are nothing but numbers with decimal points. Generally, this type of data is composed of DOUBLE data type.</p><h3 id="Decimal-Type"><a href="#Decimal-Type" class="headerlink" title="Decimal Type"></a>Decimal Type</h3><p>Decimal type data is nothing but floating point value with higher range than DOUBLE data type. The range of decimal type is approximately -10-308 to 10308.</p><h2 id="Null-Value"><a href="#Null-Value" class="headerlink" title="Null Value"></a>Null Value</h2><p>Missing values are represented by the special value NULL.</p><h2 id="Complex-Types"><a href="#Complex-Types" class="headerlink" title="Complex Types"></a>Complex Types</h2><p>The Hive complex data types are as follows:</p><h3 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h3><p>Arrays in Hive are used the same way they are used in Java.</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">Syntax:</span> ARRAY<span class="hljs-params">&lt;data_type&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Maps"><a href="#Maps" class="headerlink" title="Maps"></a>Maps</h3><p>Maps in Hive are similar to Java Maps.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">Syntax: MAP<span class="hljs-operator">&lt;</span>primitive_type, data_type<span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Structs"><a href="#Structs" class="headerlink" title="Structs"></a>Structs</h3><p>Structs in Hive is similar to using complex data with comment.</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">Syntax:</span> STRUCT<span class="hljs-params">&lt;col_name : data_type [COMMENT col_comment], ...&gt;</span><br></code></pre></td></tr></table></figure><h1 id="Database-Operations"><a href="#Database-Operations" class="headerlink" title="Database Operations"></a>Database Operations</h1><h2 id="Create-Database"><a href="#Create-Database" class="headerlink" title="Create Database"></a>Create Database</h2><p><code>Create Database</code> is a statement used to create a database in Hive. A database in Hive is a <strong>namespace</strong> or a collection of tables. The <strong>syntax</strong> for this statement is as follows:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE<span class="hljs-operator">|</span>SCHEMA [IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span>] <span class="hljs-operator">&lt;</span>database name<span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><p>Here, IF NOT EXISTS is an optional clause, which notifies the user that a database with the same name already exists. We can use SCHEMA in place of DATABASE in this command. The following query is executed to create a database named <strong>userdb</strong>:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">hive<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">CREATE</span> DATABASE [IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span>] userdb;<br></code></pre></td></tr></table></figure><p><strong>or</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">hive<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">CREATE</span> SCHEMA userdb;<br></code></pre></td></tr></table></figure><p>The following query is used to verify a databases list:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hive&gt; SHOW DATABASES;<br>default<br>userdb<br></code></pre></td></tr></table></figure><h2 id="Drop-Database"><a href="#Drop-Database" class="headerlink" title="Drop Database"></a>Drop Database</h2><p>Drop Database is a statement that drops all the tables and deletes the database. Its syntax is as follows:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> DATABASE StatementDROP (DATABASE<span class="hljs-operator">|</span>SCHEMA) [IF <span class="hljs-keyword">EXISTS</span>] database_name <br>[RESTRICT<span class="hljs-operator">|</span>CASCADE];<br></code></pre></td></tr></table></figure><p>The following queries are used to drop a database. Let us assume that the database name is <strong>userdb</strong>.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">hive<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">DROP</span> DATABASE IF <span class="hljs-keyword">EXISTS</span> userdb;<br></code></pre></td></tr></table></figure><p>The following query drops the database using <strong>CASCADE</strong>. It means dropping respective tables before dropping the database.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">hive<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">DROP</span> DATABASE IF <span class="hljs-keyword">EXISTS</span> userdb CASCADE;<br></code></pre></td></tr></table></figure><p>The following query drops the database using <strong>SCHEMA</strong>.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">hive<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">DROP</span> SCHEMA userdb;<br></code></pre></td></tr></table></figure><h1 id="Table-Operations"><a href="#Table-Operations" class="headerlink" title="Table Operations"></a>Table Operations</h1><h2 id="Create-Table"><a href="#Create-Table" class="headerlink" title="Create Table"></a>Create Table</h2><p>Create Table is a statement used to create a table in Hive. The syntax and example are as follows:</p><h3 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> [TEMPORARY] [<span class="hljs-keyword">EXTERNAL</span>] <span class="hljs-keyword">TABLE</span> [IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span>] [db_name.] table_name<br><br>[(col_name data_type [COMMENT col_comment], ...)]<br>[COMMENT table_comment]<br>[<span class="hljs-type">ROW</span> FORMAT row_format]<br>[STORED <span class="hljs-keyword">AS</span> file_format]<br></code></pre></td></tr></table></figure><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>The following query creates a table named <strong>employee</strong> using the above data.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">hive<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> employee ( eid <span class="hljs-type">int</span>, name String,<br>salary String, destination String)<br>COMMENT ‘Employee details’<br><span class="hljs-type">ROW</span> FORMAT DELIMITED<br>FIELDS TERMINATED <span class="hljs-keyword">BY</span> ‘\t’<br>LINES TERMINATED <span class="hljs-keyword">BY</span> ‘\n’<br>STORED <span class="hljs-keyword">AS</span> TEXTFILE;<br></code></pre></td></tr></table></figure><h2 id="Load-Data-Statement"><a href="#Load-Data-Statement" class="headerlink" title="Load Data Statement"></a>Load Data Statement</h2><p>Generally, after creating a table in SQL, we can insert data using the Insert statement. But in Hive, we can insert data using the <code>LOAD DATA</code> statement.</p><p>While inserting data into Hive, it is better to use <code>LOAD DATA</code> to store bulk records. There are two ways to load data: one is <strong>from local file system</strong> and second is <strong>from Hadoop file system</strong>.</p><h3 id="Syntax-1"><a href="#Syntax-1" class="headerlink" title="Syntax"></a>Syntax</h3><p>The syntax for load data is as follows:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">LOAD DATA [<span class="hljs-keyword">LOCAL</span>] INPATH <span class="hljs-string">&#x27;filepath&#x27;</span> [OVERWRITE] <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">TABLE</span> tablename <br>[<span class="hljs-keyword">PARTITION</span> (partcol1<span class="hljs-operator">=</span>val1, partcol2<span class="hljs-operator">=</span>val2 ...)]<br></code></pre></td></tr></table></figure><ul><li><code>LOCAL</code> is identifier to specify the local path. It is optional.</li><li><code>OVERWRITE</code> is optional to overwrite the data in the table.</li><li><code>PARTITION</code> is optional.</li></ul><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h3><p>We will insert the following data into the table. It is a text file named <strong>sample.txt</strong> in <strong>/home/user</strong> directory.</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1201 </span> Gopal       <span class="hljs-number">45000</span>    Technical manager<br><span class="hljs-symbol">1202 </span> Manisha     <span class="hljs-number">45000</span>    Proof reader<br><span class="hljs-symbol">1203 </span> Masthanvali <span class="hljs-number">40000</span>    Technical writer<br><span class="hljs-symbol">1204 </span> Kiran       <span class="hljs-number">40000</span>    Hr Admin<br><span class="hljs-symbol">1205 </span> Kranthi     <span class="hljs-number">30000</span>    Op Admin<br></code></pre></td></tr></table></figure><p>The following query loads the given text into the table.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">hive<span class="hljs-operator">&gt;</span> LOAD DATA <span class="hljs-keyword">LOCAL</span> INPATH <span class="hljs-string">&#x27;/home/user/sample.txt&#x27;</span><br>OVERWRITE <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">TABLE</span> employee;<br></code></pre></td></tr></table></figure><h2 id="ALTER-Table"><a href="#ALTER-Table" class="headerlink" title="ALTER Table"></a>ALTER Table</h2><h3 id="Syntax-2"><a href="#Syntax-2" class="headerlink" title="Syntax"></a>Syntax</h3><p>The statement takes any of the following syntaxes based on what attributes we wish to modify in a table.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> name RENAME <span class="hljs-keyword">TO</span> new_name<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> name <span class="hljs-keyword">ADD</span> COLUMNS (col_spec[, col_spec ...])<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> name <span class="hljs-keyword">DROP</span> [<span class="hljs-keyword">COLUMN</span>] column_name<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> name CHANGE column_name new_name new_type<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> name REPLACE COLUMNS (col_spec[, col_spec ...])<br></code></pre></td></tr></table></figure><h2 id="DROP-Table"><a href="#DROP-Table" class="headerlink" title="DROP Table"></a>DROP Table</h2><p>When you drop a table from Hive Metastore, it removes the table/column data and their metadata. It can be a normal table (stored in Metastore) or an external table (stored in local file system); Hive treats both in the same manner, irrespective of their types.</p><p>The syntax is as follows:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> [IF <span class="hljs-keyword">EXISTS</span>] table_name;<br></code></pre></td></tr></table></figure><p>The following query drops a table named <strong>employee</strong>:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">hive<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> employee;<br></code></pre></td></tr></table></figure><h1 id="Partitions"><a href="#Partitions" class="headerlink" title="Partitions"></a>Partitions</h1><p>Hive organizes tables into partitions. It is a way of dividing a table into related parts <strong>based on the values of partitioned columns</strong> such as date, city, and department. Using partition, it is easy to query a portion of the data.</p><p>Tables or partitions are sub-divided into <strong>buckets,</strong> to provide extra structure to the data that may be used for more efficient querying. Bucketing works based on the value of hash function of some column of a table.</p><p>For example, a table named <strong>Tab1</strong> contains employee data such as id, name, dept, and yoj (i.e., year of joining). Suppose you need to retrieve the details of all employees who joined in 2012. A query searches the whole table for the required information. However, if you partition the employee data with the year and store it in a separate file, it reduces the query processing time. The following example shows how to partition a file and its data:</p><p>The following file contains employeedata table.</p><p>/tab1/employeedata/file1</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">id</span>, name, dept, yoj<br><span class="hljs-attribute">1</span>, gopal, TP, <span class="hljs-number">2012</span><br><span class="hljs-attribute">2</span>, kiran, HR, <span class="hljs-number">2012</span><br><span class="hljs-attribute">3</span>, kaleel,SC, <span class="hljs-number">2013</span><br><span class="hljs-attribute">4</span>, Prasanth, SC, <span class="hljs-number">2013</span><br></code></pre></td></tr></table></figure><p>The above data is partitioned into two files using year.</p><p>/tab1/employeedata/2012/file2</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>, gopal, TP, <span class="hljs-number">2012</span><br><span class="hljs-attribute">2</span>, kiran, HR, <span class="hljs-number">2012</span><br></code></pre></td></tr></table></figure><p>/tab1/employeedata/2013/file3</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">3</span>, kaleel,SC, <span class="hljs-number">2013</span><br><span class="hljs-attribute">4</span>, Prasanth, SC, <span class="hljs-number">2013</span><br></code></pre></td></tr></table></figure><h2 id="Adding-a-Partition"><a href="#Adding-a-Partition" class="headerlink" title="Adding a Partition"></a>Adding a Partition</h2><h3 id="Syntax-3"><a href="#Syntax-3" class="headerlink" title="Syntax:"></a>Syntax:</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name <span class="hljs-keyword">ADD</span> [IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span>] <span class="hljs-keyword">PARTITION</span> partition_spec<br>[LOCATION <span class="hljs-string">&#x27;location1&#x27;</span>] partition_spec [LOCATION <span class="hljs-string">&#x27;location2&#x27;</span>] ...;<br><br>partition_spec:<br>: (p_column <span class="hljs-operator">=</span> p_col_value, p_column <span class="hljs-operator">=</span> p_col_value, ...)<br></code></pre></td></tr></table></figure><p>The following query is used to add a partition to the employee table.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">hive<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> employee<br><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">PARTITION</span> (<span class="hljs-keyword">year</span><span class="hljs-operator">=</span>’<span class="hljs-number">2012</span>’)<br><span class="hljs-operator">&gt;</span> location <span class="hljs-string">&#x27;/2012/part2012&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="Renaming-a-Partition"><a href="#Renaming-a-Partition" class="headerlink" title="Renaming a Partition"></a>Renaming a Partition</h2><p>The syntax of this command is as follows.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name <span class="hljs-keyword">PARTITION</span> partition_spec RENAME <span class="hljs-keyword">TO</span> <span class="hljs-keyword">PARTITION</span> partition_spec;<br></code></pre></td></tr></table></figure><p>The following query is used to rename a partition:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">hive<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> employee <span class="hljs-keyword">PARTITION</span> (<span class="hljs-keyword">year</span><span class="hljs-operator">=</span>’<span class="hljs-number">1203</span>’)<br>   <span class="hljs-operator">&gt;</span> RENAME <span class="hljs-keyword">TO</span> <span class="hljs-keyword">PARTITION</span> (Yoj<span class="hljs-operator">=</span>’<span class="hljs-number">1203</span>’);<br></code></pre></td></tr></table></figure><h2 id="Dropping-a-Partition"><a href="#Dropping-a-Partition" class="headerlink" title="Dropping a Partition"></a>Dropping a Partition</h2><p>The following syntax is used to drop a partition:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name <span class="hljs-keyword">DROP</span> [IF <span class="hljs-keyword">EXISTS</span>] <span class="hljs-keyword">PARTITION</span> partition_spec, <span class="hljs-keyword">PARTITION</span> partition_spec,...;<br></code></pre></td></tr></table></figure><p>The following query is used to drop a partition:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">hive<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> employee <span class="hljs-keyword">DROP</span> [IF <span class="hljs-keyword">EXISTS</span>]<br>   <span class="hljs-operator">&gt;</span> <span class="hljs-keyword">PARTITION</span> (<span class="hljs-keyword">year</span><span class="hljs-operator">=</span>’<span class="hljs-number">1203</span>’);<br></code></pre></td></tr></table></figure><h1 id="Operators-amp-Functions"><a href="#Operators-amp-Functions" class="headerlink" title="Operators &amp; Functions"></a>Operators &amp; Functions</h1><h2 id="Relational-Operators"><a href="#Relational-Operators" class="headerlink" title="Relational Operators"></a>Relational Operators</h2><p>These operators are used to compare two operands. The following table describes the relational operators available in Hive:</p><table><thead><tr><th>Operator</th><th>Operand</th><th>Description</th></tr></thead><tbody><tr><td>A = B</td><td>all primitive types</td><td>TRUE if expression A is equivalent to expression B otherwise FALSE.</td></tr><tr><td>A != B</td><td>all primitive types</td><td>TRUE if expression A is not equivalent to expression B otherwise FALSE.</td></tr><tr><td>A &lt; B</td><td>all primitive types</td><td>TRUE if expression A is less than expression B otherwise FALSE.</td></tr><tr><td>A &lt;= B</td><td>all primitive types</td><td>TRUE if expression A is less than or equal to expression B otherwise FALSE.</td></tr><tr><td>A &gt; B</td><td>all primitive types</td><td>TRUE if expression A is greater than expression B otherwise FALSE.</td></tr><tr><td>A &gt;= B</td><td>all primitive types</td><td>TRUE if expression A is greater than or equal to expression B otherwise FALSE.</td></tr><tr><td>A IS NULL</td><td>all types</td><td>TRUE if expression A evaluates to NULL otherwise FALSE.</td></tr><tr><td>A IS NOT NULL</td><td>all types</td><td>FALSE if expression A evaluates to NULL otherwise TRUE.</td></tr><tr><td>A LIKE B</td><td>Strings</td><td>TRUE if string pattern A matches to B otherwise FALSE.</td></tr><tr><td>A RLIKE B</td><td>Strings</td><td>NULL if A or B is NULL, TRUE if any substring of A matches the Java regular expression B , otherwise FALSE.</td></tr><tr><td>A REGEXP B</td><td>Strings</td><td>Same as RLIKE.</td></tr></tbody></table><h2 id="Logical-Operators"><a href="#Logical-Operators" class="headerlink" title="Logical Operators"></a>Logical Operators</h2><p>The operators are logical expressions. All of them return either TRUE or FALSE.</p><table><thead><tr><th>Operators</th><th>Operands</th><th>Description</th></tr></thead><tbody><tr><td>A AND B</td><td>boolean</td><td>TRUE if both A and B are TRUE, otherwise FALSE.</td></tr><tr><td>A &amp;&amp; B</td><td>boolean</td><td>Same as A AND B.</td></tr><tr><td>A OR B</td><td>boolean</td><td>TRUE if either A or B or both are TRUE, otherwise FALSE.</td></tr><tr><td>A || B</td><td>boolean</td><td>Same as A OR B.</td></tr><tr><td>NOT A</td><td>boolean</td><td>TRUE if A is FALSE, otherwise FALSE.</td></tr><tr><td>!A</td><td>boolean</td><td>Same as NOT A.</td></tr></tbody></table><h2 id="Built-in-Functions"><a href="#Built-in-Functions" class="headerlink" title="Built-in Functions"></a>Built-in Functions</h2><p>Hive supports the following built-in functions:</p><table><thead><tr><th>Return Type</th><th>Signature</th><th>Description</th></tr></thead><tbody><tr><td>BIGINT</td><td>round(double a)</td><td>It returns the rounded BIGINT value of the double.</td></tr><tr><td>BIGINT</td><td>floor(double a)</td><td>It returns the maximum BIGINT value that is equal or less than the double.</td></tr><tr><td>BIGINT</td><td>ceil(double a)</td><td>It returns the minimum BIGINT value that is equal or greater than the double.</td></tr><tr><td>double</td><td>rand(), rand(int seed)</td><td>It returns a random number that changes from row to row.</td></tr><tr><td>string</td><td>concat(string A, string B,…)</td><td>It returns the string resulting from concatenating B after A.</td></tr><tr><td>string</td><td>substr(string A, int start)</td><td>It returns the substring of A starting from start position till the end of string A.</td></tr><tr><td>string</td><td>substr(string A, int start, int length)</td><td>It returns the substring of A starting from start position with the given length.</td></tr><tr><td>string</td><td>upper(string A)</td><td>It returns the string resulting from converting all characters of A to upper case.</td></tr><tr><td></td><td></td><td></td></tr><tr><td>string</td><td>ucase(string A)</td><td>Same as above.</td></tr><tr><td>string</td><td>lower(string A)</td><td>It returns the string resulting from converting all characters of B to lower case.</td></tr><tr><td>string</td><td>lcase(string A)</td><td>Same as above.</td></tr><tr><td>string</td><td>trim(string A)</td><td>It returns the string resulting from trimming spaces from both ends of A.</td></tr><tr><td>string</td><td>ltrim(string A)</td><td>It returns the string resulting from trimming spaces from the beginning (left hand side) of A.</td></tr><tr><td>string</td><td>rtrim(string A)</td><td>rtrim(string A) It returns the string resulting from trimming spaces from the end (right hand side) of A.</td></tr><tr><td>string</td><td>regexp_replace(string A, string B, string C)</td><td>It returns the string resulting from replacing all substrings in B that match the Java regular expression syntax with C.</td></tr><tr><td>int</td><td>size(Map&lt;K.V&gt;)</td><td>It returns the number of elements in the map type.</td></tr><tr><td>int</td><td>size(Array<T>)</td><td>It returns the number of elements in the array type.</td></tr><tr><td>value of <type></td><td>cast(<expr> as <type>)</td><td>It converts the results of the expression expr to <type> e.g. cast(‘1’ as BIGINT) converts the string ‘1’ to it integral representation. A NULL is returned if the conversion does not succeed.</td></tr><tr><td>string</td><td>from_unixtime(int unixtime)</td><td>convert the number of seconds from Unix epoch (1970-01-01 00:00:00 UTC) to a string representing the timestamp of that moment in the current system time zone in the format of “1970-01-01 00:00:00”</td></tr><tr><td>string</td><td>to_date(string timestamp)</td><td>It returns the date part of a timestamp string: to_date(“1970-01-01 00:00:00”) = “1970-01-01”</td></tr><tr><td>int</td><td>year(string date)</td><td>It returns the year part of a date or a timestamp string: year(“1970-01-01 00:00:00”) = 1970, year(“1970-01-01”) = 1970</td></tr><tr><td>int</td><td>month(string date)</td><td>It returns the month part of a date or a timestamp string: month(“1970-11-01 00:00:00”) = 11, month(“1970-11-01”) = 11</td></tr><tr><td>int</td><td>day(string date)</td><td>It returns the day part of a date or a timestamp string: day(“1970-11-01 00:00:00”) = 1, day(“1970-11-01”) = 1</td></tr><tr><td>string</td><td>get_json_object(string json_string, string path)</td><td>It extracts json object from a json string based on json path specified, and returns json string of the extracted json object. It returns NULL if the input json string is invalid.</td></tr></tbody></table><h2 id="Aggregate-Functions"><a href="#Aggregate-Functions" class="headerlink" title="Aggregate Functions"></a>Aggregate Functions</h2><p>Hive supports the following built-in <strong>aggregate functions</strong>. The usage of these functions is as same as the SQL aggregate functions.</p><table><thead><tr><th>Return Type</th><th>Signature</th><th>Description</th></tr></thead><tbody><tr><td>BIGINT</td><td>count(*), count(expr),</td><td>count(*) - Returns the total number of retrieved rows.</td></tr><tr><td>DOUBLE</td><td>sum(col), sum(DISTINCT col)</td><td>It returns the sum of the elements in the group or the sum of the distinct values of the column in the group.</td></tr><tr><td>DOUBLE</td><td>avg(col), avg(DISTINCT col)</td><td>It returns the average of the elements in the group or the average of the distinct values of the column in the group.</td></tr><tr><td>DOUBLE</td><td>min(col)</td><td>It returns the minimum value of the column in the group.</td></tr><tr><td>DOUBLE</td><td>max(col)</td><td>It returns the maximum value of the column in the group.</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>Big Data</tag>
      
      <tag>Hive</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算广告</title>
    <link href="/2021/06/01/%E8%AE%A1%E7%AE%97%E5%B9%BF%E5%91%8A/"/>
    <url>/2021/06/01/%E8%AE%A1%E7%AE%97%E5%B9%BF%E5%91%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="计算广告基础"><a href="#计算广告基础" class="headerlink" title="计算广告基础"></a>计算广告基础</h1><h2 id="广告有效性原理"><a href="#广告有效性原理" class="headerlink" title="$广告有效性原理$"></a>$广告有效性原理$</h2><p><img src="image-20210610224834690-3336516.png" alt="image-20210610224834690"></p><p>![Screen Shot 2021-06-10 at 22.49.30](Screen Shot 2021-06-10 at 22.49.30.png)</p><h2 id="互联网广告的技术特点"><a href="#互联网广告的技术特点" class="headerlink" title="互联网广告的技术特点"></a>互联网广告的技术特点</h2><ol><li>技术和计算导向</li><li>效果的可衡量性（点击量）</li><li>创意和投放方式的标准化<ol><li>视频广告的VAST标准和实时竞价的OpenRTB标准</li></ol></li><li>媒体概念的多样化：媒体与转化行为的距离不同 - 需要不同的标准<ul><li>接近购买的网站 - 转化率高，但吸引潜在用户能力小</li></ul></li><li>数据驱动的投放决策</li></ol><h2 id="计算广告的核心问题"><a href="#计算广告的核心问题" class="headerlink" title="计算广告的核心问题"></a>计算广告的核心问题</h2><blockquote><p>Find the best match between a given user in a given context and a suitable advertisement. - Andrei Broder</p></blockquote><p>两点微调：</p><ol><li>应对一组广告而非孤立的单个广告进行优化</li><li>系统不一定拥有用户的完整上下文</li></ol><p>数学表达：$\max\sum_{i=1}^T (r_i-q_i)$. where $r_i$ is the revenue for the $i^{th}$ advertisement, $q_i$ is the cost for that advertisement. 当投入一致时，该标准即为投入产出比$ROI=\sum_i r_i / \sum_i q_i$.</p><p>广告优化问题(mathematical formulation for optimal advertising)：$$\max_{a_{1,…,T}}\sum_{i=1}^T r(a_i,u_i,c_i)-q(a_i,u_i,c_i)$$. where $a_i$ is the advertisement, $u_i$ is the user and $c_i$ is the context.</p><h3 id="广告收入的分解"><a href="#广告收入的分解" class="headerlink" title="广告收入的分解"></a>广告收入的分解</h3><p>点击率(Click Through Rate <strong>CTR</strong>  $=\frac{\text{广告点击}}{\text{广告展示}}$) </p><p>转化率(Conversion Rate <strong>CVR</strong> $=\frac{转化次数}{到达（广告主网页）次数}$)</p><p>广告收入分解：$eCPM = r(a,u,c) = \mu(a,u,c)\times \nu(a,u,c)$. where $\mu$ is click throgh rate （点击率）, $\nu$ is conversion rate （转化率）或点击价值（click value）</p><blockquote><p> eCPM: effective cost per millie. 千次印象费用。一千次广告展示收取的费用。是最常用也最关健的定量评估收益的指标。</p></blockquote><h3 id="结算方式与eCPM估计的关系"><a href="#结算方式与eCPM估计的关系" class="headerlink" title="结算方式与eCPM估计的关系"></a>结算方式与eCPM估计的关系</h3><p>几种主要计费模式：</p><ol><li>CPM结算，即千次展示结算。是视频广告结算的主流</li><li>CPC结算，即按点击结算</li><li>CPS (cost per sale)/CPA(cost per action)/ROI结算，即按照销售订单数，转化行为数或投入产出比结算</li><li>CPT (cost per time)，针对大品牌广告主特定的广告活动，将某个广告位以独占方式交给某广告主，并按照独占的时间段收取费用。</li></ol><p>![Screen Shot 2021-06-10 at 23.15.15](Screen Shot 2021-06-10 at 23.15.15.png)</p><h1 id="在线广告产品概览"><a href="#在线广告产品概览" class="headerlink" title="在线广告产品概览"></a>在线广告产品概览</h1><p>![Screen Shot 2021-06-10 at 23.17.20](Screen Shot 2021-06-10 at 23.17.20.png)</p><p>广告产品的三个主要组成部分：面对需求方的借口，面对供给方的借口，中间的投放过程和匹配策略。</p><h1 id="搜索与竞价广告"><a href="#搜索与竞价广告" class="headerlink" title="搜索与竞价广告"></a>搜索与竞价广告</h1><h2 id="搜索广告"><a href="#搜索广告" class="headerlink" title="搜索广告"></a>搜索广告</h2><p>搜索广告(paid search, search ad, sponsored search)一直是整个在线广告市场中市场份额最大的类型，更重要的是，像竞价、类搜索的广告投放架构都是从搜索广告发展起来的。</p><p>![Screen Shot 2021-06-17 at 16.44.12](Screen Shot 2021-06-17 at 16.44.12.png)</p><p>搜索广告是比较典型的竞价广告产品，其特点是广告主就某标的物（在这里是关键词）的广告展示机会展开拍卖式的竞争，并根据竞争结果依次占据该广告展示的若干位置。搜索广告创意的展示区域一般分为北（north）、东（east）、南（south）三个部分，如图所示：</p><p>![Screen Shot 2021-06-17 at 16.46.46](Screen Shot 2021-06-17 at 16.46.46.png)</p><h1 id="计算广告技术概览"><a href="#计算广告技术概览" class="headerlink" title="计算广告技术概览"></a>计算广告技术概览</h1><p>计算广告是一个典型的**<u>个性化系统</u>**，即根据用户，上下文的一些信息动态决定返回什么内容的系统。</p><p>个性化系统与搜索系统都是互联网时代具有挑战性的大规模计算问题。由于数据规模的要求，他们一般都采用检索（retrieval）加排序（ranking）这样类搜索的系统架构。个性化系统与搜索系统的主要差别在于<u>大量的用户特征的使用</u>，这一过程需要用到大规模的分布式数据处理平台，如Hadoop。初次之外，为了尽可能实时的利用线上数据，我们还会用到流计算平台来加工短时的个性化特征。将<u>离线的分布式计算平台</u>和<u>在线的流计算平台</u>相结合已经成为了这样的系统生成个性化特征的常用方案。</p><h2 id="个性化系统框架"><a href="#个性化系统框架" class="headerlink" title="个性化系统框架"></a>个性化系统框架</h2><p>![Screen Shot 2021-06-10 at 23.27.55](Screen Shot 2021-06-10 at 23.27.55.png)</p><p>一般的个性化系统主要由四部分组成：</p><ol><li>响应实时请求，完成决策的在线投放引擎（online serving）；</li><li>离线的分布式计算（distributed computing）数据处理平台；</li><li>用于在线实时反馈的流计算（stream computing）平台；</li><li>连接和转运以上三部分数据流的数据高速公路（data highway）</li></ol><p>![Screen Shot 2021-06-10 at 23.31.23](Screen Shot 2021-06-10 at 23.31.23.png)</p><h2 id="各类广告系统优化目标"><a href="#各类广告系统优化目标" class="headerlink" title="各类广告系统优化目标"></a>各类广告系统优化目标</h2><p>$$\hat a_{1,…,T} = \arg\max_{a_{1,…,T}}\sum_{i=1}^T r(a_i,u_i,c_i)-q(a_i,u_i,c_i) = \arg\max_{a_{1,…,T}}\sum_{i=1}^T \mu(a_i,u_i,c_i)\times \nu(a_i,u_i,c_i)-q(a_i,u_i,c_i)$$</p><p>在广告系统中，每次展示的$r$都是由在线的投放引擎来决策的，而离线数据处理平台和流计算所做的都是为了准备$a_i,u_i,c_i$这三个变量或其组合的一些特征。</p><p>![Screen Shot 2021-06-10 at 23.35.17](Screen Shot 2021-06-10 at 23.35.17.png)</p><h2 id="计算广告系统架构"><a href="#计算广告系统架构" class="headerlink" title="计算广告系统架构"></a>计算广告系统架构</h2><h3 id="广告投放引擎"><a href="#广告投放引擎" class="headerlink" title="广告投放引擎"></a>广告投放引擎</h3><p>![Screen Shot 2021-06-10 at 23.37.48](Screen Shot 2021-06-10 at 23.37.48.png)</p><ol><li>广告投放机（ad server）：类搜索的投放机架构，通过倒排索引筛选再通过排序算法找到综合收益最高的若干个广告。最重要的指标是每秒查询数（Query per Second, QPS）以及广告决策的延迟（latency）</li><li>广告检索（ad retrival）:主要功能是在线时根据用户标签（user attributes）与页面标签（page attributes）从广告索引（ad index）中查找符合条件的广告候选。</li><li>广告排序（ad ranking）：在线高效计算广告的eCPM，并进行排序。eCPM的计算主要依赖于点击率估算，这需要用到离线计算得到的CTR模型和特征（CTR Model &amp; Features），有时还会用到流计算得到的实时点击率特征（real-time features）</li><li>收益管理（yield management）：用这一部分来统一代表在各种广告系统中将局部广告排序的结果进一步调整，以全局收益最优为为目的进行调整的功能</li><li>广告请求接口</li><li>定制化用户划分（customized audience segmentation）：根据广告主的逻辑来划分用户群，从广告主处收集用户信息的产品接口</li></ol><h3 id="离线数据处理"><a href="#离线数据处理" class="headerlink" title="离线数据处理"></a>离线数据处理</h3><p>计算广告最具挑战的算法问题大都集中在离线数据处理的部分，离线数据处理有两个输出目标：一是统计日志得到报表、dashboard等，供决策人进行决策时作为参考；而是利用数据挖掘、机器学习进行受众定向、点击率预估、分配策略规划等，为在线的机器决策提供支持。为了对大规模数据进行分布式的处理加工，我们一般会选用Hadoop这样的分布式存储和MapReduce计算框架。离线数据处理主要有下面几个主要模块：</p><ol><li>用户会话日志生成：整理出以用户ID为键的统一存储格式，这样的日志被称为用户会话日志（session log）</li><li>行为定向（behavioral targeting）：这部分功能完成挖掘用户日志，根据日志中的行为给用户打上结构化标签库（structural label base）中的某些标签，并将结果存储在用户标签的在线缓存中，供广告投放机使用。这部分时计算广告的原材料加工厂</li><li>上下文定向（contextual targeting）：这部分包括半在线页面抓取（near-line page Fetcher）和上下文页面标签的缓存，与行为定向互相配合，负责给上下文页面打上标签，用于在线的广告投放中。</li><li>点击率建模（click modeling）：在分布式计算平台上训练得到点击率的模型参数和相应特征，加载到缓存中公线上投放系统决策时使用</li><li>分配规划（planning）：这部分为在线的收益管理模块提供服务，它根据广告系统全局优化的具体需求，利用离线日志数据进行规划，得到适合线上执行的分配方案（allocation plan）</li><li>商业智能（Business intelligence，BI）系统：这部分包括Extract-Transform-Load（ETL）过程、dashboard和cube，这些是所有以人为最终接口的数据处理和分析流程的总括，承担着对外信息交流的任务。</li><li>广告管理系统：这部分时广告操作者，即客户执行（Account Execute，AE）与广告系统的接口。一般来说，广告系统中只有这部分时面向用户的产品。</li></ol><h3 id="在线数据处理"><a href="#在线数据处理" class="headerlink" title="在线数据处理"></a>在线数据处理</h3><p>在线数据处理基本上可以认为是离线数据处理对镜像功能，它是为了满足广告系统对实时数据反馈的要求，解决那些离线分布式计算平台无法快速响应的计算问题。我们经常选用流式管理平台作为基础设施。在线数据处理主要包括以下模块：</p><ol><li><p>在线反作弊（anti-spam）：实时判断流量来源中是否有作弊流量，并且将这部分流量从计价和统计中去掉。这是所有后续在线处理必须经过的前置模块</p></li><li><p>计费（billing）：对于经过扣费预算耗尽的广告，系统必须马上通告广告索引系统将其下线。</p></li><li><p>在线行为反馈：包括实时受众定向（real-time targeting）和实时点击反馈（realtime click feedback）等部分。这部分时将短时内发生的用户行为和广告日志及时的加工成实时用户标签以及实时的点击率模型特征。</p><blockquote><p>对于在线广告系统，这部分对于效果提升的意义重大；在很多情形下，把系统信息反馈调整做的更快比吧模型预测做得更准确效果更加显著。</p></blockquote></li><li><p>实时索引（real-time indexing）：这部分的主要功能是实时接收广告投放数据，建立倒排索引。用于管理者快速调整线上广告索引。</p></li></ol><h1 id="合约广告核心技术"><a href="#合约广告核心技术" class="headerlink" title="合约广告核心技术"></a>合约广告核心技术</h1><p>合约广告的重点形式是按指定受众购买的、按CPM计费的展示量合约广告。展示量合约广告的投送系统称为<u>担保式投送系统</u>。它依赖于<u>受众定向、流量预测、点击率预测</u>这三项基本技术，并采用<u>在线分配</u>的方式完成实时决策。本章主要解决在线分配问题，即在一组合约量的约束条件下，对每个在线到达的展示</p><h2 id="广告排期系统"><a href="#广告排期系统" class="headerlink" title="广告排期系统"></a>广告排期系统</h2><p>![Screen Shot 2021-06-11 at 10.14.16](Screen Shot 2021-06-11 at 10.14.16.png)</p><h2 id="担保式投送系统"><a href="#担保式投送系统" class="headerlink" title="担保式投送系统"></a>担保式投送系统</h2><p>与展示量合约对应的广告系统称为担保式投送（Guranteed Delivery, GD）系统。</p><p>![Screen Shot 2021-06-11 at 10.28.38](Screen Shot 2021-06-11 at 10.28.38.png)</p><p>在此系统中，在线投放引擎接受用户出发的广告请求，根据用户标签和上下文标签找到可以匹配的广告合约，然后由在线分配模块决定本次展示投放哪个广告。完成决策后，将展示和点击日志送入数据高速公路。这些日志一方面进入离线分布式计算平台以后，通过日志的整理，完成合约的计划，即确定在线分配算法的参数，再将分配方案送到线上投放机使用；另一方面，日志也送到流计算平台，在反作弊和计价的基础上，再对索引进行快速调整。</p><h3 id="流量预测"><a href="#流量预测" class="headerlink" title="流量预测"></a>流量预测</h3><p>流量预测是一项支持技术，它对于在线分配的效果至关重要。它可以描述为：给定一组受众标签组合以及一个eCPM的阈值，估算在将来某个时间段内符合这些受众标签组合的条件、并且市场价在该eCPM阈值一下的广告展示量。</p><p>流量预测一般的方法是根据历史数据的统计来拟合未来的流量。工程哈桑的主要挑战在于，给定的受众标签组合可能性非常多，不可能将所有这些组合都预先做好统计。可行的思路是将其视为一个反向检索问题，主要包括以下几个步骤：</p><ol><li>准备文档：将历史流量中，$(u,c)$上的所有标签的展示合并为一个供给节点$i$，并统计其总流量$s_i$以及这部分流量上eCPM的直方图hist。这样的每个供给节点作为流量预测反向索引的一篇文章</li><li>建立索引：对上一步生成的每个供给节点建立倒排索引，文档的terms即为此供给节点$(u,c)$上所有的标签。同时，在索引的正排表部分记录$s_i$和hist</li><li>查询结果：对一条输入的广告$a$，将其限定的标签条件作为查询，得到所有符合条件的供给节点的集合</li><li>估算流量：遍历上一步得到的每一个供给节点，对于某个供给节点$i$，首先计算其与该广告$a$的eCPM即$r(a,u_i,c_i)=\mu(a,u_i,c_i)$，然后根据相应的eCPM直方图hist计算a能获得的流量。</li></ol><p>![Screen Shot 2021-06-11 at 10.54.28](Screen Shot 2021-06-11 at 10.54.28.png)</p><blockquote><p>如何计算该广告$a$的eCPM？</p></blockquote><h3 id="频次控制（frequency-capping）"><a href="#频次控制（frequency-capping）" class="headerlink" title="频次控制（frequency capping）"></a>频次控制（frequency capping）</h3><p>频次，指的是某个用户在一段时间内看到某个或某组广告的曝光次数。一般来说，随着用户看到同一个创意频次多上升，点击率呈下降的趋势。广告主有时会要求控制某个用户接触到某创意的次数，以达到提高性价比的目的。</p><p>![Screen Shot 2021-06-11 at 11.03.05](Screen Shot 2021-06-11 at 11.03.05.png)</p><h1 id="受众定向核心技术"><a href="#受众定向核心技术" class="headerlink" title="受众定向核心技术"></a>受众定向核心技术</h1><h2 id="受众定向技术分类"><a href="#受众定向技术分类" class="headerlink" title="受众定向技术分类"></a>受众定向技术分类</h2><p>受众定向技术主要可以分为一下三种类型：</p><ol><li>用户标签，$t(u)$形式的标签</li><li>上下文标签，$t(c)$形式的标签</li><li>定制化标签，$t(a,u)$形式的标签</li></ol><p>![Screen Shot 2021-06-17 at 14.45.16](Screen Shot 2021-06-17 at 14.45.16.png)</p><h2 id="上下文定向"><a href="#上下文定向" class="headerlink" title="上下文定向"></a>上下文定向</h2><p>上下文信息通常可以从广告请求的参数信息（地域定向，URL定向，操作系统定向）以及上下文页面的特征标签（关键词、主题、分类）等获得。其中，关键词提取是一项基础技术。通常可以使用TF-IDF较高词作为关键词，或使用由广告商描述所得的关键词表和IDF</p><p>确定了对上下文页面打标签的方法之后，在在线广告投放时，页面标签系统需要对广告投放机查询的某一个URL快速返回其对应的标签。复杂的打标签计算时不可能马上完成的，我们通常用一种半在线（near-line）的方式实现页面抓取和打标签的逻辑。</p><h3 id="半在线抓取系统"><a href="#半在线抓取系统" class="headerlink" title="半在线抓取系统"></a>半在线抓取系统</h3><p>系统用一个缓存（如Redis）来保存每一个URL对应的标签，当在线的广告请求到来时：1.如果该请求的URL在缓存中存在，那么直接返回其对应的标签 2.如果URL在服务中不存在，当时返回空的标签集合，同时立刻向后台的抓取队列中加入此URL 3.考虑到页面内容可能会不定时更新，可以设置缓存合适的TTL（Time to Live）以达到自动更新标签。</p><blockquote><p>半在线的上下文抓取系统非常典型地解释了在线广告系统中“弱一致”的设计需求；只要保证大多数的广告决策最优正常，很少量的次优决策甚至时随机决策都是可以接受的。</p></blockquote><h3 id="文本主题挖掘"><a href="#文本主题挖掘" class="headerlink" title="文本主题挖掘"></a>文本主题挖掘</h3><p>如果把页面视为一个文档，这就是文本主题模型（topic model）的研究问题。文本主题模型有两大类别：1. 预先定义好主题集合，用监督学习进行文档到主题的映射 2. 不预先定义主题集合，但控制主题的总个数或聚类程度，用非监督的方法自动学习出主题集合以及document-topic的映射函数。</p><p>我们将问题定义如下：</p><p><img src="image-20210617150330816.png" alt="image-20210617150330816"></p><h4 id="Latent-Semantic-Analysis-LSA"><a href="#Latent-Semantic-Analysis-LSA" class="headerlink" title="Latent Semantic Analysis (LSA)"></a>Latent Semantic Analysis (LSA)</h4><p>Latent Semantic Analysis (LSA) 属于非监督方法。它的基本思路是对矩阵$X$进行奇异值分析（Singular Value Decomposition，SVD）这一过程可以表示为$X=(\alpha_1,…,\alpha_K)^T diag(s_1,…,s_K) (\beta_1,…,\beta_K)$. where $K$ is the rank of the matrix $X$. 通常使用$T\ll K$进行建模，即$X‘=(\alpha_1,…,\alpha_T)^T diag(s_1,…,s_T) (\beta_1,…,\beta_T)$,并且另其他singular value为0</p><h4 id="PLSI-Model-and-GaP-Model"><a href="#PLSI-Model-and-GaP-Model" class="headerlink" title="PLSI Model and GaP Model"></a>PLSI Model and GaP Model</h4><p>类似LSA的方法也可以通过概率建模，这就是Probabilistic Latent Semantic Indexing (PLSI)方法。</p><p>![Screen Shot 2021-06-17 at 15.09.39](Screen Shot 2021-06-17 at 15.09.39.png)</p><h4 id="LDA-Model"><a href="#LDA-Model" class="headerlink" title="LDA Model"></a>LDA Model</h4><h2 id="行为定向"><a href="#行为定向" class="headerlink" title="行为定向"></a>行为定向</h2><p>归类为$t(u)$的受众定向方式都是根据用户的历史行为进行挖掘的问题，因此统称为行为定向（Behaviorial Targeting, BT）。行为定向需要有大量的数据挖掘。这个问题可以描述为，根据用户某一段时期内的各种网络行为，将该用户映射到某个定向标签上。</p><h3 id="行为定向建模问题"><a href="#行为定向建模问题" class="headerlink" title="行为定向建模问题"></a>行为定向建模问题</h3><p>行为定向的目标是找出在某个类型的广告上eCPM相对较高的人群。如果假设在该类型的广告上点击价值近似一致，那么问题就转化为找出在该类型广告上点击率较高的人群。我们可以建模如下：</p><p><img src="image-20210617154817755.png" alt="image-20210617154817755"></p><p>我们需要比较$\lambda_t$来确定最“适合”某用户的广告标签$t$. 我们主要考虑两个方面的问题：1. 特征函数$\phi_{tn}$的选择以及 2.对应模型的训练集的组织和生成</p><blockquote><p>Note that this is a regression problem with discrete labels as inputs. GLM is one way but we can certainly use deep learning methods for regression.</p></blockquote><p>训练方法如下：</p><p><img src="image-20210617162945835.png" alt="image-20210617162945835"></p><h2 id="行为定向特征生成"><a href="#行为定向特征生成" class="headerlink" title="行为定向特征生成"></a>行为定向特征生成</h2><p>最常用的特征选择函数是将一段时间内的原始用户行为映射到确定的标签体系上，如下图所示：</p><p>![Screen Shot 2021-06-17 at 15.53.38](Screen Shot 2021-06-17 at 15.53.38.png)</p><p>将不同行为打上标签的方法如下图所示：</p><p>![Screen Shot 2021-06-17 at 16.09.08](Screen Shot 2021-06-17 at 16.09.08.png)</p><p>我们需要忽略久远的用户行为，通常有两种方法：滑动窗口法（sliding window）和时间衰减法（exponential smoothing）。图例如下：</p><p>![Screen Shot 2021-06-17 at 15.55.02](Screen Shot 2021-06-17 at 15.55.02.png)</p><p>Sliding window: $\tilde x(d) = \sum_{\delta=0}^D x(d-\delta)$</p><p>Exponential smoothing: $\tilde x(d) = \alpha \tilde x(d-1)+x(d)$ </p><blockquote><p>工程上一般使用时间和空间复杂度都较低的时间衰减法</p></blockquote><p>为了消除工作日休息日的周期性影响，时间片长度通常为7的整数。某个用户因此会对应多个样本（$h_t^{(m)},m=1,…,M$）。注意时间片长度越短，$M$越大</p><h2 id="行为定向的决策"><a href="#行为定向的决策" class="headerlink" title="行为定向的决策"></a>行为定向的决策</h2><p>在行为定向的决策过程中，只需要计算线性函数$\lambda$的值，再根据预先确定的阈值来确定某个用户是否应该被打上某个定向标签。这一过程比训练简单的多。</p><h2 id="行为定向的评测"><a href="#行为定向的评测" class="headerlink" title="行为定向的评测"></a>行为定向的评测</h2><p>一般来说，行为定向可以通过reach/CTR曲线来进行半定量的评测。我们可以通过控制$\lambda$的阈值来控制某个标签人群的量。在正常情况下，较小的人群规模应该较为精准，即对该类型广告的CTR较高；随着人群规模的扩大，该CTR也会逐渐走低。我们把标签接触到的人群规模称为reach，而reach与CTR构成的曲线是评价该标签上的定向是否合理，以及效果如何的重要依据。</p><p>![Screen Shot 2021-06-17 at 16.13.44](Screen Shot 2021-06-17 at 16.13.44.png)</p><p>该曲线的斜率越大，往往表示定向模型的鉴别力越强。由于实际中一般会将阈值设得较高，从而达到较好的定向效果，因此往往只需要关注该曲线头部的部分即可。</p><h1 id="竞价广告核心技术"><a href="#竞价广告核心技术" class="headerlink" title="竞价广告核心技术"></a>竞价广告核心技术</h1><p>竞价交易是整个在线广告市场最关键的一次产品进化，同时也带来了广告技术的迅速发展。在竞价广告中，大量中小广告主的检索规模是竞价广告系统要解决的关键问题。我们将结合广告检索的具体需求，具体讨论布尔表达式检索与相关性检索这两个场景下的算法思路。</p><p>另外，竞价广告需要对给定的$(a,u,c)$组合上的eCPM做尽可能准确的估计，由于大量中小广告主的参与，广告系统对eCPM的估计往往面临样本不足的情形。与此相关的<u>点击率预测</u>和<u>探索与利用</u>两个问题所涉及的技术是竞价广告系统通用的关键技术。点击率预测是广告系统中最重要的机器学习问题之一，由于面对的数据量巨大，如何高效地设计算法以减少迭代是优化中要考虑的关键。另外，结合广告业务的特点设计有效的特征，让点击率模型快速捕捉用户兴趣的动态信号是提高点击率预测效果的关键。</p><p>在搜索广告中，竞价标的即关键词的颗粒度很细。因此查询扩展问题至关重要。查询扩展可以看成是一个关键词推荐问题，但也需要考虑一些与广告领域相关的特点。</p><h2 id="查询扩展"><a href="#查询扩展" class="headerlink" title="查询扩展"></a>查询扩展</h2><p>查询拓展有三种主要的思路：1.基于推荐 2.基于主题模型 3.基于历史效果</p><ol><li>基于推荐：主要是使用协同过滤（Collaborative Filtering），根据用户的会话和关键词交互强度矩阵获得词向量</li><li>基于主题模型：基于语义分析获得词向量。由于考虑的不是用户意图上的相关性，效果一般弱于推荐算法</li><li>基于历史效果：如果从历史数据中发现，某些关键词对特定广告主的eCPM较高，那么应该将这些效果较好的查询租结果记录下来，作为前面两种方法的补充</li></ol><h2 id="广告检索"><a href="#广告检索" class="headerlink" title="广告检索"></a>广告检索</h2><p>广告检索系统有一些自身的特点和需求，基本的倒排索引技术在广告检索中遇到了两个新问题：</p><ol><li>广告的定向条件组合可以看成是一个由与或关系连接的布尔表达式，这样的文档显然与搜索引擎面对的BoW文档不太一样</li><li>在上下文关键词或用户标签比较丰富时，广告检索中的查询（query）可能相当长，这与搜索引擎中主要由1～4个关键词组成的查询有很大的区别</li></ol><h3 id="布尔表达式的检索"><a href="#布尔表达式的检索" class="headerlink" title="布尔表达式的检索"></a>布尔表达式的检索</h3><p>原论文在<a href="vldb09-indexing.pdf">这里</a>，其中也包含了提供相关性搜索的算法。</p><p>在受众定向的售卖方式下，一条广告文档不能再被看成是BoW，而是一些定向条件组合成的布尔表达式，举例如下：</p><p>![Screen Shot 2021-06-17 at 18.36.49](Screen Shot 2021-06-17 at 18.36.49.png)</p><p>这些boolean expression被写成了析取范式（Disjunctive Normal Form, DNF）的形式。</p><blockquote><ol><li>每个DNF都可以被分解成一个或多个交集的并（conjunction）</li><li>每个交集又可以进一步分解为一个或多个赋值集（assignment）的交</li></ol></blockquote><p><img src="image-20210617185838427.png" alt="image-20210617185838427"></p><p>当某个广告请求的定向标签满足某个Conjunction时，一定满足包含该Conjunction的所有广告，这说明只要对Conjunction建立倒排索引，并加上一层Conjunction-&gt;Ad的辅助索引即可。另外，当<code>sizeof(query)&lt;sizeof(Conjuction)</code>时，该Conjuction一定不满足该请求</p><blockquote><p>若$conj_1 = (age\in{3}\cap geo\in{北京})$，$query=(geo\in{北京})$，$conj_1$ does <strong>not</strong> match the query</p></blockquote><h3 id="相关性检索"><a href="#相关性检索" class="headerlink" title="相关性检索"></a>相关性检索</h3><p>在长查询的检索情形下，我们实际上希望的是查询与广告候选间的相似程度尽可能高，但任何一个关键词是否出现在文档中其实都不关键。这样以查询和文档间的相似程度为目标的检索问题称为相关性检索。</p><p>解决相关性检索的基本思路是在检索阶段就引入某种评价函数，并以此函数的评价结果决定返回哪些候选。评价函数的评价有两个要求：</p><ol><li>合理性，即与最终排序时使用的评价函数近似</li><li>高效性，即需要在检索阶段实现快速评价算法，否则就与在排序阶段对每个候选分别计算没有差别了</li></ol><p>研究表明，当选用线性评价函数（变量为各标签或关键词）且各权重为正时，快速检索效果最好。公式为：$score(a,c) = \sum_{t\in F(a)\cap F(c)}\alpha_t v_t(a)$. 其中$F(a)$和$F(c)$分别表示广告文档$a$和上下文特征$c$上不为零的特征集合，比如查询中的关键词。而$v_t(a)$表示$t$这一特征在$a$广告上的贡献值（如TF-IDF值）。</p><p>我们可以利用线性评价函数的两个上界加速评价过程。利用某个关键词$t$在所有文档上贡献值的上界，记为$u_t$；二是某个文档中所有关键词的上界的和，这实际上是该文档对当前查询评价函数的上界，记为$U_a$。利用这两个上界排除掉不可能胜出的候选被称为WAND (Weak AND)算法。</p><p>关于WAND算法的具体内容可以参考另一篇笔记。</p><h2 id="点击率预测"><a href="#点击率预测" class="headerlink" title="点击率预测"></a>点击率预测</h2><p>广告点击率预测的目的是广告排序，但不能套用搜索里的排序问题，因为点击率需要乘以单价才能得到最后的排序。另外，我们需要准确地预测eCPM用于出价。因此，作为各种广告系统中的一项通用技术，点击率预测更适合被建模成回归问题而不是排序问题。</p><h3 id="点击率预测模型"><a href="#点击率预测模型" class="headerlink" title="点击率预测模型"></a>点击率预测模型</h3><p>点击率预测模型是在$(a,u,c)$组合与点击的概率$\mu$之间建立函数关系，我们可以考虑的基础模型是逻辑回归（Logistic Regression, LR）$p(h|a,u,c) = \sigma((2h-1)w^Tx(a,u,c))$, where $\sigma(\cdot)$ is the sigmoid function, $w$ is the weight vector to be trained and $x(a,u,c)$ is the feature vector.</p><blockquote><p>CTR is usually small (fraction of thousands), it should affect the learning rate of the model (low gradient) (?)</p></blockquote><h3 id="点击率模型的特征"><a href="#点击率模型的特征" class="headerlink" title="点击率模型的特征"></a>点击率模型的特征</h3><p>点击率预测问题的主要挑战在于如何使模型捕捉高度动态的市场信号，以达到更准确预测的目的。这一挑战可以使用在线的模型学习算法，或者快速更新的动态特征来解决。从方法论上说， 这两种思路是对偶的，但我们将重点放在第二种思路上，因为其工程扩展上方便一些。</p><ol><li><p>静态特征</p><p>在$(a,u,c)$这三个维度上存在着人为指定或机器生成的多种标签，这些标签有的相互独立，也有的存在一定的层级关系。由于组合特征的存在，对应的模型为度也非常高。<u>直接生成所有可能的单维度特征和组合特征，选取出现频次在一定阈值以上的，将其作为LR模型的特征集合。这种特征我们称为<em>静态特征</em></u>。显然，惊太特征都是取值为0或1的特征</p></li><li><p>动态特征</p><p>在机器学习问题中，某项模型测的技术，一般都可以找到特征侧的对偶方案。<u>当某个组合特征被触发时，我们不再用1，而是采用这个组合历史上一段时间的点击率作为其特征取值。这样一来，即是是同一个$t(a,u,c)$,在不同的时间点其特征取值也是不同的。</u>这可以被理解为组合模型（canonical model）。</p><p>使用动态特征的另一个好处是可以大大减少模型的参数数目</p><p>![Screen Shot 2021-06-18 at 18.00.59](Screen Shot 2021-06-18 at 18.00.59.png)</p></li><li><p>位置偏差和CoEC</p><p>使用动态特征的一个实际上的困难是非定向因素（广告位位置，广告位类型，创意类型，操作系统等）对点击率的影响。这些都与广告决策有关但是远远超出了定向技术考虑的范围。</p><p>我们可以训练一个偏差模型（bias model）来修正这一偏差。偏差模型输出的是期望点击（expected click），它评估的是在广告质量完全随机的情况下，广告位或其他属性对应的平均点击率。训练bias model时，我们只使用偏差因素作为特征。这些特征一般与广告$a$无关。</p><p>我们可以用训练出来的模型对点击率进行归一化（normalization）$CoEC=\frac{\sum_i h_i}{\sum_i \mu_{bias}(u_i,c_i)}$. 这一指标是点击与期望点击的比值Click On Expected Click (CoEC). 这一指标可以更准确地表征某部分流量上广告投放的实际点击率水平，也比较适用于点击反馈这样的动态特征。![Screen Shot 2021-06-18 at 18.08.05](Screen Shot 2021-06-18 at 18.08.05.png)</p><p>常见的偏差特征包括：</p><ol><li>广告位位置</li><li>广告位尺寸</li><li>广告投放延迟</li><li>日期和时间</li><li>浏览器</li></ol></li><li><p>点击反馈的平滑</p><p>用CTR或者CoEC这样的点击反馈作为动态特征，我们需要平滑地统计这些值。一般可以通过加入Bayesian prior的方式如下：![Screen Shot 2021-06-18 at 18.13.06](Screen Shot 2021-06-18 at 18.13.06.png)</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Machine Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Attention is all you need</title>
    <link href="/2021/05/01/Attention-is-all-you-need/"/>
    <url>/2021/05/01/Attention-is-all-you-need/</url>
    
    <content type="html"><![CDATA[<h1 id="Model-Architecture"><a href="#Model-Architecture" class="headerlink" title="Model Architecture"></a>Model Architecture</h1><p>Most competitive neural sequence transduction models have an encoder-decoder structure. Here, the encoder maps an input sequence of symbol representations $(x_1; …; x_n$) to a sequence of continuous representations $z = (z_1; …; z_n)$. Given $z$, the decoder then generates an output sequence $(y_1; …; y_m)$ of symbols one element at a time.</p><p>The <em>Transformer</em> follows this overall architecture using <strong>stacked self-attention</strong> and <strong>point-wise, fully connected layers</strong> for both the encoder and decoder, shown in the left and right halves of Figure 1, respectively.</p><p><img src="image-20210512134051150.png" alt="image-20210512134051150"></p><h2 id="Attention"><a href="#Attention" class="headerlink" title="Attention"></a>Attention</h2><p><strong>An attention can be described as mapping a query and a set of key-value pairs to an output, where the query, keys, values and outputs are all vectors.</strong> The output is computed as a weighted sum of the values, where the weight assigned to each value is computed by a compatibility function of the query with the corresponding key.</p><p><img src="image-20210512135156753.png" alt="image-20210512135156753"></p><h3 id="Scaled-Dot-Product-Attention"><a href="#Scaled-Dot-Product-Attention" class="headerlink" title="Scaled Dot-Product Attention"></a>Scaled Dot-Product Attention</h3><p>The input consists of queries and keys of dimension $d_k$, and values of dimension $d_v$. We compute the dot products of the</p><p><em>query</em> with all <em>keys</em>, divide each by $\sqrt{d_k}$, and <strong>apply a softmax function</strong> to obtain the weights on the values.</p><p>In practice, we compute the attention function on a set of queries simultaneously, packed together into a matrix $Q$. The keys and values are also packed together into matrices $K$ and $V$ . We compute the matrix of outputs as: $\text{Attention}(Q,K,V) = \text{softmax}(\frac{QK^T}{\sqrt{d_k}})V$</p><p><img src="image-20210512141759031.png" alt="image-20210512141759031"></p><blockquote><p>Note that the matrices are <em>row-based</em>, that is, the row vectors are concatenated to form a matrix.</p></blockquote><p>We normalize the weights before passing it through a softmax because as the dimension of queries and keys $d_v$ grows, their dot product tends to get large in magnitude, pushing the softmax into saturation (i.e., small gradient).</p><h3 id="Intepretation-as-Logistic-Regression"><a href="#Intepretation-as-Logistic-Regression" class="headerlink" title="Intepretation as Logistic Regression"></a>Intepretation as Logistic Regression</h3><p>The corresponding output $v$ to specific output $q$ is given by $\sum_j \lambda_jv_j$, where $\sum_j \lambda_j = 0$. We can let $\lambda_j = p(v_j|q)$, and the attention mechanism is essential a <strong>multi-class logistic regression</strong> problem, where the input is the query $q$ and the output is the probability distribution of likelihood of the values. This can be observed by inspecting: $p(v_j|q) = \frac{-\exp(-q\cdot k_j)}{\sum_k\exp(-q\cdot k_k)}$ takes the form of logistic regression.</p><p>Hence the keys $k_j$ can be viewed as the parameters to be learnt from the logistic model. It is equivalent to a no-hidden layer neural network, where the input layer has <strong>linear activation</strong> and the output layer is a softmax layer.</p><img src="image-20210512145743785.png" alt="image-20210512145743785" style="zoom:50%;" /><h3 id="Multi-Head-Attention"><a href="#Multi-Head-Attention" class="headerlink" title="Multi-Head Attention"></a>Multi-Head Attention</h3><p>Instead of performing a single attention function with dmodel-dimensional keys, values and queries, we found it beneficial to <strong>linearly project</strong> the queries, keys and values $h$ times with different, learned linear projections to $d_k, d_k$ and $d_v$ dimensions, respectively.</p><p>Multi-head attention allows the model to jointly attend to information from different representation subspaces at different positions, which is not achievable with single attention head. The outputs from each head are concatanated to form the final output.</p><p>Mathematically: </p><p><img src="image-20210512151235365.png" alt="image-20210512151235365"></p><blockquote><p>This essentially insert a hidden layer with linear activation. The weights of each head are separately learnt.</p></blockquote><p><img src="image-20210512151106332.png" alt="image-20210512151106332"></p><h3 id="Masking"><a href="#Masking" class="headerlink" title="Masking"></a>Masking</h3><p>The docoder should be prevented from seeing downstream (future) words that have not been generated during training. To do this, we can adopt masking, which can be done by adding a look-ahead mask as follows:</p><p><img src="image-20210513004707847.png" alt="image-20210513004707847"></p><p>The masked scores is then fed into a softmax layer, zeroing out all the $-\infty$ values.</p><h2 id="Position-wise-Feed-Forward-Networks"><a href="#Position-wise-Feed-Forward-Networks" class="headerlink" title="Position-wise Feed-Forward Networks"></a>Position-wise Feed-Forward Networks</h2><p>In addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully connected feed-forward network, which is applied to each position separately and identically. This consists of two linear transformations with a ReLU activation in between (i.e., <strong>one hidden layer</strong>).</p><h2 id="Embedding-and-Softmax"><a href="#Embedding-and-Softmax" class="headerlink" title="Embedding and Softmax"></a>Embedding and Softmax</h2><p><code>Using the output embedding to improve language models</code></p><h2 id="Positional-Encoding-（-）"><a href="#Positional-Encoding-（-）" class="headerlink" title="Positional Encoding （*）"></a>Positional Encoding （*）</h2><p><strong>Since the model contains no recurrence and no convolution</strong>, in order for the model to make use of the order of the sequence, we must inject some information about the relative or absolute position of the tokens in the sequence. To this end, we add “positional encodings” to the input embeddings at the bottoms of the encoder and decoder stacks. The positional encodings have the same dimension $d_{model}$ as the embeddings, so that the two can be summed. In this work, we use sine and cosine functions of different frequencies:</p><p><img src="image-20210512152746147.png" alt="image-20210512152746147"></p><h1 id="Why-Self-Attention"><a href="#Why-Self-Attention" class="headerlink" title="Why Self-Attention"></a>Why Self-Attention</h1><h1 id="Training"><a href="#Training" class="headerlink" title="Training"></a>Training</h1><h2 id="Regularization"><a href="#Regularization" class="headerlink" title="Regularization"></a>Regularization</h2><p>We employ three types of regularization during training:</p><ol><li><p><strong>Residual Dropout</strong>: We apply dropout to the output of each sub-layer, before it is added to the sub-layer input and normalized. In addition, <em>we apply dropout to the sums of the embeddings and the positional encodings in both the encoder and decoder stacks.</em> For the base model, we use a rate of $P_{drop} = 0.1$.</p></li><li><p><strong>Label Smoothing</strong>: During training, we employed label smoothing of value $ls = 0.1$. This hurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.</p></li></ol><h1 id="Results"><a href="#Results" class="headerlink" title="Results"></a>Results</h1><h1 id="The-Animated-Transformer"><a href="#The-Animated-Transformer" class="headerlink" title="The Animated Transformer"></a>The Animated Transformer</h1><p>See this <a href="https://www.youtube.com/watch?v=4Bdc55j80l8">video</a> for animation. The first 30 seconds of the video illustrates how a transformer works and what it means to <em>attend to</em> different words. Fast forward to [10:00] to see how the decoder does. [11:00] explains how masking works.</p>]]></content>
    
    
    
    <tags>
      
      <tag>Machine Learning</tag>
      
      <tag>NLP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>A Tour of C++</title>
    <link href="/2020/12/01/A-tour-of-Cpp/"/>
    <url>/2020/12/01/A-tour-of-Cpp/</url>
    
    <content type="html"><![CDATA[<p>Excerpts from the book <em>A Tour of C++</em></p><h1 id="Modularity"><a href="#Modularity" class="headerlink" title="Modularity"></a>Modularity</h1><h2 id="Namespaces"><a href="#Namespaces" class="headerlink" title="Namespaces"></a>Namespaces</h2><p><em>namespaces</em> is a mechanism for expressing that some declarations belong together and that their names shouldn’t clash with other names. For example:</p><pre><code>namespace My_code &#123;    class complex &#123;        // ..    &#125;;&#125;int My_code::main()&#123;    complex z &#123;1, 2&#125;;    // ...&#125;int main() &#123;    return My_code::main();&#125;</code></pre><p>Here the <code>main</code> and <code>complex</code> class are not to be confused with the global <code>main</code> and std <code>complex</code>. </p><h2 id="Error-Handling"><a href="#Error-Handling" class="headerlink" title="Error Handling"></a>Error Handling</h2><h3 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h3><pre><code>double&amp; Vector::operator[](int i)&#123;    if (i&lt;0 || size()&lt;i)        throw out_of_range&#123;&quot;Vector::operator[]&quot;&#125;;    return elem[i];&#125;</code></pre><p>The <code>throw</code> transger control to a handler for exceptions of type <code>out_of_range</code> in some functions that directly or indirectly called <code>Vector::operator[]()</code>. It will exit scopes and functions as needed to get back to a caller that has <em>expressed interests in handling that kind of exception</em>, invoking deconstructors along the way as needed. For example:</p><pre><code>void f(Vector&amp; v)&#123;    try &#123;        v[v.size()] = 7; // beyond the end of v    &#125;    catch (out_of_range) &#123;        // ...handle range error...    &#125;&#125;</code></pre><p>We put code for which we are interested in handling exceptions into a <code>try</code>-block. The <code>out_of_range</code> type is defined in the standard library (in <code>&lt;stdexcept&gt;</code>).</p><p>A function that should never throw an exception can be declared <code>noexcept</code>. </p><pre><code>void user(int sz) no except&#123;    Vector v(sz);    iota(&amp;v[0],&amp;v[sz],1)    // ...&#125;</code></pre><p>If <code>user()</code> still throws, the standard-library function <code>terminate()</code> is called to immediately terminate the program.</p><h2 id="static-assert"><a href="#static-assert" class="headerlink" title="static_assert"></a>static_assert</h2><p>The <code>static_assert</code> mechanism can be used for anything that can be expressed in terms of constant expressions. That is, expressions that only involves values computed during compliation (in contrast to runtime).</p><pre><code>constexpr double C = 299792.458;const double local_max = 160.0/(60*60);static_assert(local_max &lt; C, &quot;can&#39;t go that fast&quot;);</code></pre><p>In general, <code>static_assert(A,S)</code> prints <code>S</code> as a compiler error message if <code>A</code> is not <code>true</code></p><h1 id="Classes"><a href="#Classes" class="headerlink" title="Classes"></a>Classes</h1><p>Here, we only consider three basic kinds of classes. They are:</p><ol><li>Concrete classes</li><li>Abstract Classes</li><li>Classes in class hierarchies</li></ol><h2 id="Concrete-Types"><a href="#Concrete-Types" class="headerlink" title="Concrete Types"></a>Concrete Types</h2><p>The basic idea of <em>concrete classes</em> is that they behave “just like built-in types”. The defining characteristic of a concrete type is that its representation is part of its definition. </p><p>To increase flexibility, a concrete type can keep major parts of its representation on the free store (dynamic memory, heap) and access them through the part stored in the class object itself.</p><h3 id="A-Container-Example"><a href="#A-Container-Example" class="headerlink" title="A Container Example"></a>A Container Example</h3><p>A container is an object holding a collection of elements. </p><pre><code>class Vector &#123;private:    double* elem;    int sz;public:    Vector(int s):elem&#123;new double[s]&#125;, sz&#123;s&#125; &#123;        for (int i=0; i!=s; i++)            elem[i]=0;    &#125;    ~Vector() &#123; delete[] elem; &#125;    double&amp; operator[](int i);    int size() const;&#125;;</code></pre><p><code>~Vector()</code> is a <em>destructor</em>. The function will be called when the life cycle of the object ends.</p><h3 id="Initializing-Containers"><a href="#Initializing-Containers" class="headerlink" title="Initializing Containers"></a>Initializing Containers</h3><pre><code>class Vector &#123;public:    Vector(std::initializer_list&lt;double&gt;);    void push_back(double);&#125;;</code></pre><p>The <code>push_back()</code> is useful for input of arbitrary numbers of elements. For example:</p><pre><code>Vector read(istream&amp; is)&#123;    Vector v;    for (double d; is&gt;&gt;d;)        v.push_back(d)    return v;&#125;</code></pre><p>The input loop is terminated by an end-of-file. The initializer-list constructor might be defined like this:</p><pre><code>Vector::Vector(std::initializer_list&lt;double&gt; lst)    : elem&#123;new double[lst.size()&#125;, sz&#123;static_cast&lt;int&gt;(lst.size())&#125;&#123;    copy(lst.begin(),lst.end(),elem);&#125;</code></pre><p>A <code>static_cast</code> does not check the value it is converting; the programmer is trusted to use it correctly.</p><h2 id="Abstract-Type"><a href="#Abstract-Type" class="headerlink" title="Abstract Type"></a>Abstract Type</h2><p>An <em>abstract type</em> is a type that completely that completely insulates a user from implementation details. To do that, we decouple the interface from the representation and give up genuine local variables. Since we don’t know anything about the representation of an abstract type (not even its size), we must allocate objects on the free store and access them through references or pointers.</p><pre><code>class Container &#123;public:    virtual double&amp; operator[](int) = 0;    virtual int size() const = 0;    virtual ~Container() &#123;&#125;&#125;;</code></pre><p>This class is a pure interface to specific containers defined later. The word <code>virtual</code> means <em>may be redefined later in a class derived from this one.</em> A class derived from <code>Container</code> provides an implementation for the <code>Container</code> interface. The <code>= 0</code> syntax says the function is <em>pure virtual</em>; that is, some class derived from <code>Container</code> <strong>must</strong> define the function.Thus, it is not possible to define an object that is just a <code>Container</code>.</p><p>A class with a pure virtual function is called an <em>abstract class</em>. The <code>Container</code> can be used like this to display <em>polymorphic</em></p><pre><code>void use(Container&amp; c)&#123;    const int sz = c.size();    for (int i=0; i!=sz; i++)        cout &lt;&lt; c[i] &lt;&lt; &#39;\n&#39;;&#125;</code></pre><p>Note how <code>use()</code> is completely ignorance of implementation details. It uses <code>size()</code> and <code>[]</code> without any idea of exactly which type provides their implementation.</p><p><code>Container</code> does not have a constructor, <strong>which is common</strong> for abstract classes. Because it does not have any data to initialize. On the other hand, <code>Container</code> does have a destructor and that destructor is <code>virtual</code>, <strong>which is common</strong> for abstract classes.</p><p>A container that implements the functions required by the interface could use the concrete class <code>Vector</code></p><pre><code>class Vector_container : public Container &#123;    Vector v;public:    Vector_container(int s): v(s) &#123;&#125;    ~Vector_container() &#123;&#125;    double&amp; operator[](int i) &#125;;</code></pre><h3 id="Virutal-Functions"><a href="#Virutal-Functions" class="headerlink" title="Virutal Functions"></a>Virutal Functions</h3><p>The compiler will convert the name of a virtual function into an index into a <em>table of pointers to functions</em>. The table is usuallly called <em>virtual function table</em> or simply the <code>vtbl</code>. Each class with virtual functions has its own <code>vtbl</code> identifying its virtual functions.</p><p><img src="fig1.png"></p><p>This mechanism allows polymorphism and decision at runtime. The overhead is essentially a table and can be made almost as efficient as the “normal function call”.</p><h3 id="Explicit-Overriding"><a href="#Explicit-Overriding" class="headerlink" title="Explicit Overriding"></a>Explicit Overriding</h3><p>A function in a derived class overrides a virtual function in a base class if that function has exactly the same <em>name and type</em>. In large hierachies, it’s not always obvious if overriding is intended. To avoid confusin in such cases, a programmer can explicitly state that a function is meant to override. For example:</p><pre><code>class Smiley : public Circle &#123;public:    Smiley(Point p, int r) : Circle&#123;p,r&#125;, mouth&#123;nullptr&#125; &#123;&#125;    ~Smiley() &#123;        delete mouth;        for (auto p : eyes)            delete p;    &#125;        void move(Point to) override;    void draw() const override;    void rotate(int) override;    void add_eye(Shape* s) &#123; eyes.push_back(s); &#125;    void set_mouth(Shape* );    virtual void wink(int i);private:    vector&lt;Shape*&gt; eyes;    Shape* mouth;&#125;;</code></pre><p>Now the compiler will complain if you are to mis-spell <code>move</code> as <code>mve</code></p><h3 id="Benefits-from-Hierarchies"><a href="#Benefits-from-Hierarchies" class="headerlink" title="Benefits from Hierarchies"></a>Benefits from Hierarchies</h3><p>A class hierachy offers two kinds of benefits:</p><ol><li><p><em>Interface inheritance</em>: The base class acts as an interface for the derived class. Such base classes are often abstract.</p></li><li><p><em>Implementation inheritance</em>: A base class provides functions or data that simplifies the implementation of a derived class. Such base classes often have their data members and constructors.</p></li></ol><p>We tend to define concrete classes as local variables much like built-in types. But tend to allocate classes in class hierarchies using <code>new</code>, and access them through pointer or references. This is because we would like to use <code>delete</code> (i.e, explicitly invoking the derived class’s deconstructor) to manage resources.</p><h3 id="Hierarchy-Navigation"><a href="#Hierarchy-Navigation" class="headerlink" title="Hierarchy Navigation"></a>Hierarchy Navigation</h3><p>We can use <code>dynamic_cast</code> to cast a base type to its derived type. For example:</p><pre><code>Shape* ps &#123;read_shape(cin)&#125;;if (Smiley* p = dynamic_cast&lt;Smiley*&gt;(ps)) &#123;    // ... is a pointer pointing to Smiley&#125;else &#123;    // ... not a Smiley, try something else&#125;</code></pre><p>After casting, we can use the functions that is only defined in <code>Smiley</code> but not in <code>Shape</code>. If <code>dynamic_cast</code> fails it will return a <code>nullptr</code>.</p><p>When a different type is unacceptable, we can simply <code>dynamic_cast</code> to a referene type. If the object is not of the expected type, <code>bad_cast</code> is thrown.</p><pre><code>Shape* ps &#123;read_shape(cin)&#125;;Smiley&amp; r &#123;dynamic_cast&lt;Smiley&amp;&gt;(*ps)&#125;;</code></pre><h3 id="Avoiding-Resource-Leaks"><a href="#Avoiding-Resource-Leaks" class="headerlink" title="Avoiding Resource Leaks"></a>Avoiding Resource Leaks</h3><p>We note that the owner of a container of <code>Shape</code> pointers might not <code>delete</code> the objects pointed to.</p><p>One solution is to return a standard-library <code>unique_ptr</code> rather than a “naked pointer” and store <code>unique_ptr</code>s in the container.</p><pre><code>unique_ptr&lt;Shape&gt; read_shape(istream&amp; is)&#123;    switch(k) &#123;    case Kind::circle:        // read circle data into p and r        return unique_ptr&lt;Shape&gt;&#123;new Circle&#123;p,r&#125;&#125;;    &#125;    // ...&#125;void user()&#123;    vector&lt;unique_ptr&lt;Shape&gt;&gt; v;    while (cin)        v.push_back(read_shape(cin));    draw_all(v);    rotate_all(v,45);&#125; // all shapes implicitly destroyed</code></pre><p>Now the object is owned by the <code>unique_ptr</code> and will <code>delete</code> the object when it’s no longer needed, that is, when its <code>unique_ptr</code> goes out of scope.</p><h2 id="Copy-and-Move"><a href="#Copy-and-Move" class="headerlink" title="Copy and Move"></a>Copy and Move</h2><p>By default, objects can be copied. That is true for objects of user-defined types as well as for built-in types. The default meaning of copy is memberwise copy: <strong>copy each member</strong>.</p><h3 id="Copying-Containers"><a href="#Copying-Containers" class="headerlink" title="Copying Containers"></a>Copying Containers</h3><p>When a class is a <em>resource handle</em> - that is, when the class is responsible for an object accessed through a pointer - the default memberwise copy is a disaster.</p><pre><code>void bad_copy(Vector v1)&#123;    Vector v2 = v1;    v1[0] = 2;     // v2[0] is also 2!    v2[1] = 3;    // v1[1] is also 3!&#125;</code></pre><p><img src="fig2.png"></p><p>Copying of an object of a class is defined by two members: a <em>copy constructor</em> and a <em>copy assignment</em></p><pre><code>class Vector &#123;private:    double* elem    int sz;public:    Vector(int s);    ~Vector() &#123; delete[] elem; &#125;    Vector(const Vector&amp; a);    Vector&amp; operator=(const Vector&amp; a);    double&amp; operator[](int i);    const double&amp; operator[](int i) const;    int size() const;&#125;;</code></pre><p>A situable definition of a copy constructor for <code>Vector</code> allocates the space for the required number of elements then copies the elements into it. </p><pre><code>Vector::Vector(const Vector&amp; a)    :elem(new double[a.size]),    sz&#123;a.sz&#125;&#123;    for (int i=0; i!=sz; i++)        elem[i] = a.elem[i]&#125;</code></pre><p>And we need a copy assignment in addition to the copy constructor.</p><p><img src="fig3.png"></p><h3 id="Moving-Containers"><a href="#Moving-Containers" class="headerlink" title="Moving Containers"></a>Moving Containers</h3><p>We can control copying by defining a copy constructor and copy assignment, but copying can be costly for large container. We avoid the cost of copying when we pass objects to a function by using references, but we can’t return a reference to a local object as the result ( the local object would be destroyed by the time the caller got a chance to look at it). Consider:</p><pre><code>Vector operator+(const Vector&amp; a, const Vector&amp; b)&#123;    if (a.size()!=b.size())        throw Vector_size_mismatch&#123;&#125;;    Vector res(a.size());    for (int i=0; i!=a.size();++i)        res[i]=a[i]+b[i];    return res;&#125;</code></pre><p>Returning from a <code>+</code> involves copying the result out of the local variable into some place where the caller can access it. We might use this <code>+</code> like</p><pre><code>Vector r;r = x + y + z;</code></pre><p>This would be copying a <code>Vector</code> at least twice (one for each use of <code>+</code>). In these cases, we don’t want to copy but to <strong>move the object out of a function</strong>. This can be done as follows:</p><pre><code>class Vector &#123;    Vector(Vector&amp;&amp; a);        // move constructor    Vector&amp; operator=(Vector&amp;&amp; a);    // move assignment&#125;;</code></pre><p>Given that definition, the compiler will choose the <em>move constructor</em> to implement the transfer of the return value out of the function. This means <code>r=x+y+z</code> will involve no copying of <code>Vector</code>s.</p><p>As is typical, <code>Vector</code>‘s move constructor is trivial to define.</p><pre><code>Vector::Vector(Vector&amp;&amp; a)    :elem&#123;a.elem&#125;,    sz&#123;a.sz&#125;&#123;    a.elem = nullptr; // now a has no elements    a.sz = 0;&#125;// after this, a&#39;s destructor is likely to be called, we// set the handle to nullptr to avoid deleting resources</code></pre><p>The <code>&amp;&amp;</code> means <strong>rvalue reference</strong> and is a reference to which we can bind an rvalue. <em>rvalue</em> is intended to complement <em>lvalue</em>, which roughly means “something that can appear on the left-hand side of an assignment”. So rvalue is a value that <strong>you can’t assign to</strong>, such as an integer returned by a function call. Thus, an rvaule is a reference to something that nobody else can assign to, so that we can safely “steal” its value.</p><blockquote><p>The move operation is applied when an rvalue reference is used as an initializer or as the right-hand side of an assignment.</p></blockquote><p>Where the programmer knows that a value will not be used again, but the compiler can’t be expected to be smart enough to figure that out, the programmer can be specific:</p><pre><code>Vector f()&#123;    Vector x(1000);    Vector y(1000);    Vector z(1000);    z = x;             // we get a copy    y = std::move(x);     // we get a move    return z;         // we get a move&#125;</code></pre><p>The standard-library function <code>move()</code> returns doesn’t actually move anything, instead it returns an <strong>rvalue reference</strong> of its argument, much like a typecast.</p><p>Just before return we have:</p><p><img src="fig4.png"></p><p>A nice <a href="https://www.cprogramming.com/c++11/rvalue-references-and-move-semantics-in-c++11.html">reference</a> for rvalue and move. In short, remember we are ‘stealing’ the pointer and the object which get stolen needs set its pointer to <code>nullptr</code> because its destructor will soon be called.</p><h3 id="Essential-Operations"><a href="#Essential-Operations" class="headerlink" title="Essential Operations"></a>Essential Operations</h3><p>Constructor, destructor, copy and move operations for a type are not logically separate. We must define them as a matched set or suffer logical or performance problems. If a class <code>X</code> has a destructor that performs a nontrivial task, such as free-store deallocation or lock release, the class is likely to need the full complement of functions:</p><pre><code>class X &#123;public:    X(sometype);         // &quot;ordinary constructor&quot;    X();             // default constructor    X(const X&amp;);        // copy constructor    X(X&amp;&amp;);            // move constructor    X&amp; operator=(const X&amp;);    // copy assignment: clean up target and copy     X&amp; operator=(X&amp;&amp;);    // move assignment: clean up target and move    ~X();            // deconstructor: clean up&#125;;</code></pre><p>We can be explicit about generating default implementations as follows:</p><pre><code>class Y &#123;public:    Y(sometype);    Y(const Y&amp;) = default;    // I do want the default copy constructor (member-wise assignment)    Y(Y&amp;&amp;) = default;    // and the default move constructor&#125;;</code></pre><blockquote><p>If you are explicit about some defaults, other default definitions will not be generated. It is good practice to be explicit if the class have reference or pointer to some resources</p></blockquote><p>A consructor taking a single argument defines a conversion from its argument type. For example, <code>complex</code> provides a constructor for a <code>double</code>:</p><pre><code>complex z1 = 3.14;    // z1 becomes &#123;3.14, 0.0&#125;complex z2 = z1*2;     // z2 becomes &#123;6.28, 0.0&#125;</code></pre><p>But this is not always desired. For example, <code>Vector</code> provides a constructor from an <code>int</code></p><pre><code>Vector v1 = 7; // OK: v1 has 7 elements</code></pre><p>But this is not a desired behavior. And the standard-library <code>vector</code> does not allow this <code>int</code>-to-<code>vector</code> conversion. We can avoid this problem by saying only <strong>explicit construction</strong> is allowed. That is,</p><pre><code>class Vector &#123;public:    explicit Vector(int s);    // no implicit conversion from int to Vector&#125;;</code></pre><p>This gives us:</p><pre><code>Vector v1(7);        // OKVector v2 = 7;        // error: no implicit conversion allowed</code></pre><p>It turns out more types are like <code>Vector</code> so it’s usually good practice to use <code>explicit</code> for constructor with a single argument unless there is a good reason not to.</p><h3 id="Resource-Management"><a href="#Resource-Management" class="headerlink" title="Resource Management"></a>Resource Management</h3><p>//ADVANCED TOPIC CAN’T REALLY UNDERSTAND…</p><h3 id="Suppressing-Operations"><a href="#Suppressing-Operations" class="headerlink" title="Suppressing Operations"></a>Suppressing Operations</h3><p>Using the default copy or move for a class in a hierarchy is typically a disaster: given only a pointer to a base, we simply don’t know what members the derived class has. So we can’t know how to copy them. So, the best thing to do is usually to <em>delete</em> the default copy and move operations, that is, to eliminate the default definitions of those two operations.</p><pre><code>class Shape &#123;public:    Shape(const Shape&amp;) =delete;        // no copy ops    Shape&amp; operator=(const Shape&amp;) =delete;    Shape(Shape&amp;&amp;) =delete;            // no move ops    Shape&amp; operator=(Shape&amp;&amp;) = delete;        ~Shape();&#125;;</code></pre><p>A move operation is <em>not</em> implicitly generated for a class where the user has explicitly declared a destructor, so you get a compiler error if you try to move a <code>Shape</code>.</p><p>The <code>=delete</code> mechanism is general and can be used to suppress any operation.</p><h1 id="Templates"><a href="#Templates" class="headerlink" title="Templates"></a>Templates</h1><p>We can generalize our vector-of-doubles type to a vector-of-anything type by making it a <code>template</code> and replacing the specific type <code>double</code> with a parameter.</p><pre><code>template&lt;typename T&gt;    class Vector &#123;private:    T* elem;    int sz;public:    explicit Vector(int s);    ~Vector() &#123; delete[] elem; &#125;    // ...copy and move operations    T&amp; operator[](int i)    const T&amp; operator[](int i) const;    int size() const &#123; return sz; &#125;&#125;;</code></pre><blockquote><p>C++ allows you to overload function just by const-ness. When the object is not modified by const, non-const version will be used, and vice versa.</p></blockquote><p>Note that <code>template&lt;class T&gt;</code> is equivalent to <code>template&lt;typename T&gt;</code>. The function can be defined similarly.</p><pre><code>template&lt;typename T&gt;Vector&lt;T&gt;::Vector(int s)&#123;    if (s&lt;0)        throw Negative_size&#123;&#125;;    elem = new T[s];    sz = s;&#125;</code></pre><p>Remembering the <code>template&lt;typename T&gt;</code> prefix.</p><p>To support range-<code>for</code> loop for our vector, we must define suitable <code>begin()</code> and <code>end()</code> functions:</p><pre><code>template&lt;typename T&gt;T* begin(Vector&lt;T&gt;&amp; x)&#123;    return x.size() ? &amp;x[0] : nullptr;&#125;template&lt;typename T&gt;T* end(Vector&lt;T&gt;&amp; x)&#123;    return begin(x)+x.size(); // pointer to one-past-last element&#125;</code></pre><p>Given those, we can write:</p><pre><code>void f2(Vector&lt;string&gt;&amp; vs)&#123;    for (auto&amp; s : vs)        cout &lt;&lt; s &lt;&lt; &#39;\n&#39;;&#125;</code></pre><p>Templates are a compile-time mechansm, so their use incurs no runtime overhead compared to hand-crafted code.</p><p>In addition to type arguments, a template can take value arguments. For example:</p><pre><code>template&lt;typename T, int N&gt;struct Buffer &#123;    using value_type = T;    constexpr int size() &#123; return N; &#125;    T[N];    /// &#125;;</code></pre><h2 id="Function-Objects"><a href="#Function-Objects" class="headerlink" title="Function Objects"></a>Function Objects</h2><p>We can define <em>function object</em> (somtimes called a <em>functor</em>), which is objects that can be called like functions. For example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Less_than</span> &#123;</span><br><span class="hljs-keyword">const</span> T val;<span class="hljs-comment">// value to compare against</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Less_than</span>(<span class="hljs-keyword">const</span> T&amp; v):<span class="hljs-built_in">val</span>(v) &#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">const</span> T&amp; x)</span> <span class="hljs-keyword">const</span> </span>&#123;<span class="hljs-keyword">return</span> x&lt;val;&#125; <span class="hljs-comment">// call operator</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>The function called <code>operator()</code> implements the “function call”, “call” or “application” operator <code>()</code>. We can define name variables of type <code>Less_than</code> for some argument type:</p><pre><code>Less_than&lt;int&gt; lti &#123;42&#125;;        // lti(i) will compare i to 42 using (i&lt;42)Less_than&lt;string&gt; lts &#123;&quot;Backus&quot;&#125;;    // lts(s) will compare s to &quot;Backus&quot; using &lt;</code></pre><p>We can call such an object, just as we call a function</p><pre><code>void fct(int n, const string&amp; s)&#123;    bool b1 = lti(n);    bool b2 = lts(s);    // ...&#125;</code></pre><p>Such function objects are widely used as arguments to algorithms. For example, we can count the occurrences of values for which a predicate returns <code>true</code>:</p><pre><code>template&lt;typename C, typename P&gt;int count(const C&amp; c, P pred)&#123;    int cnt = 0;    for (const auto&amp; x: c)        if (pred(x))            ++cnt;    return cnt;&#125;</code></pre><p>A <em>predicate</em> is something that we can invoke to return <code>true</code> or <code>false</code>. For example:</p><pre><code>void f(const Vector&lt;int&gt;&amp; vec, const list&lt;string&gt;&amp; lst, int x, const string&amp; s)&#123;    cout &lt;&lt; &quot;number of values less than &quot; &lt;&lt; x         &lt;&lt; &quot;: &quot; &lt;&lt; count(vec, Less_than&lt;int&gt;&#123;x&#125;)         &lt;&lt; &quot;\n&quot;;    cout &lt;&lt; &quot;number of values less than &quot; &lt;&lt; s         &lt;&lt; &quot;: &quot; &lt;&lt; count(vec, Less_than&lt;string&gt;&#123;s&#125;)         &lt;&lt; &quot;\n&quot;;&#125;</code></pre><p>where <code>Less_than&lt;int&gt;&#123;x&#125;</code> constructs an object for which the call operator compares to the <code>int</code> called <code>x</code>; They carry the value to be compared against with them. We don’t have to write a separate function for each value (and each type).</p><p>Function objects used to specify the meaning of key operations of a general algorithm are often referred to as <em>policy objects</em>.</p><p>We can also use a <em>lambda expression</em> to generate a function object exactly like <code>Less_than&lt;int&gt;&#123;x&#125;</code></p><pre><code>void f(const Vector&lt;int&gt;&amp; vec, const list&lt;string&gt;&amp; lst, int x, const string&amp; s)&#123;    cout &lt;&lt; &quot;number of values less than &quot; &lt;&lt; x         &lt;&lt; &quot;: &quot; &lt;&lt; count(vec, [&amp;](int a)&#123; return a&lt;x;&#125;)         &lt;&lt; &quot;\n&quot;;    cout &lt;&lt; &quot;number of values less than &quot; &lt;&lt; s         &lt;&lt; &quot;: &quot; &lt;&lt; count(vec, [&amp;](const string&amp; a) &#123; return a&lt;s; &#125;)         &lt;&lt; &quot;\n&quot;;&#125;</code></pre><p>The <code>[&amp;]</code> is a <em>capture list</em> specifying that local names used (such as <code>x</code>) will be accessed through references. Capture nothing is <code>[]</code>, capture all local names used by references is <code>[&amp;]</code>, and capture all local names used by value is <code>[=]</code></p><blockquote><p>Do not abuse lambda expression. If the expression is too complicated, do name the operation to be more clear about its purpose </p></blockquote><p>Function objects (in particular, lambdas) can help by allowing us to separate the traversal of the container from the specification of what is to be done with each element.</p><pre><code>template&lt;typename C, typename Oper&gt;void for_all(C&amp; c, Oper op)     // assume that C is a container of pointers&#123;    for (auto&amp; x : c)        op(*x)        // pass op() a reference to each element pointed to &#125;</code></pre><p>Now, we can write a version of <code>user()</code>without writing a set of <code>_all</code> functions:</p><pre><code>void user()&#123;    vector&lt;unique_ptr&lt;Shape&gt;&gt; v;    while(cin)        v.push_back(read_shape(cin));    for_all(v,[](Shape&amp; s)&#123; s.draw() &#125;;    for_all(v,[](Shape&amp; s)&#123; s.rotate(45) &#125;;&#125;</code></pre><p>The lambda doesn’t have to care exactly how the objects are stored in the container because a reference to <code>Shape</code> is passed. Those <code>for_all()</code> calls would still work if <code>v</code> is changed to a <code>vector&lt;Shape*&gt;</code></p><h2 id="Variadic-Templates"><a href="#Variadic-Templates" class="headerlink" title="Variadic Templates"></a>Variadic Templates</h2><p>A template can be defined to accept an arbitrary number of arguments of arbitrary types. Such a template is called a <em>variadic template</em>. For example:</p><pre><code>void f() &#123;&#125;        // do nothing if no argument giventemplate&lt;typename T, typename... Tail&gt;void f(T head, Tail... tail)&#123;    g(head);     // do something to head    f(tail...);    // try again with tail&#125;</code></pre><p>The key to implementing a variadic template is to note that when you pass a list of arguments to it, you can separate the first argument from the rest. Here, we do something to the first argument (the <code>head</code>) and then recursively call <code>f()</code> with the rest of the arguments (the <code>tail</code>). THe ellipsis, <code>...</code>, is used to indicate “the rest” of a list. Eventually, <code>tail</code> will become empty and we need a separate function to deal with that.</p><p>We can call <code>f()</code> like this:</p><pre><code>int main()&#123;    cout &lt;&lt; &quot;first: &quot;;    f(1,2.2,&quot;hello&quot;);    cout &lt;&lt; &quot;\nsecond:&quot;;    f(0.2,&#39;c&#39;,&quot;yuck!&quot;,0,1,2);    cout &lt;&lt; &quot;\n&quot;;&#125;</code></pre><p>Obviously, you can make <code>g(head)</code> do whatever you please.</p><h2 id="Aliases"><a href="#Aliases" class="headerlink" title="Aliases"></a>Aliases</h2><p>It is very common for a prameterized type to provide an alias for types related to their template arguments. For example:</p><pre><code>template&lt;typename T&gt;class Vector &#123;public:     using value_type = T;    // ...&#125;;</code></pre><p>In fact, every standard-library container provides a <code>value_type</code> as the name of its value type. This allows us to write code that will work for every container that follows this convention. For example:</p><pre><code>template&lt;typename C&gt;using Element_type = typename C::value_type; // the type of C&#39;s elementtemplate&lt;typename Container&gt;void algo(Container&amp; c)&#123;    Vector&lt;Element_type&lt;Container&gt;&gt; vec;    // ...&#125;</code></pre><p>The aliasing mechanism can be used to define a new template by binding some or all template arguments. For example:</p><pre><code>template&lt;typename Key, typename Value&gt;class Map &#123;    // ...&#125;;template&lt;typename Value&gt;using String_map = Map&lt;string, Value&gt;;String_map&lt;int&gt; m;    // m is a Map&lt;string, int&gt;</code></pre><h2 id="Template-Compilation-Model"><a href="#Template-Compilation-Model" class="headerlink" title="Template Compilation Model"></a>Template Compilation Model</h2><p>The compiler generates the code for the specific types only when you instantiates the object with specific types. For example,</p><pre><code>template&lt;typename T&gt;class Foo&#123;public:    T&amp; bar()    &#123;        return subject;    &#125;private:    T subject;&#125;;</code></pre><p>as soon as you have the following instantiations</p><pre><code>Foo&lt;int&gt;  fooInt;</code></pre><p>You will <strong>effectively generate</strong> the same linkable code as you would have defined classes like</p><pre><code>class FooInt&#123;public:    int&amp; bar()    &#123;        return subject;    &#125;private:    int subject;&#125;;</code></pre><p>And instantiate the variable like</p><pre><code>FooInt foInt;</code></pre><p>A consequence is that <strong>the template definitions need to be seen with the header (included) files</strong>. Otherwise the compiler won’t be able to generate the code.</p><h1 id="Library-Overview"><a href="#Library-Overview" class="headerlink" title="Library Overview"></a>Library Overview</h1><p>The facilities provided by the standard library can be classified as:</p><ol><li>Run-time language support (for allocation and run-time type information)</li><li>The C standard library </li><li>Strings (with support for international character sets and localization)</li><li>Support for regular expression matching</li><li>I/O streams is an extensible framework for input and output to which users can add their own types, streams, buffering strategies, locales and character sets</li><li>A framework of containers (such as <code>vector</code> and <code>map</code>) and algorithms (such as <code>find()</code>, <code>sort()</code>, and <code>merge()</code>)</li><li>Support for numerical computation (such as standard mathematical functions, complex numbers, vectors with arithmetic operations, and random number generators)</li><li>Support for concurrent programming, including <code>threads</code> and locks </li><li>Utilities to support template metaprogramming</li><li>“Smart pointers” for resource management (<code>unique_ptr</code> and <code>shared_ptr</code>) and an interface to garbage collector</li><li>Special-purpose container, such as <code>array</code>, <code>bitset</code> and <code>tuple</code></li></ol><h1 id="Strings-and-Regular-Expressions"><a href="#Strings-and-Regular-Expressions" class="headerlink" title="Strings and Regular Expressions"></a>Strings and Regular Expressions</h1><h2 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h2><p>You can concatenate a <code>string</code> with a <em>string literral</em>, a <em>C-style string</em> or <em>a character</em> to a string using <code>+</code> or <code>+=</code> operator. The standard <code>string</code> has a move constructor so returning even long <code>string</code>s by value is efficient.</p><p>A <code>string</code> is mutable. In addition to <code>=</code> and <code>+=</code>, subscripting <code>[]</code>, and substring operations are supported. Among other useful features, it provides the ability to manipulate substrings. For example:</p><pre><code>string name = &quot;Niels Stroustrup&quot;;void m3()&#123;    string s = name.substr(6,10);    // s = &quot;Stroustrup&quot;    name.replace(0,5,&quot;nicholas&quot;);    // name becomes &quot;nicholas Stroustrup&quot;    name[0] = toupper(name[0]);    // name becomes &quot;nicholas Stroustrup&quot;&#125;</code></pre><p>The <code>substr()</code> operation returns a <code>string</code> that is a copy of the substring indicated by its arguments. The first argument is an index and the second a length.</p><p>The <code>replace()</code> operation replaces a substring with a value. If you need a <em>C-style</em> string, you can use <code>string::c_str()</code>, but this is READ ONLY.</p><h2 id="string-Implementation"><a href="#string-Implementation" class="headerlink" title="string Implementation"></a><code>string</code> Implementation</h2><p><code>string</code> is usually implemented using the <em>short-string optimization</em>. That is, short string values are kept in the <code>string</code> object itself and only longer strings are placed on free store. Consider:</p><pre><code>string s1 &#123;&quot;Annemarie&quot;&#125;;        // short stringstring s2 &#123;&quot;Annemarie Stroustrup&quot;&#125;;    // long string</code></pre><p>The memory layout will be something like:</p><p><img src="fig6.png"></p><p>The actual performance of <code>string</code>s can dependent critically on the run-time environment.</p><p>To handle multiple character sets, <code>string</code> is really an alias for a general template <code>basic_string</code> with the character type <code>char</code></p><pre><code>template&lt;typename Char&gt;class basic_string &#123;    // ...string of Char&#125;;using string = basic_string&lt;char&gt;;</code></pre><p>A user can define strings of arbitrary character types. For example, assuming we are using Japancese character type <code>Jchar</code>, we can write:</p><pre><code>using Jstring  = basic_string&lt;Jchar&gt;;</code></pre><p>Similarly, we can handle Unicode string.</p><h2 id="Regular-Expression"><a href="#Regular-Expression" class="headerlink" title="Regular Expression"></a>Regular Expression</h2><p>Regular expression are powerful tool for text processing. In <code>&lt;regex&gt;</code>, the standard library provides suport for regular expressions in the form of the <code>std::regex</code> clas and its supporting functions. </p><p>To express the pattern, <em>raw string literal</em> are often used which starts with <code>R&quot;(</code> and terminated by <code>)&quot;</code>. This allows backslashes and quotes to be used directy in the string.</p><p>In <code>&lt;regex&gt;</code>, the standard library provides support for regular expressions:</p><ul><li><code>regex_match()</code>: Match a regular expression against a string (of known size)</li><li><code>regex_search()</code>: Search for a string that matches a regular expression in an (arbitrarily long) stream of data</li><li><code>regex_replace()</code>: Search for strings that match a regular expression in an (arbitrarily long) stream of data and replace them</li><li><code>regex_iterator</code>: Iterate over matches and submatches</li><li><code>regex_token_iterator</code>: Iterate over non-matches</li></ul><h3 id="Searching"><a href="#Searching" class="headerlink" title="Searching"></a>Searching</h3><p>The simplest way of using a pattern is to search for it in a stream:</p><pre><code>int lineno = 0;for (string line; getline(cin,line); )&#123;    ++lineno;    smatch matches;    if (regex_search(line, matches, pat))        cout &lt;&lt; lineno &lt;&lt; &quot;:&quot; &lt;&lt;  matches[0] &lt;&lt; &quot;\n&quot;;&#125;</code></pre><p>The <code>regex_search(line,matches,pat)</code> searches the <code>line</code> for anything that matches the regular expression stored in <code>pat</code> and if it finds any matches, it stores them in <code>matches</code>. If no match was found, <code>regex_search(line, matches, pat)</code> returns false. The <code>s</code> preceeding <code>smatch</code> means “sub” or “string”, and an <code>smatch</code> is a <code>vector</code> of sub-matches of type <code>string</code>. The first element <code>matches[0]</code>, is the complete match. </p><blockquote><p>matches[0] is similar to re.search(pat).group(0) in Python. matches[1] is the first group which is user defined.</p></blockquote><h3 id="Regular-Expression-Notation"><a href="#Regular-Expression-Notation" class="headerlink" title="Regular Expression Notation"></a>Regular Expression Notation</h3><p><img src="fig7.png"></p><p><img src="fig8.png"></p><p><img src="fig9.png"></p><p>Below are some examples of regular expressions:</p><p><img src="fig10.png"></p><p>A <code>group</code> (a subpattern) potentially to be represented by a <code>sub_match</code> is delimited by parentheses. If you need parentheses that should not define a subpattern, use <code>(?</code> rather than the plain <code>(</code>.</p><h1 id="I-O-Streams"><a href="#I-O-Streams" class="headerlink" title="I/O Streams"></a>I/O Streams</h1><p>An <code>ostream</code> converts typed objects to a stream of characters (bytes). An <code>istream</code> convers a stream of characters (bytes) to typed objects.</p><p><img src="fig11.png"></p><p><img src="fig12.png"></p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>In <code>&lt;ostream&gt;</code>, the I/O stream library defines output for every built-in type. The operator <code>&lt;&lt;</code> (“put to”) is used as an output operator on objects of type <code>ostream</code>; <code>cout</code> is the standard output stream and <code>cerr</code> is the standard stream for reporting errors. Basic usage is as follows:</p><pre><code>void h2(int i)&#123;    cout &lt;&lt; &quot;the value of i is &quot; &lt;&lt; i &lt;&lt; &quot;\n&quot;;&#125;</code></pre><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>In <code>&lt;istream</code>, the standard library offers <code>istream</code>s for input. The operator <code>&gt;&gt;</code> (“get from”) is used as an input operator; <code>cin</code> is the standard input stream. The type of the right-hand operand of <code>&gt;&gt;</code> determines what input is accepted and what is the target of the input operation. For example:</p><pre><code>void f()&#123;    int i;    cin &gt;&gt; i;    double d;    cin &gt;&gt; d;&#125;</code></pre><p>Input operations can be chained as well, so equivalently:</p><pre><code>void f()&#123;    int i;    double d;    cin &gt;&gt; i &gt;&gt; d; // read into i and d&#125;</code></pre><p>By default, a whitespace chatacter, such as a space or a newline, terminates the read. You can read a whole line <strong>including the terminating newline character, but not delivered to the target</strong> using the <code>getline()</code> function. For example:</p><pre><code>void hello_line()&#123;    cout &lt;&lt; &quot;Please enter your name\n&quot;;    string str;    getline(cin, str);    cout &lt;&lt; &quot;Hello,&quot; &lt;&lt; str &lt;&lt; &quot;!\n&quot;;&#125;</code></pre><p>The newline that terminated the line is discarded, so <code>cin</code> is ready for the next input line.</p><h2 id="I-O-State"><a href="#I-O-State" class="headerlink" title="I/O State"></a>I/O State</h2><p>An <code>iostream</code> has a state that we can examine to determine whether an operation succeeded. The most common use is to read a sequence of values:</p><pre><code>vector&lt;int&gt; read_ints(istream&amp; is)&#123;    vector&lt;int&gt; res;    int i;    while (is &gt;&gt; i)        res.push_back(i);    return res;&#125;</code></pre><p>This reads from <code>is</code> until something that is not an integer is encountered. That something will typically be the end of input. Because <code>is&gt;&gt;i</code> returns a reference to <code>is</code>, and teting an <code>iostream</code> yields <code>true</code> if the stream is ready or another operation.</p><p>In genral, the I/O state holds all the information needed to read or write, such as formatting information, error state, and what kind of buffering is used. In particular, the user can set the state to reflect that an error has occurred and clear the state if an error wasn’t serious. For example:</p><pre><code>while(cin) &#123;    for (int i; cin&gt;&gt;i;) &#123;        // ...use the integer    &#125;    if(cin.eof()) &#123;        // ...all is well we reach the end-of-file    &#125;    else if (cin.fail()) &#123;    // a potentailly recoverable error        cin.clear();    // reset the state to good()        char ch;        if (cin&gt;&gt;ch) &#123;            switch(ch) &#123;            case &#39;&#123;&#39;:                // ...start nested structure...                break;            case &#39;&#125;&#39;:                // ...end nested structure...                break;            default:                cin.setstate(ios_base::failbit);    // add fail() to cin&#39;s state            &#125;        &#125;    &#125;&#125;</code></pre><h2 id="I-O-of-User-Defined-Types"><a href="#I-O-of-User-Defined-Types" class="headerlink" title="I/O of User-Defined Types"></a>I/O of User-Defined Types</h2><p>The <code>iostream</code> library allows programmers to define I/O for their own types. For example, consider a simple <code>Entry</code> that we might use to represent entries in a telephone book;</p><pre><code>struct Entry &#123;    string name;    int number;&#125;;</code></pre><p>We can define a simple output operator to write an <code>Entry</code> using a <code>&#123;&quot;name&quot;, number&#125;</code> format.</p><pre><code>ostream&amp; operator&lt;&lt;(ostream&amp;os, const Entry&amp; e)&#123;    return os &lt;&lt; &quot;&#123;\&quot;&quot; &lt;&lt; e.name &lt;&lt; &quot;\&quot;,&quot; &lt;&lt; e.number &lt;&lt; &quot;&#125;&quot;;&#125;</code></pre><p>A user-defined output operator takes its output stream (by reference) as its first argument and returns it as its result.</p><p>The corresponding input operator is more complicated becuase it has to check for correct formatting and deal with errors:</p><pre><code>istream&amp; operator&gt;&gt;(istream&amp; is, Entry&amp; e)    // read &#123;&quot;name&quot;, nummber&#125; pair. Note: formatted with &#123;&quot;&quot;,  and &#125;&#123;    char c,c2;    if (is&gt;&gt;c &amp;&amp; c==&#39;&#123;&#39; &amp;&amp; is&gt;&gt;c2 &amp;&amp; c2==&#39;&quot;&#39;)&#123; // start with a &#123;&quot;    string name;    while(is.get(c) &amp;&amp; c!=&#39;&quot;&#39;)        name+=c;    if(is&gt;&gt;c&amp;&amp;c==&#39;,&#39;)&#123;        int number = 0;        if (is&gt;&gt;number&gt;&gt;c &amp;&amp; c==&#39;&#125;&#39;) &#123; // read the number and a &#125;        e = &#123;name,number&#125;;        return is;        &#125;    &#125;    is.setstate(ios_base::failbit);    // add fail() to cin&#39;s state    return is;&#125;</code></pre><p>When used as a condition, <code>is&gt;&gt;c</code> means “Did we succeed at reading from <code>is</code> into <code>c</code>?”</p><p>The <code>is&gt;&gt;c</code> skips whitespace by default, but <code>is.get(c)</code> does not, so that this <code>Entry</code>-input operator ignores (skips) whitespace outside the name string, but not within it.</p><h2 id="Formatting"><a href="#Formatting" class="headerlink" title="Formatting"></a>Formatting</h2><p>The simplest formatting controls are called <code>manipulators</code> and are found in <code>&lt;ios&gt;</code>, <code>&lt;istream&gt;</code>, <code>&lt;ostream&gt;</code> and <code>&lt;iomanip&gt;</code> (for manipulators that take arguments). For example, we can output integers as decimal, octal or hexadecimal numbers:</p><pre><code>cout &lt;&lt; 1234 &lt;&lt; &#39;,&#39; &lt;&lt; hex &lt;&lt; 1234 &lt;&lt; &#39;,&#39; &lt;&lt; oct &lt;&lt; 1234 &lt;&lt; &#39;\n&#39;;</code></pre><p>We can explicitly set the output format for floating-point numbers:</p><pre><code>constexpr double d = 123.456;cout &lt;&lt; d &lt;&lt; &quot;;&quot;            // use the default format for d    &lt;&lt; scientific &lt;&lt; d &lt;&lt; &quot;;&quot;    // use 1.23e2 format    &lt;&lt; hexfloat &lt;&lt; d &lt;&lt; &quot;;&quot;        // use hexadecimal    &lt;&lt; fixed &lt;&lt; d &lt;&lt; &quot;;&quot;        // use 123.456 format    &lt;&lt; defaultfloat &lt;&lt; d &lt;&lt; &quot;\n&quot;;    // use the default</code></pre><p>Precision is an integer that determines the number of digits used to display a floating-point number:</p><ul><li><p>The <em>general</em> format <code>defaultfloat</code> lets the implementation choose a format that best preserve the numerical value. The precision specifies the maximum number of digits</p></li><li><p>The <em>scientific</em> format <code>scientific</code> presents a value with one digit before a decimal point and an exponent. The precision specifies the maximum number of digits after the decimal point.</p></li><li><p>The <em>fixed</em> format <code>fixed</code> presents a value as an integer part followed by a decimal point and a fractional part. The precision spcifies the maximum number of digits after the decimal point.</p><p>cout.precision(8);<br>cout &lt;&lt; 1234.56789 &lt;&lt; ‘ ‘ &lt;&lt; 1234.56789 &lt;&lt; ‘ ‘ &lt;&lt; 123456 &lt;&lt; ‘\n’;</p><p>cout.precision(4);<br>cout &lt;&lt; 1234.56789 &lt;&lt; ‘ ‘ &lt;&lt; 1234.56789 &lt;&lt; ‘ ‘ &lt;&lt; 123456 &lt;&lt; ‘\n’;<br>The manipulators are “sticky”; it persists for subsequent floating-point operations.</p></li></ul><h2 id="File-Streams"><a href="#File-Streams" class="headerlink" title="File Streams"></a>File Streams</h2><p>In <code>&lt;fstream&gt;</code>, the standard library provides streams to and from a file:</p><ul><li><code>ifstream</code>s for reading from a file</li><li><code>ofstream</code>s for writing to a file</li><li><code>fstream</code>s for reading from and writing to a file</li></ul><p>For example:</p><pre><code>ofstream ofs(&quot;target&quot;);    // &quot;o&quot; for &quot;output&quot;if (!ofs)    error(&quot;couldn&#39;t open &#39;target&#39; for writing&quot;)</code></pre><p>Testing that a file has been properly opened is usually done by checking its state.</p><pre><code>ifstream ifs(&quot;source&quot;);if (!ifs)    error(&quot;couldn&#39;t open &#39;source&#39; for reading)</code></pre><h2 id="String-Streams"><a href="#String-Streams" class="headerlink" title="String Streams"></a>String Streams</h2><p>In <code>&lt;sstream&gt;</code> the standard library provides streams to and from a <code>string</code></p><ul><li><code>istringstream</code>s for reading from a <code>string</code></li><li><code>ostringstream</code>s for writing to a <code>string</code></li><li><code>stringstream</code>s for reading from and writing to a <code>string</code></li></ul><p>For example:</p><pre><code>void test()&#123;    ostringstream oss;    oss &lt;&lt; &quot;temperature&quot; &lt;&lt; scientific &lt;&lt; 123.4567890 &lt;&lt; &quot;.&quot;;    cout &lt;&lt; oss.str() &lt;&lt; &#39;\n&#39;;&#125;</code></pre><p>The result from an <code>istringstream</code> can be read using <code>str()</code>. One common use of an <code>ostringstream</code> is to format before giving the resulting string to a GUI. Similarly, a strig received from a GUI can be read using formatted input operations by putting it into an <code>istringstream</code></p><p>A <code>stringstream</code> can be used for both reading and writing. For example, we can define an operation that can convert any type with a string representation to another that also has a string representation:</p><pre><code>template&lt;typename Target=string, typename Source=string&gt;Target to(Source arg)&#123;    stringstream interpreter;    Target result;    if (!(interpreter &lt;&lt; arg)          // writing arg into stream        || !(interpreter &gt;&gt; result)         // read result from stream        || !(interpreter &gt;&gt; std::ws).eof())     // stuff left in stream?        throw runtime_error&#123;&quot;to&lt;&gt;() fialed&quot;&#125;;          retrun result;&#125;</code></pre><h1 id="Containers"><a href="#Containers" class="headerlink" title="Containers"></a>Containers</h1><h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><p>A <code>vector</code> is a sequence of elements of a given type. The elements are stored contiguously in memory. A typical implementation of <code>vector</code> will consist of a handle holding pointers to the first element, one-past-the-last element, and one-past-the-last allocated space.</p><p><img src="fig13.png"></p><p>In addition, it holds an allocator (<code>alloc</code>), from which the <code>vector</code> can acquire memory for its elements. The default allocator uses <code>new</code> and <code>delete</code> to acquire and release memory.</p><p>We can initialize vector in following ways:</p><pre><code>vector&lt;T&gt; vec = &#123; ... &#125;;     // init with valuesvector&lt;T&gt; vec;            // size 0vector&lt;T&gt; vec(23);        // size 23vector&lt;double&gt; vec(32,9.9);    // size 32, initial value: 9.9</code></pre><p>By default the elements are initialized to the element type’s default value (e.g. <code>nullptr</code> for pointers and <code>0</code> for numbers). You can specify a value if not happy with the default.</p><p>Copying and moving of <code>vector</code>s are implemented by constructors and assignment operators.</p><h3 id="Elements"><a href="#Elements" class="headerlink" title="Elements"></a>Elements</h3><p>Like all standard-library containers, <code>vector</code> is a container of elements of some type <code>T</code>. If you have a class hierachy that relies on <code>virtual</code> functions to get polymorphic behavior, you should store a pointer.</p><pre><code>vector&lt;Shape&gt; vs;    // No, don&#39;t - there is no room for a Circle or a Smileyvector&lt;Shape*&gt; vps;     // bettervector&lt;unique_ptr&lt;Shape&gt;&gt; vups;    // OK</code></pre><h3 id="Range-Checking"><a href="#Range-Checking" class="headerlink" title="Range Checking"></a>Range Checking</h3><p>The standard-library <code>vector</code> does not guarantee range checking. But it is easy to adapt it </p><pre><code>template&lt;typename T&gt;class Vec : public std::vector&lt;T&gt; &#123;public:    using vector&lt;T&gt;::vector;    T&amp; operator[](int i)        &#123; return vector&lt;T&gt;::at(i); &#125;    const T&amp; operator[](int i) const        &#123; return vector&lt;T&gt;::at(i); &#125;&#125;</code></pre><p><code>at()</code> operation will throw a <code>out_of_range</code> type exception if the index is out of bound.</p><p>Some compiler version actually has this <code>vector</code> implementation.</p><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><p>The standard library offers a doubly-linked list called <code>list</code></p><p><img src="fig14.png"></p><p>To delete or insert a new entry before a list node, we use an <em>iterator</em>: a <code>list</code> iterator identifies an element of a <code>list</code> and can be used to iterate through a <code>list</code>. Every standard-library container provides the functions <code>begin()</code> and <code>end()</code>, which returns an iterator to the first and one-past-the-last element respectively. So we have two methods to find a number in our <code>list</code></p><pre><code>list&lt;Entry&gt; phone_book = &#123; ... &#125;;int get_number(const string&amp; s)&#123;    for (const auto&amp; x : phone_book ) // a for-range loop        if ( x.name == s )            return x.number;    return 0;&#125;</code></pre><p>Or alternatively,</p><pre><code>int get_number(const string&amp; s)&#123;    for (auto p = phone_book.begin(); p!=phone_book.end(); ++p)        if (p-&gt;name == s)            return p-&gt;number;    return 0;&#125;</code></pre><p>Adding elements to a <code>list</code> and removing elements from a <code>list</code> is easy with iterator</p><pre><code>void f(const Entry&amp; ee, list&lt;Entry&gt;::iterator p, list&lt;Entry&gt;::iterator q)&#123;    phone_book.insert(p, ee);    phone_book.erase(q);&#125;</code></pre><blockquote><p><code>vector</code> performs better for traversal and for sorting and searching</p></blockquote><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>The standard library offers a search tree (a red-black tree) called <code>map</code>:</p><p><img src="fig15.png"></p><p>In other contexts, a <code>map</code> is known as an associative array or a dictionary. It is implemented as a balanced binary tree.</p><p>The STL    <code>map</code> is optimized for lookup.</p><h2 id="unordered-map"><a href="#unordered-map" class="headerlink" title="unordered_map"></a>unordered_map</h2><p>The cost of a <code>map</code> lookup is <code>O(log(n))</code> where <code>n</code> is the number of elements in the <code>map</code>. That’s pretty good. However, in many case we can do better by using a hashed lookup.</p><p><img src="fig16.png"></p><h1 id="Algorithms"><a href="#Algorithms" class="headerlink" title="Algorithms"></a>Algorithms</h1><h2 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h2><p>The standard library provides the most common algorithms for containers in addition to providing the most common container types. For example, we can simply and efficiently sort a <code>vector</code> of <code>Entry</code>s and place a copy of each unique <code>vector</code> element on a <code>list</code></p><pre><code>void f(vector&lt;Entry&gt;&amp; vec, list&lt;Entry&gt;&amp; lst)&#123;    sort(vec.begin(), vec.end());    unique_copy(vec.begin(), vec.end(), lst.begin());&#125;</code></pre><p>For this to work, less than (<code>&lt;</code>) must be defined for <code>Entry</code>s. For example:</p><pre><code>bool operator&lt;(const Entry&amp; x, const Entry&amp; y)&#123;    return x.name &lt; y.name;&#125;</code></pre><p>A standard algorithm is expressed in terms of (half-open sequences of elements. A <em>sequence</em> is represented by a pair of iterators specifying the first element and the one-beyond-the-last element.</p><p>In the previous example, <code>lst</code> should at least have as many elements as there are unique elements in <code>vec</code>. If we want the algorithm to make room for the new elements automatically, we can use</p><pre><code>list&lt;Entry&gt; f(vector&lt;Entry&gt;&amp; vec)&#123;    list&lt;Entry&gt; res;    sort(vec.begin(), vec.end());    unique_copy(vec.begin(), vec.end(), back_inserter(res));    return res;&#125;</code></pre><p>The call <code>back_inserter(res)</code> constructs an iterator for <code>res</code> that adds elements at the end of a container, extending the container to make room for them. This saves us from having to allocate a fixed amount of space and then filling it.</p><h2 id="Use-of-Iterators"><a href="#Use-of-Iterators" class="headerlink" title="Use of Iterators"></a>Use of Iterators</h2><p>Many algorithms return iterators. For example, the standard algorithm <code>find</code> looks for a value in a sequence and returns an iterator to the element found:</p><pre><code>bool has_c(const string&amp; s, char c)&#123;    auto p = find(s.begin(), s.end(), c);    if ( p!=s.end() )        return true;    else        return false;&#125;</code></pre><p>Like many standard-library search algorithms, <code>find</code> returns <code>end()</code> to indicate “not found”. </p><p>We can generalized the algorithm so that it works on every standard container for which it makes sense, for example:</p><pre><code>template&lt;typename C, typename V&gt;vector&lt;typename C::iterator&gt; find_all(C&amp; c, V v)&#123;    vector&lt;typename C::iterator&gt; res;    for ( auto p=c.begin();p!=c.end();p++)        if (*p==v)            res.push_back(p);    return res;&#125;</code></pre><p>The <code>typename</code> is needed to inform the compiler that <code>C</code>‘s <code>iterator</code> is supposed to be a type and not a value of some type. We can hide this implementation detail by introducing a type alias for <code>Iterator</code>:</p><pre><code>template&lt;typename T&gt;using Iterator = typename T::iterator; // T&#39;s iterator...vector&lt;Iterator&lt;C&gt;&gt; res;...</code></pre><p>Iterators are used to separate algorithms and containers. An algorithm operates on its data through iterators and knows nothing about the container. Conversely, a container knows nothing about the algorithms operating on its elements; all it does is to supply iterators upon request (<code>begin()</code> and <code>end()</code>). This model of separation between data storage and algorithms delivers very general and flexible software.</p><h2 id="Iterator-Types"><a href="#Iterator-Types" class="headerlink" title="Iterator Types"></a>Iterator Types</h2><p><em>Iterator</em> is a concept. It needs to obey a few simple rules:</p><ol><li><code>++</code> operation gives the iterator to the next element</li><li><code>*</code> dereferences the iterator and retrieves the object</li></ol><p>The actual implementation of iterators depend on the data container we are using. Hence in gerneral, the iterators are available under the conventional names <code>iterator</code> and <code>const_iterator</code>. For example, <code>list&lt;Entry&gt;::iterator</code> is the general iterator for <code>list&lt;Entry&gt;</code>. We rarely have to worry abou the details of how that type is defined.</p><h2 id="Stream-Iterators"><a href="#Stream-Iterators" class="headerlink" title="Stream Iterators"></a>Stream Iterators</h2><p>An input stream produces a sequence of values, and we write a sequence of values to an output stream. Consequently, the notion of iterators can be usefully applied to input and output.</p><p>To make an <code>ostream_iterator</code>, we need to specify which stream will be used and the type of objects written to it. For example:</p><pre><code>ostream_iterator&lt;string&gt; oo &#123;cout&#125;; // write strings to cout</code></pre><p>The effect of assigning to <code>*oo</code> is to write the assigned value to <code>cout</code>. For example:</p><pre><code>int main()&#123;    *oo = &quot;Hello,&quot;;    ++oo;    *oo = &quot;world!\n&quot;;&#125;</code></pre><p>Similarly, an <code>istream_iterator</code> is something that allows us to treat an input stream as a read-only container. Again, we must specify the stream to be used and the type of values expected:</p><pre><code>istream_iterator&lt;string&gt; ii &#123;cin&#125;;</code></pre><p>Input iterators are used in pairs representing a sequence, so we must provide an <code>istream_iterator</code> to indicate the end of input. This is the default <code>istream_iterator</code>:</p><pre><code>istream_iterator&lt;string&gt; eos &#123;&#125;;</code></pre><p>Typically, <code>istream_iterator</code>s and <code>ostream_iterator</code>s are not used directly. Instead, they are provided as arguments to algorithms. For example, we can write a simple program to read a file, sort the words read, eliminate duplicates, and write the result to another file.</p><pre><code>int main()&#123;    string from, to;    cin &gt;&gt; from &gt;&gt; to;    // get source and target filenames    ifstream is &#123;from&#125;;    istream_iterator&lt;string&gt; ii &#123;is&#125;;    istream_iterator&lt;string&gt; eos &#123;&#125;;    ofstream os &#123;to&#125;;    ostream_iterator&lt;string&gt; oo &#123;os, &quot;\n&quot;&#125;;    vector&lt;string&gt; b &#123;ii,eos&#125;;    // b is a vector initialized from input        sort(b.begin(), b.end());    // sort the buffer    unique_copy(b.begin(), b.end(), oo); // copy buffer to output, discard replicated values    return !is.eof() || !os;    // return error state&#125;</code></pre><p>The above can be done more elegantly with</p><pre><code>set&lt;string&gt; b &#123;ii,eos&#125;;copy(b.begin(), b.end(),oo);</code></pre><h2 id="Predicates"><a href="#Predicates" class="headerlink" title="Predicates"></a>Predicates</h2><p>In the examples above, the algorithms have simply “built in” the action to be done for each element of a sequence. However, we often want to make that action a parameter to the algorithm. A <em>predicate</em> lookf for an element that fulfills a specified requirement. For example, we might want to search a <code>map</code> for the first value larget than <code>42</code>. </p><pre><code>void f(map&lt;string,int&gt;&amp; m)&#123;    auto p = find_if(m.begin(),m.end()),Greater_than&#123;42&#125;);    // ...&#125;</code></pre><p>Here, <code>Greater_than</code> is a function object (functor) holding the value 42 to be compared against.</p><pre><code>struct Greater_than &#123;    int val;    Greater_than(int v): val&#123;v&#125; &#123;&#125;    bool operator()(const pair&lt;string,int&gt;&amp; r) &#123;return r.second &gt; val;&#125;&#125;;</code></pre><p>Alternatively, we can use lambda expression</p><pre><code>auto p = find_if(m.begin(), m.end(), [](const pair&lt;string,int&gt;&amp; r) &#123;return r.second&gt;42;&#125;);</code></pre><h2 id="Algorithm-Overview"><a href="#Algorithm-Overview" class="headerlink" title="Algorithm Overview"></a>Algorithm Overview</h2><p>The standard library provides dozens of algorithms. The algorithms are defined in namespace <code>std</code> and presente in the <code>&lt;algorithm&gt;</code> header. These standard-library algorithms take sequences as inputs. A half-open sequence from <code>b</code> to <code>e</code> is referred to as [b:e). Here are a few examples:</p><p><img src="fig17.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Programming</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Notes on Signal and System</title>
    <link href="/2020/11/01/Notes-on-Signal-and-System/"/>
    <url>/2020/11/01/Notes-on-Signal-and-System/</url>
    
    <content type="html"><![CDATA[<h1 id="Continuous-System"><a href="#Continuous-System" class="headerlink" title="Continuous System"></a>Continuous System</h1><p>A system is simply a transform from one time-independent function ( <em>input</em> ) to another time-dependent function ( <em>output</em> ). There are multiple ways to represent a system.</p><ol><li>Ordinary Differential Equation (ODE)</li><li>Transfer function</li><li>Impulse Response</li><li>Frequency Response</li></ol><p>A system is said to be <em>linear time-invariant</em> or <strong>LTI</strong> if a time shift in input produces the same shift in output and linear conbination of input functions produces linear combination of output.</p><p><strong>Nyquist Stability Theorem</strong></p><p>The Nyquist diagram is a plot of the <strong>open-loop</strong> transfer function with $\omega$ spanning from $-\infty$ to $\infty$ in the complex plane. The system is stable in negative feedback setup <strong>if and only if</strong> the number of anti-clockwise encirclement of -1 is equal to the number of the right-hand plane poles of the open loop system</p><h1 id="Z-Transform"><a href="#Z-Transform" class="headerlink" title="Z-Transform"></a>Z-Transform</h1><p>Z Transform is the <strong>discrete version of Laplace transform</strong>. We can informally derive Z transform by making the function discrete (using delta functions) in the Laplace transform. Recall that </p><p>$$ F(s) = \int_0^\infty f(t)e^{-st}dt $$</p><p>Let $f(t) = \sum_x x_n\delta(t-nT)$ and substitute in, by the sifting property and a change of variable $Z = e^{st}$ we have</p><p>$$ F(z) = \sum_n x_nz^{-n} $$</p><p>which is the definition of the Z transform.</p><h2 id="Properties-of-Z-transform"><a href="#Properties-of-Z-transform" class="headerlink" title="Properties of Z transform"></a>Properties of Z transform</h2><p>Because of the close link between Z and Laplace, many of the properties are shared, such as the <strong>convolution property</strong>.</p><p>Another important property is that multiple $Z^{-1}$ <strong>delays</strong> the signal. Therefore $Z^{-1}$ is also called the <em>delay operator</em>. On the other hand, multiplying $Z$ advance the signal.</p><blockquote><p>When advancing the signal, need to take care of the values intruding the <em>negative subscripts</em>, those need to be subtracted because signal should be zero before time 0</p></blockquote><h2 id="Inversion-of-Z-Transform"><a href="#Inversion-of-Z-Transform" class="headerlink" title="Inversion of Z Transform"></a>Inversion of Z Transform</h2><p>Like the Laplace transform, we do not do Z inverse transform by hand often. Instead, we decompose the rational fraction into partial fractions and use lookup tables to recover the original function.</p><p>Important formulas include:</p><p>$$ p^k \leftarrow \frac{1}{1-pz^{-1}}$$</p><p>$$ kp^k \leftarrow \frac{pk^{-1}}{(1-pz^{-1})^2}$$</p><p>$$ k \leftarrow \frac{z^{-1}}{(1-z^{-1})^2} $$</p><h1 id="Unit-Pulse-Response-of-Discrete-System"><a href="#Unit-Pulse-Response-of-Discrete-System" class="headerlink" title="Unit Pulse Response of Discrete System"></a>Unit Pulse Response of Discrete System</h1><p>We define the unit pulse in discrete time system </p><p>$$\delta_k = 1 \text{ for } k=0, \text{ and } \delta_k=0 \text{ otherwise}$$</p><p>The Z transform of the unit pulse is simply $1$. Now we can represent any input with a delayed and scaled unit pulse train $(u_0,u_1, u_2,…) = u_0\delta_k + u_1\delta_{k-1} + u_2\delta_{k-2}+…$. For a LTI system, the response is therefore a superposition of its impulse response</p><p>$$y_k = \sum_{i=0}^{k}u_ig_{k-i}$$</p><p>which is the convolution. Therefore we have $Y(z) = G(z)U(z)$ where $G(z)$ is the Z transform of the impulse response.</p><h2 id="Z-Transfer-Function"><a href="#Z-Transfer-Function" class="headerlink" title="Z-Transfer Function"></a>Z-Transfer Function</h2><p>For a discrete system, we can represent it by the <strong>z-transform of its impulse reponse</strong>, denoted as $G(z) = \frac{Y(z)}{U(z)}$</p><h2 id="Finite-Impulse-Response-FIR-and-Infinite-Impulse-Response-IIR"><a href="#Finite-Impulse-Response-FIR-and-Infinite-Impulse-Response-IIR" class="headerlink" title="Finite Impulse Response (FIR) and Infinite Impulse Response (IIR)"></a>Finite Impulse Response (FIR) and Infinite Impulse Response (IIR)</h2><p>If the impulse response is a finite sequence, that is, $g_k = 0 \text{ for } k &gt; m$, then it is said to be FIR. Otherwise it is a IIR.</p><p>System with FIR is also called a <strong>FIR filter</strong>, IIR system is also called <strong>IIR filter</strong>. </p><h1 id="Stability"><a href="#Stability" class="headerlink" title="Stability"></a>Stability</h1><h2 id="Formal-Definition-of-Stability"><a href="#Formal-Definition-of-Stability" class="headerlink" title="Formal Definition of Stability"></a>Formal Definition of Stability</h2><p>We define stability as <strong>“Bounded input gives bounded output”</strong>(BIBO), that is, if $\exists M \text{ such that } |{u_k}| &lt; M \text{ for all } k$, then $\exists N \text{ such that } |{g_k}| &lt; N \text{ for all } k$</p><p>If a system satisfies BIBO, then we say the system is stable.</p><h2 id="Condition-for-Stability"><a href="#Condition-for-Stability" class="headerlink" title="Condition for Stability"></a>Condition for Stability</h2><p>There are three equivalent necessary and sufficient conditions for stability, each can imply the others.</p><ol><li>$G(z)$ is stable</li><li>All the poles $d_i$ of $G(z)$ lies within the unit circle, that is, $|d_i| &lt; 0$ for all $i$</li><li>$\sum_0^\infty g_k$ is finite</li></ol><blockquote><p>Note that for continuous system, poles need to lie in the left half plane in order to be stable. For discrete system, poles need to lie <strong>within</strong> the unit circle. Consider a step input, for systems whose pulse response is not constant (i.e., have pole on unit circle), the response is going to be unbounded.</p></blockquote><h2 id="Final-Value-Thoerem"><a href="#Final-Value-Thoerem" class="headerlink" title="Final Value Thoerem"></a>Final Value Thoerem</h2><p>The final value thoerem for discrete-time system is given as the following:</p><p>$$\lim_{k\rightarrow\infty}y(k) = \lim_{z\rightarrow 1}(z-1)Y(z)$$</p><p>This is in analogy to FVT in continuous-time system, where</p><p>$$\lim_{t\rightarrow\infty}y(t) = \lim_{s\rightarrow 0}sY(z)$$</p><p>Noting that we have “derieve” the Z-transform by substituting $z = e^{-st}$, the analogy should be obvious. To formally prove it, consider the partial fraction of the system given by $(z-1)Y(z)$, let’s assume all the poles but one (unrepeated) at 1 lie strictly within the unit circle. Multiplying by $(z-1)$ and computing the limit will drive those terms with $p\neq1$ to zero, while keeping the $p=1$ term. Which is constant in discrete time domain.</p><h1 id="Frequency-Response"><a href="#Frequency-Response" class="headerlink" title="Frequency Response"></a>Frequency Response</h1><p><strong>key takeaway</strong></p><p>$$\theta = \omega T &lt; \pi$$</p><p>If the filter is defined as $G(z)$, then its frequency response to a sinusoid $e^{j\omega Tk}$ is given by $G(e^{j\theta})$, where $\theta = \omega T &lt; \pi$</p><p>This can be shown as follows:</p><p>$$U(z) = \frac{1}{1-e^{j\theta}z^{-1}}$$</p><p>$$Y(z) = G(z)U(z) = \frac{G(\beta_0)}{1-e^{j\theta}z^{-1}} + \text{Terms of the form} \frac{\beta_i}{1-p_i z^{-1}}…$$</p><p>Because the poles are assumed to be <strong>steady</strong>, they eventually die away in steay state. By hide and compute (partial fraction), we know that $\beta_0 =<br>G(e^{j\theta})$ Hence shown.</p><blockquote><p>This can be shown by observing $(1-e^{j\theta}z^{-1})Y(z)|_{z=e^{j\theta}} = \beta_0 + 0$</p></blockquote><p>Furthermore, the phase is given by $\angle G(e^{j\theta})$. </p><h2 id="Bode-Plot"><a href="#Bode-Plot" class="headerlink" title="Bode Plot"></a>Bode Plot</h2><p>Unlike in continuous time, the system is fundamentally limited by $\pi$, beyond which the system response is periodic. There is no easy way to plot the magnitude and phase. But they can be inferred from <strong>the locations of poles and zeros</strong></p><p><img src="fig1.png"></p><h1 id="Filter-Design-Principal"><a href="#Filter-Design-Principal" class="headerlink" title="Filter Design Principal"></a>Filter Design Principal</h1><h2 id="Ideal-Filters"><a href="#Ideal-Filters" class="headerlink" title="Ideal Filters"></a>Ideal Filters</h2><p>Ideal filters have a clear-cut passband region like the following</p><p><img src="fig2.png"></p><p>Unfortunately ideal filters cannot be implemented because they are <strong>non-casual</strong>. Meaning that the system will need to respond before any input happens. The evenness of the $sinc$ function determines this for the ideal function above.</p><p><img src="fig3.png"></p><h2 id="Realistic-Filters"><a href="#Realistic-Filters" class="headerlink" title="Realistic Filters"></a>Realistic Filters</h2><p>Realistic filters will not have a clear-cut edge. Instead, the region is usually divided into <strong>passband, transition</strong> and <strong>stopband</strong>.</p><p><img src="fig4.png"></p><h2 id="FIR-Filters"><a href="#FIR-Filters" class="headerlink" title="FIR Filters"></a>FIR Filters</h2><p>We can design a <em>finite impulse response</em> filter by the following procedure:</p><ol><li>Obtain the idea filter impulse response</li><li>Time <strong>shift</strong> the reponse</li><li><strong>Truncate</strong> the response</li></ol><p><img src="fig5.png"></p><p>It is intuitive to see that the more samples we preserve (i.e., the <em>less</em> we truncate), the better the output response.</p><p>FIR filters are really simple to implement and design.</p><p><img src="fig6.png"></p><p>However, to improve the system one need to scale up the number of samples, which has been shown to be less efficient than <em>IIR</em> filters.</p><h2 id="IIR-Filters"><a href="#IIR-Filters" class="headerlink" title="IIR Filters"></a>IIR Filters</h2><p>The <em>Infinite Impulse Response</em> filter takes advantage of using feedback to achieve better performance using less computational power. The output <em>goes back</em> to the filter.</p><p>Hence the transfer function $G(z) = \frac{N(z)}{D(z)}$ as a denominator hence capable of producing infinite response (by long division).</p><p>However, the filter can become unstable if the poles are ill-located. Below is a comparison between IIR and FIR filters.</p><p><img src="fig7.png"></p><h1 id="Design-of-FIR-filters"><a href="#Design-of-FIR-filters" class="headerlink" title="Design of FIR filters"></a>Design of FIR filters</h1><p>There are two major ways to design a FIR filter. By <strong>shift-and-truncate</strong> or by <strong>optimazation</strong>. We will investigate the first technique.</p><h2 id="Frequency-distortion-of-truncation-windowing"><a href="#Frequency-distortion-of-truncation-windowing" class="headerlink" title="Frequency distortion of truncation/windowing"></a>Frequency distortion of truncation/windowing</h2><p>Let the shifted desired impulse response be $h_k$ and the truncated response $g_k$. <em>Truncation is equivalent to multiplying by a window</em>.</p><p>$$g_k = h_kw_k$$</p><p>We can use duality of multiplication/convolution. <em>Multiplication in time domain</em> is equivalent to <em>convolution in the frequency domain</em>.</p><p>$$G(e^{j\omega}) = \frac{1}{2\pi}\int_{-\pi}^\pi H(e^{j\theta})W(\omega-\theta)d\theta$$</p><blockquote><p>Why is there a normalizing factor $\frac{1}{2\pi}$?</p></blockquote><p><img src="fig8.png"></p><blockquote><p>To visualize convolution. We first turn to the $\lambda$ domain, shift one function by $t$, and then compute the sum of products. A detailed visualization can be found <a href="https://lpsa.swarthmore.edu/Convolution/CI.html">here</a></p></blockquote><p>We can see that the sharpness of the edge (transition) is dependent on the <strong>main lobe width</strong>. The smaller the width, the sharper the transition. The <em>transition width is equal to the main lobe width</em>. The <em>ripples magnitude are the magnitude of the tails</em>.</p><blockquote><p>The rectangular window has null (where $|W(e^{j\theta})|=0$) at $2\pi p/N, p=1,…,N$. This means that <strong>if the signal has frequency that sits right on one of the frequency bins, there will be no frequency leakage to adjacent bins.</strong></p></blockquote><p><img src="fig9.png"></p><h2 id="Design-by-window-method"><a href="#Design-by-window-method" class="headerlink" title="Design by window method"></a>Design by window method</h2><p>We can reduce frequency distortion by <em>choosing different window function</em>. They would have different frequency characteristic ( <strong>main-lobe width</strong> and <strong>side-lobe decay</strong> ).</p><p><img src="fig10.png"></p><p><img src="fig11.png"></p><p>Design principles are:</p><ol><li>Smaller side lobes yield better approximation of the ideal response.</li><li>Narrower transition bandwidth can be achieved by increasing $N$</li><li>Same $\delta$ for passband error and stopband approximation</li></ol><p>The design procedure is as follows:</p><ol><li>Select a suitable window function $w_k$</li><li>Specify an ideal frequency response $H$</li><li>Compute the coefficients of the idea filter $h_k$</li><li>Multiply the ideal coefficient by the window function to give the filter coefficients and delay to make causal</li><li>Evaluate the frequency response of the resulting filter and iterate 1-5 if necessary</li></ol><blockquote><p>Note that the fourier transform is done in the digital domain.</p></blockquote><h2 id="Multi-band-design"><a href="#Multi-band-design" class="headerlink" title="Multi-band design"></a>Multi-band design</h2><p>We can use <strong>composition</strong> of lowpass filters to achieve passband design. A passband filter of $[\omega_1, \omega_2]$ is simply $\text{Lowpass}_{[0, \omega_2]}(e^{j\theta}) - \text{Lowpass}_{[0, \omega_1]}(e^{j\theta})$</p><h2 id="Linear-phase"><a href="#Linear-phase" class="headerlink" title="Linear phase"></a>Linear phase</h2><p>Simply put, <strong>linear phase</strong> is a property of a filter where the phase response of the filter is a <strong>linear function of frequency</strong>.</p><p>$$\angle G(e^{j\theta}) = |G(e^{j\theta})|e^{j\theta N/2}$$</p><p>The result is that all the frequency components of the input signal are shifted in time (usually delayed) <strong>by the same constant amount</strong> (the slope of the linear function). The illustration below demonstrates what would happen when you don’t have linear phase.</p><blockquote><p>Consider a filter with linear phase with input $\sin(\omega t + \theta)$, the output would be $|G(\omega)|\sin(\omega (t-\tau)+\theta)$. $-\tau$ is the slope of the linear function and is also called the <strong>group delay</strong></p></blockquote><p><img src="fig13.png"></p><blockquote><p>This comes from the fact that multiplying by e^{-s\tau} is equivalent to delaying $\tau$ in the time domain.</p></blockquote><p>Linear phase is achieved if <strong>$g_k = g_{N-k}$</strong>, that the filter is <em>symmetric</em>. This can be verified by computing $G(e^{j\theta})$</p><p>In general, <em>window method gives linear phase</em> so long as the desired impulse response is symmetric.</p><h2 id="Design-by-optimization"><a href="#Design-by-optimization" class="headerlink" title="Design by optimization"></a>Design by optimization</h2><p>We will not dwell on this.</p><h1 id="Design-of-IIR-filters"><a href="#Design-of-IIR-filters" class="headerlink" title="Design of IIR filters"></a>Design of IIR filters</h1><h2 id="Discretization-by-response-matching"><a href="#Discretization-by-response-matching" class="headerlink" title="Discretization by response matching"></a>Discretization by response matching</h2><p><strong>Impulse invariance</strong></p><p>$G_c(s)$ is the Laplace transform continous-time filter. The impulse response of the corresonding <em>impulse invariance</em> digitial filter $G(z)$ (with sampling $T$) is equal to the impulse reponse of $G(s)$ sampled at $t=kT$.</p><p><img src="fig14.png"></p><p><strong>Step response invariance</strong></p><p>Following the same argument, we can sample the step response of the continuous system. To retrieve the impulse response of our digital filter, we multiply by $\frac{z-1}{z}$, the inverse of step input.</p><p><img src="fig15.png"></p><p>Similarly, you can do <strong>Ramp response invariance</strong> etc.</p><h2 id="Discretization-by-algebraic-transformation"><a href="#Discretization-by-algebraic-transformation" class="headerlink" title="Discretization by algebraic transformation"></a>Discretization by algebraic transformation</h2><p>The idea is starting from a Laplace transform $G_c(s)$, we make our digital filter by $H(z)=H_c(s)_{s=\phi(z)}$ where $\phi(.)$ is a sensible choice mapping $z$ to $s$.</p><p>Below we list three common transformation and their intuition. <strong>Forward difference</strong> (also called Euler’s method), <strong>Backward difference</strong> and <strong>Bilinear transformation</strong> (or Tustin’s transformation)</p><p><img src="fig16.png"></p><p><img src="fig17.png"></p><h2 id="Bilinear-transform-in-detail"><a href="#Bilinear-transform-in-detail" class="headerlink" title="Bilinear transform in detail"></a>Bilinear transform in detail</h2><p>Bilinear transform is given by $s = \phi(z) = \frac{z-1}{z+1}$. We first show that stability is preserved.</p><h3 id="Stability-1"><a href="#Stability-1" class="headerlink" title="Stability"></a>Stability</h3><p>$z = \phi^{-1}(s) = \frac{1+s}{1-s}$</p><p>For $s = \lambda + j\omega$</p><p>$$|z|^2 = zz^* = \frac{(1+\lambda)^2+\omega^2}{(1-\lambda)^2+\omega^2}$$</p><p>For $\lambda \leq 0$ (stable poles), we have $|z|^2 &lt; 1 \rightarrow \text{inside unit circle}$</p><h3 id="Frequency-warping"><a href="#Frequency-warping" class="headerlink" title="Frequency warping"></a>Frequency warping</h3><p>The analog prototype filter has frequency response $G_c(j\omega)$. The corresponding digital filter has $G(z) = G_c(\psi(z))$. The normalized frequency response of the digital filter is given by</p><p>$$G(e^{j\theta}) = G_c(\psi(e^{j\theta}))$$</p><p>This is done by substituting $s = \psi(z)$ and $z = e^{j\theta}$</p><p>$$\psi(e^{j\theta}) = \frac{e^{j\theta}-1}{e^{j\theta}+1} = \frac{j\sin(\theta /2)}{\cos(\theta /2)} = j\tan (\theta/2)$$</p><p>Therefore:</p><p>$$G(e^{j\theta}) = G_c(j\tan (\theta /2))$$</p><p>The inverse relation is given by $\theta = 2 arctan(\omega)$</p><p>$$G_c(j\omega) = G(e^{j2 arctan(\omega)})$$</p><p><img src="fig18.png"></p><p>Intuitively, the <em>higher frequency</em> part is <strong>squashed</strong> to the higher end of normalized frequency.</p><h3 id="Designing-Tustin-filter"><a href="#Designing-Tustin-filter" class="headerlink" title="Designing Tustin filter"></a>Designing Tustin filter</h3><p>Example: design a first order lowpass digital filter with -3dB frequency of 1kHz and a sampling frequency of 8kHz</p><p>Consider the first order analogue lowpass filter</p><p>$$G_c(s) = \frac{1}{1+\frac{s}{\omega_c}}$$</p><p>the cut-off frequency is $\omega_c$. We know need to find $\omega_c$, with information that the <strong>digital filter should cutoff at 1kHz</strong></p><p>We first compute the normalized frequency, noting the substitution $\theta = \omega T$</p><p>$$\theta_c  = (1000 \times 2\pi) \times T = \pi/4$$</p><p>The equivalent pre-warped analogue filter cutoff frequency:</p><p>$$\omega_c = \tan(\theta_c/2) = \tan(\pi/8) = 0.4142$$</p><p>Now we apply the bilinear transform $s = \psi(z) = \frac{z-1}{z+1}$</p><p>$$G(z) = G_c(\psi(z)) = … = \frac{0.2929(z+1)}{z-0.4142}$$</p><p>Whose implementation reads:</p><p>$$y_k = 0.4142y_{k-1} + 0.2929(u_k + u_{k-1})$$</p><blockquote><p>In line with the introduction, we find that the IIR implementation is much more concise than the digital one. Requiring much fewer memory and computation</p></blockquote><h2 id="Band-Transformation"><a href="#Band-Transformation" class="headerlink" title="Band Transformation"></a>Band Transformation</h2><p>Analogue prototypes are typically lowpass. Standard transformation can be used to convert lowpass prototype into other types:</p><p><img src="fig19.png"></p><h2 id="Classical-analogue-prototypes"><a href="#Classical-analogue-prototypes" class="headerlink" title="Classical analogue prototypes"></a>Classical analogue prototypes</h2><p>pass</p><h1 id="Nyquist-Stability-Criterion"><a href="#Nyquist-Stability-Criterion" class="headerlink" title="Nyquist Stability Criterion"></a>Nyquist Stability Criterion</h1><p>Assuming the controller is a constant gain $K$, and that the plant has transfer function $G$. The closed loop system is stable <em>if and only if</em>:</p><p><em>The number of counter clockwise encirclement of the $-1/K$ point by $G(e^{j\theta})$ as $\theta$ increases from $0$ to $2\pi$ equals the number of open-loop unstable poles.</em></p><blockquote><p>The Nyquist diagram is drawn for <strong>the open loop transfer function</strong>.</p><p>Note that poles on the unit circle is counted as <strong>stable</strong> poles.</p></blockquote><h2 id="Asymtopotic-behaviour"><a href="#Asymtopotic-behaviour" class="headerlink" title="Asymtopotic behaviour"></a>Asymtopotic behaviour</h2><p><strong>When there are poles on the unit circle, the Nyquist diagram will explode in magnitude when $e^{j\theta}$ approaches the pole in a straight line</strong>. However, we can still investigate the asymtopotic behaviour by a trick of <em>Taylor expansion</em>.</p><p>Suppose we $G(z)$ has pole $z=1$ with multiplicity $1$. We can write $G(z)$ as:</p><p>$$G(z) = \frac{1}{(z-1)}F(z)$$</p><p>where $F(z)$ has no poles or zeros at $z=1$</p><p>Then for $z \approx 1$, expand $F(z)$ in a Taylor series to give</p><p>$$G(z) = \frac{1}{(z-1)}\left( F(1)+F’(1)(z-1)+O(z^2)\right)$$</p><p>$$ G(z) \approx \frac{F(1)}{(z-1)} + F’(1) $$</p><p>We can work out $\frac{1}{e^{j\theta}-1} = -1/2 - \frac{j}{2\tan (\theta /2)}$. Therefore, the asymptote as $\theta\rightarrow 0$ will be a straight line with a constant real part of $-1/2 F(1) + F’(1)$</p><h2 id="Drawing-Nyquist-diagram"><a href="#Drawing-Nyquist-diagram" class="headerlink" title="Drawing Nyquist diagram"></a>Drawing Nyquist diagram</h2><p>A <strong>Nyquist plot</strong> is a <a href="https://en.wikipedia.org/wiki/Parametric_plot">parametric plot</a> of a frequency response used in <a href="https://en.wikipedia.org/wiki/Control_systems">automatic control</a> and <a href="https://en.wikipedia.org/wiki/Signal_processing">signal processing</a>. The most common use of Nyquist plots is for assessing the stability of a system with <a href="https://en.wikipedia.org/wiki/Feedback">feedback</a>. In <a href="https://en.wikipedia.org/wiki/Cartesian_coordinates">Cartesian coordinates</a>, the <a href="https://en.wikipedia.org/wiki/Complex_number">real part</a> of the <a href="https://en.wikipedia.org/wiki/Transfer_function">transfer function</a> is plotted on the <em>X</em>-axis. The <a href="https://en.wikipedia.org/wiki/Complex_number">imaginary part</a> is plotted on the <em>Y</em>-axis. The frequency is swept as a parameter, resulting in a plot per frequency. </p><p><a href="https://www.youtube.com/watch?v=AQvSCXYNl6U">Nyquist Sketch Example</a> is a nice video showing how to sketch a Nyquist diagram for continuous system ($s$-domain).</p><p>For </p><h1 id="Continuous-Discrete-Interfaces"><a href="#Continuous-Discrete-Interfaces" class="headerlink" title="Continuous/Discrete Interfaces"></a>Continuous/Discrete Interfaces</h1><h2 id="Digital-to-analogue-converter-DAC"><a href="#Digital-to-analogue-converter-DAC" class="headerlink" title="Digital-to-analogue converter (DAC)"></a>Digital-to-analogue converter (DAC)</h2><p>Take the number of sequence $u(kT)$ and produces a continuous time signal $u(t)$</p><p><em>Zero-order hold</em></p><p>$$u(t) = u(kT)$$</p><p><img src="fig20.png"></p><p><em>First-order hold</em></p><p><img src="fig21.png"></p><h2 id="Transfer-function-analysis-of-DAC-and-ADC-interfaces"><a href="#Transfer-function-analysis-of-DAC-and-ADC-interfaces" class="headerlink" title="Transfer function analysis of DAC and ADC interfaces"></a>Transfer function analysis of DAC and ADC interfaces</h2><p>In most real world system, we typically have a computer (digital) as the controller, and a physical device (analogue) as the plant, the device’s motion or other quantity of interests is measured in digital form (digital), and fed back to the computer. The setup is illustrated below:</p><p><img src="fig22.png"></p><p>The big question is: <strong>is there a transfer function $G(z)$ from $u$ to $y$?</strong>. And the answer is <strong>yes if the plant is linear and time-invariant</strong>. To find it, we just need to compute the ratio of input and output. An example is given below:</p><p><img src="fig23.png"></p><h2 id="Sampling-frequency-analysis"><a href="#Sampling-frequency-analysis" class="headerlink" title="Sampling frequency analysis"></a>Sampling frequency analysis</h2><p>Sampling an analogue signal is like multiplying a train of deltas in the <em>time domain</em>, which corresponds to <strong>convolving</strong> a train of deltas in the frequency domain. Thus we expect to see <em>periodic</em> frequency spectrum as convolving delta with frequency $\Omega$ is just like shifting and replicating the graph by $\Omega$</p><p>In light of this, in order to fully recover the original signal, our sampling frequency must be <strong>at least equal to twice the maximum frequency in the signal</strong> to avoid overlapping frequency range. $2\omega_{max}$ is the <strong>Nyquist Frequency</strong></p><p>To recover the spectrum, we only need to apply a low-pass filter to the signal. Because ideal low-pass filter cannot be built, we often require our sampling frequency to be greater than the Nyquist frequency, to allow for a transition band.</p><h1 id="Discrete-Fourier-Transform"><a href="#Discrete-Fourier-Transform" class="headerlink" title="Discrete Fourier Transform"></a>Discrete Fourier Transform</h1><p><strong>Discrete time Fourier transform</strong> (DTFT)</p><p>$$\bar{x}<em>\omega = DTFT(x) = \sum</em>{k=0}^\infty x_ke^{-j\omega Tk}$$</p><p>The DTFT has two infeasibilities embedded in its definition:</p><ol><li>$\omega$ is continuous, hence infinite.</li><li>The sum is infinite and hence infeasible to compute</li></ol><p>To deal with that we introduce the discrete Fourier transform:</p><p><strong>Discrete Fourier transform</strong> (DFT)</p><p>$$\bar{x}<em>p = \sum</em>{k=0}^{N-1}x_k e^{-j\frac{2\pi}{N}pk}$$</p><p>We now have:</p><ol><li>Finite number of frequencies: $\omega = \frac{2\pi\times 1}{N},\frac{2\pi\times 2}{N}, …,  \frac{2\pi\times (N-1)}{N}$. This corresponds to $0 \leq p \leq N-1$</li><li>Finite computation: finite data points $0 \leq k \leq N-1$</li></ol><p>Because the signal is discrete, its fourier transform will be periodic. $\bar{x}<em>p = \bar x</em>{p+N}$</p><p>By observing the definitions for DFT and DTFT, we can see that $\omega T  = \frac{2\pi p}{N}$. This is the <em>normalized angular frequency</em> which converts indices $k$ to radian. It itself has unit of radian.</p><p><strong>Z-transform and DFT</strong></p><p>If we compare the definition of Z-transform and DFT, we can se that <em>the $p^{th}$ coefficient of the DFT is nothing but the Z-transform with</em> $z = e^{-j\frac{2\pi}{N}p}$</p><h2 id="DFT-as-vector-base"><a href="#DFT-as-vector-base" class="headerlink" title="DFT as vector base"></a>DFT as vector base</h2><p>$$\bar{x}<em>p = \sum</em>{k=0}^{N-1}x_k e^{-j\frac{2\pi p}{N}k}$$</p><p>The formula of DFT hints that we can treat the coefficient as <em>projection to a vector base</em>. If we let $x = [x_0, x_1, …, x_{N-1}]^T$ and $b(p,N) = [\exp(-j\frac{2\pi}{N})\cdot 0, \exp(-j\frac{2\pi}{N})\cdot 1, … , \exp(-j\frac{2\pi}{N})\cdot (N-1)]^T$ </p><p>Then</p><p>$$\bar x_p = b(p,N)’x$$</p><p>In plain English, $\bar x_p$ is the <strong>projection</strong> of $x$ on the base $b(p,N)$. It is essentially a linear operation.</p><p>We can further pack the expression to obtain the coefficent vector with matrix-vector multiplication as follows:</p><p><img src="fig24.png"></p><h2 id="inverse-DFT-iDFT"><a href="#inverse-DFT-iDFT" class="headerlink" title="inverse DFT (iDFT)"></a>inverse DFT (iDFT)</h2><p>In essence, iDFT share the same algorithm as DFT.</p><p><img src="fig25.png"></p><h2 id="Circular-convolution"><a href="#Circular-convolution" class="headerlink" title="Circular convolution"></a>Circular convolution</h2><p>The inverse DFT of the <strong>product</strong> of the DFTs</p><p>$$\bar y_p = \bar g_p \bar x_p, {\bar y_p} \rightarrow {y_m}$$</p><p>is the <strong>circular convolution</strong> of $x$ and $g$</p><p>$$y_m = \sum_{k=0}^{N-1}g_kx_{mod(m-k, N)}$$</p><h2 id="Filter-response-via-DFT"><a href="#Filter-response-via-DFT" class="headerlink" title="Filter response via DFT"></a>Filter response via DFT</h2><p>We note that circular convolution is equivalent to standard convolution if $M \leq m &lt; N$</p><p>$$\sum_{k=0}^\infty g_k x_{m-k} = \sum_{k=0}^{M}g_k x_{m-k} = \sum_{k=0}^{N-1} g_k x_{mod(m-k, N)}$$</p><p>where $M+1$ is the number of coefficients of the FIR filter ($M$ is the FIR horizon), $N$ is the total number of samples and $m$ is the index of the DFT coefficient.</p><blockquote><p>Note that $M$ is called the FIR horizon, which is the number of coefficients <strong>excluding</strong> $g_0$</p></blockquote><p>The idea is that FFT-iFFT computes the <strong>circular convolution</strong> between input $x_k$ and system response $h_k$, but what we actually want is <strong>linear convolution</strong> between the two. To do that, we tweak $x_k$ to be $\tilde x_k$ so that the circular convolution between $\tilde x_k$ and $h_k$ is equivilent to that linear convolution between $x_k$ and $h_k$.</p><p><img src="fig26.png"></p><p>The batch scheme will give us $N-M$ new points upon each DFT computation. This can be done efficiently using the FFT algorithm.</p><h1 id="Fast-Fourier-Transform-FFT"><a href="#Fast-Fourier-Transform-FFT" class="headerlink" title="Fast Fourier Transform (FFT)"></a>Fast Fourier Transform (FFT)</h1><p>The fast Fourier transform is essentially an algorithm that computes the DFT in an effcient way. It does this by <strong>divide-and-conquer</strong>. The time complexity is $N\log N$ as compared with $N^2$, a significant improvement.</p><p>Recall that</p><p>$$\bar{x}<em>p = \sum</em>{k=0}^{N-1}x_k e^{-j\frac{2\pi}{N}pk}$$</p><p>We can split the summation into two parts:</p><p>$$\bar{x}<em>p = \sum</em>{k=0}^{N/2-1}x_{2k} e^{-j\frac{2\pi}{N}p(2k)} + \sum_{k=0}^{N/2-1}x_{2k+1} e^{-j\frac{2\pi}{N}p(2k+1)}$$</p><p>$$\bar{x}<em>p = \sum</em>{k=0}^{N/2-1}x_{2k} e^{-j\frac{2\pi}{N/2}pk}+ e^{-j\frac{2\pi}{N}p}\sum_{k=0}^{N/2-1}x_{2k+1} e^{-j\frac{2\pi}{N/2}pk}$$</p><p>$$\bar x_p = A_p + W^p B_p$$</p><p>In vector notation</p><p>$$b(p,N)’x = A_p + W^pB_p = b(p,N/2)’x_A + W^p b(p,N/2)’x_B$$</p><p>where $x_A = [x_0,x_2,…,x_{N-2}]’$, and $x_B = [x_1, x_3, …, x_{N-1}]’$</p><p>We also note that $\bar x_{p+N/2} = A_p - W^p B_p$. This is called exploiting <strong>redundancy</strong></p><p>These two observations allow us to go from $N$ DFT to $2\times N/2$ DFT and use past computation.</p><p>The below diagram illustrates one recursive stage. Obviously we can further simplify our computation of $N/2$ DFT, until we reach our data point ($1$ DFT).</p><p><img src="fig27.png"></p><p><img src="fig28.png"></p><p>We notice that it requires some shuffle of input data to compute the final sequence of DFT coefficients in order. The order of input data can be obtained by <em>reversing the binary representation of subscript</em>, as illustrated below:</p><p><img src="fig29.png"></p><p>The inverse fft is simply</p><p>$$x = \frac{1}{N}FFT(\bar{x}^*)^*$$</p><p>which follows from our previous discussion of the inverse FFT’s nature.</p><h1 id="Continuous-Time-Random-Signals"><a href="#Continuous-Time-Random-Signals" class="headerlink" title="Continuous Time Random Signals"></a>Continuous Time Random Signals</h1><p>A <strong>random signal</strong> is a time-dependent random variable, $X(t)$. We can formalize this notion by considering the act of drawing randomly from a set of possible signal waveforms, which we call an <strong>ensemble</strong>. The ensemble of random signals together with the associated probability distributions is known as <strong>Random Process</strong>.</p><p>Formally, we can write $X(t,\alpha)$ to represent an instace of a random process, where $\alpha$ represents a draw from some set $A$. The random process is then denoted ${X(t,\alpha)}$</p><blockquote><p>Note that $\alpha$ <strong>deterministically</strong> decide the random variable $X$. It can be regarded as an <em>index</em></p></blockquote><p>Stationary: statistic of the signal doesn’t change over time. A classical example of a non-stationary signal would be a recording of sound.</p><h2 id="Correlations-and-covariance"><a href="#Correlations-and-covariance" class="headerlink" title="Correlations and covariance"></a>Correlations and covariance</h2><p><strong>Autocorrelation</strong> is defined as:</p><p>$$r_{XX}(t_1, t_2) = E[X(t_1)X(t_2)] = \int\int x_1x_2f(x_1,x_2)dx_1dx_2$$</p><p><strong>Autocovariance</strong> is defined as:</p><p>$$c_{XX}(t_1, t_2) = E[(X(t_1)-\bar{X}<em>{t_1})(X(t_2)-\bar{X}</em>{t_2})] = \int\int (x_1-\bar X_{t_1})(x_2 - \bar X_{t_2})f(x_1,x_2)dx_1dx_2$$</p><p>expanding the expression:</p><p>$$c_{XX}(t_1, t_2) = r_{XX}(t_1, t_2) - \bar{X}_{t_1}\bar{X}_{t_2}$$</p><p>This looks like $Var(X) = E(X^2) - E(X)^2$</p><p><strong>Cross correlation</strong> of two different processes, $X$ and $Y$:</p><p>$$r_{XY}(t_1,t_2) = E[X(t_1)Y(t_2)] = \int\int x_1 y_2 f_{xy}(x_1, y_2)dx_1dy_2$$</p><p><strong>Cross covariance</strong> follows similarly:</p><p>$$c_{XY}(t_1,t_2) = r_{XY}(t_1,t_2) - \bar{X}_{t_1}\bar{Y}_{t_2}$$</p><h2 id="Stationarity"><a href="#Stationarity" class="headerlink" title="Stationarity"></a>Stationarity</h2><p><strong>Strict Sense Stationarity</strong> (SSS): a process is SSS iff for all finite $N$ and all sets of time points ${t_1,…,t_N}$, the cdf $F$ of the vector $(X_{t_1},…,X_{t_N})$ is invariant for all time shifts, $T$</p><p><strong>Wide Sense Stationarity</strong> (WSS): a process is WSS iff 1. The mean value is <strong>independent of time</strong>  $E[X(t)]=\mu, \text{ for all } t$ and 2.The autocorrelation depends only on the lag $\tau=t_2-t_1$: $$E[X(t_1)X(t_2)] = E[X(t_1)X(t_1+\tau)] = r_{XX}(\tau)$$</p><blockquote><p>The autocorrelation function (ACF) of a WSS process is symmetric. That is $R_X(\tau) = R_X(-\tau)$. This leads to a real power spectrum density (PSD). See prove at Q4 <a href="Crib_3F1_2019.pdf">here</a></p></blockquote><h2 id="Ergodicity"><a href="#Ergodicity" class="headerlink" title="Ergodicity"></a>Ergodicity</h2><p>If we can exchange <em>ensemble averages</em> for <em>time averages</em>, we say a process is <strong>Ergodic</strong>. This means the ensemble of a process is simply composed of all possible time shifts of a singal random signal.</p><p>We define the time average as:</p><p>$&lt;X(t)&gt;<em>T = \lim</em>{T\rightarrow\infty} \frac{1}{2T}\int_{-T}^{T} X(t)dt$</p><p>$X$ can be <strong>mean ergodic</strong> and <strong>correlation ergodic</strong>. </p><p>Ergodicity greatly simplifies the measurement of WSS processes. In reality, no proces is truly stationary (therefore cannot be Ergodic) but many noise processes are approximatedly stationary for finite periods.</p><p>$$r_{XX}(\tau) = \frac{1}{T_2-T_1}\int_{T_1}^{T_2}X(t)X(t+\tau)dt$$</p><p>The interval should be large enough to capture variation in the autocorrelation, but not so large that the process ceases to be stationary.</p><h2 id="Power-Spectrum-Density"><a href="#Power-Spectrum-Density" class="headerlink" title="Power Spectrum Density"></a>Power Spectrum Density</h2><p>The power spectrum density (PSD) $S_X(\omega)$ is defined as the Fourier Transform of the autocorrelation function (ACF). That is, $S_X(\omega) = \int_{-\infty}^\infty R_X(\tau)e^{-j\omega\tau}d\tau$. </p><p>We can tell the power of the signal from the power spectrum density. We know that $P_X=r_{xx}(0) = \frac{1}{2\pi}\int_{-\infty}^\infty S_X(\omega)e^{j\omega\tau}d\omega|<em>{\tau=0} = \frac{1}{2\pi}\int</em>{-\infty}^\infty S_X(\omega)d\omega$. By using the inverse Fourier Transform formula. If a signal is passed through an ideal filter with cutoff frequency $\omega_c$, then the limits will be from $-\omega _c$ to $\omega_c$. </p><blockquote><p>This can be thought of as a direct consequence of Parserval’s Theorem as well, noting the the PSD is the frequency spectrum squared. So there is no power of two in the PSD equation</p></blockquote><h2 id="White-Noise-and-Coloered-Noise"><a href="#White-Noise-and-Coloered-Noise" class="headerlink" title="White Noise and Coloered Noise"></a>White Noise and Coloered Noise</h2><p>A white noise is a zero-mean WSS process, with correlation function $R(\tau) = P_X\delta(\tau)$. It’s PSD is constant across all frequencies (as is approximately true for white light). Therefore, we can measure the system’s linear response by observing its response to white noise where $S_Y = S_X|H(\omega)|^2 = P_X(|H(\omega)|^2)$</p><p>We also have <em>colored noise</em> such as brown noise and pink noise. Their frequencies response decays with $1/\omega^\alpha$</p><p><img src="image-20210327145201370.png" alt="image-20210327145201370"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Cambridge</tag>
      
      <tag>Note</tag>
      
      <tag>Control</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Notes on Statisitcal Signal Processing</title>
    <link href="/2020/11/01/Notes-on-Statisitcal-Signal-Processing/"/>
    <url>/2020/11/01/Notes-on-Statisitcal-Signal-Processing/</url>
    
    <content type="html"><![CDATA[<h1 id="Probablity-Space"><a href="#Probablity-Space" class="headerlink" title="Probablity Space"></a>Probablity Space</h1><p>To <em>mathematically</em> describe a random experiment we must specifuy:</p><ol><li>The <strong>Sample space</strong> $\Omega$, which is the set of all possible outcomes of the random experiment. We call any subset $A<br>\subseteq \Omega$ an <strong>event</strong></li><li>A mapping/function $P$ from events to a number in the interval $[0,1]$. That is we must specify ${P(A), A\subset \Omega}$. We call $P$ the <strong>probability</strong>.</li></ol><p>We then call $(\Omega, P)$ the <strong>probability space</strong>.</p><h2 id="Axioms-of-probability"><a href="#Axioms-of-probability" class="headerlink" title="Axioms of probability"></a>Axioms of probability</h2><p>A probability $P$ assigns each event $E, E \subset \Omega$, a number in $[0,1]$ and $P$ must satisfy the following properties:</p><ol><li>$P(\Omega)=1$</li><li>If $A_1,A_2,…$ are disjoint then $P(\cup_{i=1}^\infty = \sum_{i=1}^\infty P(A_i)$</li></ol><h1 id="Conditional-Probability-and-Independence"><a href="#Conditional-Probability-and-Independence" class="headerlink" title="Conditional Probability and Independence"></a>Conditional Probability and Independence</h1><h1 id="Random-Variables"><a href="#Random-Variables" class="headerlink" title="Random Variables"></a>Random Variables</h1><h1 id="Bivariates-and-Conditional-Expectation"><a href="#Bivariates-and-Conditional-Expectation" class="headerlink" title="Bivariates and Conditional Expectation"></a>Bivariates and Conditional Expectation</h1><h1 id="Multivariate"><a href="#Multivariate" class="headerlink" title="Multivariate"></a>Multivariate</h1><h1 id="Characteristic-Function"><a href="#Characteristic-Function" class="headerlink" title="Characteristic Function"></a>Characteristic Function</h1><p>The characteristic function of a random variable is given by $\phi_X(t) = \mathbb{E}[\exp(iXt)]$. The information of a random variable is entirely captured by its characteristic function. <strong>We can compute the $n^{th}$ moment of $X$ $E(X^n)$ using the relationship $i^nE[X^n] = \frac{d^n}{dt^n}\phi_X(t)|_{t=0}$</strong>. This can be shown by expanding the exponential as a power series:</p><p><strong>The characteristic function is related to the Fourier transform</strong> of by $\phi_X(t) = F_X(-t)$, if $F_X(\omega)$ is the Fourier transform of the probability density function $f_X(x)$ (p.d.f.) of $X$.</p><img src="image-20210422151300829.png" alt="image-20210422151300829" style="zoom: 67%;" /><h1 id="Markov-Chain"><a href="#Markov-Chain" class="headerlink" title="Markov Chain"></a>Markov Chain</h1><p>Let ${X_n}$ be discrete random variables taking values in $S={1,…,L}$. </p><p>The transitional probability matrix ${Q_{ij}} = \text{probability from state i to state j}$.</p><p>For it be a markov chain. We must specify that the current pmf only depends on the previous sample. This is the <strong>Markov Property</strong></p><h2 id="Invariant-Stationary-Distribution"><a href="#Invariant-Stationary-Distribution" class="headerlink" title="Invariant/Stationary Distribution"></a>Invariant/Stationary Distribution</h2><p>If we have $\pi Q  = \pi$, where $\pi$ is a row vector. Then we call it the <strong>stationary distribution</strong></p><p>If we initialize the chain with $\pi$. Then for any $n$ we have</p><p>$$p_{x_n}(i_n) = \pi_{i_n}$$</p><h1 id="Time-series-Analysis"><a href="#Time-series-Analysis" class="headerlink" title="Time-series Analysis"></a>Time-series Analysis</h1><p>A time series is a set of observations $y_n, n=0,1,…$ arranged in time.</p><h2 id="AR-process"><a href="#AR-process" class="headerlink" title="AR process"></a>AR process</h2><p>An <strong>auto-regressive</strong> (AR) process is defined as the following:</p><p>Let ${W_n}_{n=-\infty}^{\infty}$ be a sequence of random variables such that $E(W_n) = 0$ for all $n$, and that the <em>auto-correlation</em> satisfies:</p><p>$$E(W_i, W_j) = \sigma^2 \text{ for } i = j$$</p><p>$$E(W_i, W_j) = 0 \text{ for } i \neq j$$</p><blockquote><p>The auto-correlation function $E(X_nX_{n+k}) = R_X(k)$, if $X$ is W.S.S. (see definition below)</p></blockquote><p>The $AR(p)$ process ${X_n}_{n=-\infty}^\infty$ is </p><p>$$X_n = \left( \sum_{i=1}^p a_iX_{n-i}\right) + W_n$$</p><p>where $a_1,…,a_p$ are constants and $p$ is the <em>order</em> of the process.</p><p>For a $AR(1)$ process we can expand by $X_n = aX_{n-1} + W_n = a^2 X_{n-2} + aW_{n-1} + W_n = … = \sum_{k=0}^\infty W_{n-k}a^k$. And we say that $AR(1)$ is causal with impulse response ${h_k}(k\geq 0)$ </p><p>The <strong>mean</strong> $E(X_n) = 0$ and the <strong>variance</strong> $E(X_n^2) = \frac{\sigma^2}{1-a^2}$</p><h2 id="Wide-Sense-Stationary"><a href="#Wide-Sense-Stationary" class="headerlink" title="Wide Sense Stationary"></a>Wide Sense Stationary</h2><p>${X_n}$ is wide-sense stationary (WSS) if:</p><ol><li>$E{[X_n]} = \mu$ for all $n$</li><li>has finite variance, $E{[X^2]} &lt; \infty$</li><li>$E{[X_{n1}X_{n2}]} = E{[X_{n1+k}X_{n2+k}]}$ for any $n_1, n_2, k$. That is, the auto-correlation function is a function of the difference of subscripts only.</li></ol><h2 id="MA-process"><a href="#MA-process" class="headerlink" title="MA process"></a>MA process</h2><p>Let ${W_n}_{n=-\infty}^{\infty}$ be a sequence of random variables such that $E(W_n) = 0$ for all $n$, and that the <em>auto-correlation</em> satisfies:</p><p>$$E(W_i, W_j) = \sigma^2 \text{ for } i = j$$</p><p>$$E(W_i, W_j) = 0 \text{ for } i \neq j$$</p><p>The <em>Moving average</em> $MA(q)$ process $X_n$ is defined as:</p><p>$$X_n = \left(\sum_{i=1}^{q} b_iW_{n-i}\right) + W_n$$</p><p>where $b_1,…,b_q$ are the constants and $q$ is the <em>order</em> of the process.</p><h2 id="Power-spectrum-density"><a href="#Power-spectrum-density" class="headerlink" title="Power spectrum density"></a>Power spectrum density</h2><p>Let $R_X(k)$ be the correlation function of a <strong>discrete time</strong> WSS process. The power spectrum density $S_X(f)$ is defined as:</p><p>$$S_X(f) = \sum_{k=-\infty}^{\infty} R_X(k)e^{-j2\pi fk}$$</p><p>The inversion formula is </p><p>$$R_X(n) = \int_{-1/2}^{1/2}S_X(f)e^{j2\pi fn}df$$</p><p>In plain English, the power spectrum density is the discrete-time Fourier transform (DTFT) of the auto-correlation function.</p><p>There is another notation for power spectrum, which highlights the periodic nature of the power spectrum as follows:</p><p>$$S_X(e^{j\Omega}) = \sum_{m=-\infty}^\infty r_{xx}[m]e^{-jm\Omega}$$</p><p>where the normalized frequency $\Omega = \omega T$, in <em>radius per sample</em>.</p><p>The inversion formula with this notation is</p><p>$$r_{XX}(m) = \frac{1}{2\pi}\int_{-\pi}^{\pi}S_X(e^{j\Omega})e^{jm\Omega}d\Omega$$</p><blockquote><p>In practice it is impossible to do the DTFT so DFT is used instead. We can show that the $|DFT|^2$ of the signal is a <strong>fuzzy</strong> version of the power spectrum density (PSD). This is called Einstein- Wiener- Khinchin Theorem</p></blockquote><h3 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h3><ol><li><p>$S_X(f)$ is a even function.</p></li><li><p>$S_X(f)$ has period of $1$. (equivalent to $S(\omega)$ as period of $2\pi$) That is, $S_X(f)=S_X(f+1)$</p></li><li><p>If $R_X(k)$ is the correlation function of a discrete time WSS process then the power spectrum density $S_X(f)$ is an <em>even, real valued and non-negative</em> function of $f$. Moreover, $S_X(f)$ is a <em>continuous function</em> if $\sum_{k=-\infty}^\infty |R_X(k)| &lt; \infty$</p></li><li><p>If the input ${W_n}$ of an LTI system with impulse response ${h_n}$ is a WSS then its output ${Y_n}$ is also WSS. The power spectrum density is given as: $S_Y(f) = S_W(f)|H(f)|^2$</p></li><li><p>$S_{XY}(\omega)^* = S_{YX}(\omega)$. Where $S_{XY}$ and $S_{YX}$ are the cross power spectrum. </p></li><li><p>The maximum of the autocorrelation function is $r_{XX}(0)$, which equals the power of the signal. This is shown by considering $E[(x_{n+k}-ax_n)^2]$</p></li></ol><h3 id="Interpretation"><a href="#Interpretation" class="headerlink" title="Interpretation"></a>Interpretation</h3><p>For a deterministic signal, the instantaneous power if $x_n^2$. The <em>average</em> power is</p><p>$$\lim_{N\rightarrow\infty} \frac{1}{2N+1}\sum_{n=-N}^{N}x_n^2$$</p><p>For a random process $X_n$, the <em>expected</em> instantaneous power is $E(X_n^2)$ while the <em>expected</em> average power is</p><p>$$E\left(\lim_{N\rightarrow\infty} \frac{1}{2N+1}\sum_{n=-N}^{N}x_n^2\right) = \lim_{N\rightarrow\infty} \frac{1}{2N+1}\sum_{n=-N}^{N}E(x_n^2)$$</p><p>If the process is WSS, then $E(x_n^2) = R_X(0)$ for all $n$. Thus $R_X(0)$ is the expected value of the average power. </p><p>Using the Fourier inversion formula</p><p>$$R_X(n) = \int_{-1/2}^{1/2}S_X(f)e^{j2\pi fn}df$$</p><p>We see that $R_X(0)$ is also the area under the non-negative function $S_X(f)$ between $[-1/2, 1/2]$. That shows way it is the <strong>power spectrum density</strong>.</p><p>The power spectrum can be interpreted as a density spectrum in the sense that the mean-square signal value at the output of an ideal band-pass filter with lower and upper cut-off frequencies of $\omega_l$ and $\omega_u$ is given by </p><p>$$\frac{1}{\pi} \int_{\omega_lT}^{\omega_uT} S_X(e^{j\Omega})d\Omega$$</p><h1 id="Linear-Systems-and-Random-Processes"><a href="#Linear-Systems-and-Random-Processes" class="headerlink" title="Linear Systems and Random Processes"></a>Linear Systems and Random Processes</h1><p>If we pass a WSS discrete random process $X_n$ through a <em>stable, linear time invariant</em> (LTI) system with digital impulse response $h_n$, the output $Y_n$ is the convolution between the signal and impulse response.</p><p>$$y_n = \sum_{k=-\infty}^{\infty}h_k x_{n-k} = x_n * h_n$$</p><p>and is also wide-sense stationary.</p><p>We can relate the output correlation functions and power spectra in terms of the input statistics and the LTI system.</p><p>$$r_{XY}[k] = E[X_n Y_{n+k}] = \sum_{l=-\infty}^\infty h_l r_{XX}[k-l] = h_k * r_{XX}[k]$$</p><p>This is the <strong>cross-correlation</strong> function at the output of a LTI system.</p><p>$$r_{YY}[k] = E[Y_n Y_{n+k}] = \sum_{k=-\infty}^\infty\sum_{l=-\infty}^\infty h_k h_i r_{XX}[l+i-k] = h_l * h_{-l} * r_{XX}[k]$$</p><p>This is the <strong>auto-correlation</strong> function at the output of a LTI system. The below figure summarizes the relationship.</p><p><img src="fig1.png"></p><p>The result verifies that in the frequency domain, we have</p><p>$$S_Y(e^{j\omega T}) = |H(e^{j\omega T})|^2 S_X{e^{j\omega T}}$$</p><p>which relates the output power spectrum to the input power spectrum and the linear system response.</p><h2 id="Example-AR-process"><a href="#Example-AR-process" class="headerlink" title="Example: AR process"></a>Example: AR process</h2><p>AR process is a typical example of applying a linear filter. Recall that for a $AR(1)$ process we have</p><p>$$d_n = a_1d_{n-1} + e_n$$</p><p>We can find the linear system’s impluse response by taking the Z transform:</p><p>$$D(z) = a_1z^{-1}D(z) + E(z) = H(z)E(z)$$</p><p>Hence after rearranging:</p><p>$$H(z) = \frac{1}{1-a_1z^{-1}}$$</p><p>We can obtain the frequency domain of the filter by simple substitution $z = e^{j\omega}$. This gives us the power spectrum for the impulse response.</p><p>$$H(\omega) = \frac{1}{1-a_1\exp(-j\omega)}$$</p><p>Now it is easy to derive the power spectrum of the output signal from $S_{YY}(\omega) = |H(\omega)|^2S_{XX}(\omega)$. Suppose $e_n$ is white noise with variance $\sigma^2$</p><p>$$S_{dd}(\omega) = \frac{\sigma^2}{(1-a_1\exp(-j\omega))(1-a_1\exp(j\omega))}$$</p><h1 id="Ergodic-Random-Processes"><a href="#Ergodic-Random-Processes" class="headerlink" title="Ergodic Random Processes"></a>Ergodic Random Processes</h1><p>For an <strong>Ergodic</strong> random process we can estimate expectations by performing time-average on a <em>single</em> sample function, instead having to go through the whole family of realization. That is:</p><p>$$\mu = E[X_n] = \lim_{N\rightarrow \infty} \sum_{n=0}^{N-1}x_n  \text{(Mean ergodic)}$$</p><p>$$r_{XX}[k] = \lim_{N\rightarrow\infty} \sum_{n=0}^{N-1}x_nx_{n+k} \text{(Correlation ergodic)}$$</p><h2 id="Condition-of-Ergodic-process"><a href="#Condition-of-Ergodic-process" class="headerlink" title="Condition of Ergodic process"></a>Condition of Ergodic process</h2><p>For a WSS random process. A <strong>necessary</strong> and <strong>sufficient</strong> condition for <em>mean ergodicity</em> is given by:</p><p>$$\lim_{N\rightarrow\infty} \sum_{n=0}^{N-1}c_{XX}[k]=0$$</p><p>where $c_{XX}$ is the <em>auto-covariance</em> function:</p><p>$$c_{XX}[k] = E[(X_n-\mu)(X_{n+k}-\mu)]$$</p><p>and $\mu = E[X_n]$</p><p>A simpler <strong>sufficient</strong> condition for <em>mean ergodicity</em> is that $c_{XX}[0]&lt;\infty$ and $$\lim_{N\rightarrow\infty}c_{XX}[N]=0$$</p><h1 id="Optimal-Filtering-and-the-Wiener-Filter"><a href="#Optimal-Filtering-and-the-Wiener-Filter" class="headerlink" title="Optimal Filtering and the Wiener Filter"></a>Optimal Filtering and the Wiener Filter</h1><h2 id="The-discrete-time-Wiener-filter"><a href="#The-discrete-time-Wiener-filter" class="headerlink" title="The discrete time Wiener filter"></a>The discrete time Wiener filter</h2><p>We have the basic setup as follows: a desired signal $d_n$ is observed in noise $v_n$:</p><p>$$x_n = d_n + v_n$$</p><p>Wiener showed how to design a linear filter which can optimally estimate $d_n$ given just the noisy observation $x_n$ and some <em>assumptions about the statistics</em> of the random signal and noise processes. </p><p>Let’s assume we have access to a <em>non-causal</em> filter $h_p$. THe criterion adopted for Wiener filtering is the <em>mean-squared error (MSE)</em>.</p><p>$$\epsilon_n = d_n - \hat{d}_n = d_n - h_n * x_n$$</p><p>The MSE is then defined as </p><p>$$J = E[\epsilon^2_n]$$</p><p>where the expectation is taken with respect to the random siganl $d$ and the random noise $v$. We would like to minimize $J$ with respect to the filter coefficients $h_p$</p><h2 id="Derivation"><a href="#Derivation" class="headerlink" title="Derivation"></a>Derivation</h2><p>We assume that $x_n$ and $d_n$ are <em>jointly wide-sense statinoary</em>. This means that both processes are WSS and there cross-correlation function depend only on the time difference. We further assume that </p><p>$$E[d_n] = E[v_n] = 0$$</p><p>We can derive the Wiener filter by setting $\frac{\partial J}{\partial h_q} = 0$. After some algebra we arrive at</p><p>$$E[\epsilon_n x_{n-q}] = 0$$</p><p>which is known as the <em>orthogonality principle</em>. Since two random variables $X$ and $Y$ are termed <strong>orthogonal</strong> if </p><p>$$E[XY] = 0$$</p><p>Now, substitute for $\epsilon_n$ and we will arrive at</p><p>$$h_q * r_{XX}[q] = r_{xd}[q]$$</p><p>which yields:</p><p>$$H(\omega) = \frac{S_{xd}(\omega)}{S_X(\omega)}$$</p><p>which is the <em>frequency domain</em> of the Wiener filter.</p><blockquote><p>Note that if we are implementing a FIR filter, then we do not need to turn to the frequency domain because we can simply sovle the linear equations.</p></blockquote><p>Detailed derivation:</p><p><img src="Handwritten_2021-01-24_152357-1473212.jpg" alt="Handwritten_2021-01-24_152357"></p><h2 id="Mean-squared-error-for-the-optimal-filter"><a href="#Mean-squared-error-for-the-optimal-filter" class="headerlink" title="Mean-squared error for the optimal filter"></a>Mean-squared error for the optimal filter</h2><p>Although the filter is optimal, there is no guarantee that the filter is useful. We can look at the MSE to see how much error we have for an optimal filter.</p><p>$$J = E[\epsilon^2] = E[\epsilon_nd_n] - \sum_p h_pE[\epsilon_nx_{n-p}]$$</p><p>We have shown orthogonality before, so the second term goes to zero.</p><p>$$J_{min} = E[\epsilon_nd_n] = r_{dd}[0] - \sum_ph_pr_{xd}[p]$$</p><h2 id="Uncorrelated-signal-and-noise-process"><a href="#Uncorrelated-signal-and-noise-process" class="headerlink" title="Uncorrelated signal and noise process"></a>Uncorrelated signal and noise process</h2><p>If we assume $d_n$ and $v_n$ are uncorrelated, we can further simplify the expression for the Wiener filter by noting that</p><p>$$r_{xd}[q] = E[x_nd_{n+q}] = r_{dd}[q]$$</p><p>$$r_{xx}[q] = r_{dd}[q] + r_{vv}[q]$$</p><p>Hence</p><p>$$S_X(\omega) = S_d(\omega) + S_v(\omega)$$</p><p>This makes our equation for the Wiener filter as</p><p>$$H(\omega) = \frac{S_d(\omega)}{S_d(\omega) + S_v(\omega)}$$</p><p>If we define $\rho(\omega) = S_d(\omega) / S_v(\omega)$ as the (frequency dependent) signal-to-noise (SNR) power ratio. Then</p><p>$$H(\omega) = \frac{1}{1 + 1/\rho(\omega)}$$</p><p>From the equation we can see:</p><ol><li><p>The gain is always non-negative, and range between 0 and 1. Hence the filter will never boost a particular frequency.</p></li><li><p>At frequencies where the SNR is large, the gain tends to unity, and vice versa.</p></li></ol><h2 id="The-FIR-Wiener-filter"><a href="#The-FIR-Wiener-filter" class="headerlink" title="The FIR Wiener filter"></a>The FIR Wiener filter</h2><p>Recall the <em>Wiener-Hopf</em> equation for optimal Wiener filter will degrade into a set of linear equations if ${h_n}$ is finite.</p><p>$$ \sum_{p=0}^{P}h_pr_{xx}[q-p] = r_{xd}[q], q = 0,1,…,P$$</p><p>We can write this as</p><p>$$R_xh = r_{xd}$$</p><p>where $h = [h_0, h_1,…,h_P]’$ and $r_{xd} = [r_{xd}[0],r_{xd}[1],…,r_{xd}[P]]$</p><p><img src="fig2.png"></p><p>$R_X$ is known as the <em>correlation matrix</em>. Note that it is symmetric and has constant diagonals. The impulse response can then be found by matrix inversion.</p><p>In general, we requires a-priori knowledge of the autocorrelation matrix $R_X$ of the input process, the cross correlation between the input ${x_n}$ and the desired signal ${d_n}$to deduce the FIR.</p><p>The minimal MSE is given by $J_{min} = E[\epsilon_n d_n]$</p><p>$$J_{min} = r_{dd}[0] - r_{xd}^TR_X^{-1}r_{xd}$$</p><h2 id="Signal-Detection-Matched-Filters"><a href="#Signal-Detection-Matched-Filters" class="headerlink" title="Signal Detection: Matched Filters"></a>Signal Detection: Matched Filters</h2><p>The Wiener filter shows how to extract a random signal from a random noise environment. We now turn to *<em>detecting a known deterministic signal</em> $s_n$, buried in random noise $v_n$ </p><p>$$x_n=s_n+v_n$$</p><p>The quick result: the optimal filter in terms of *<em>signal-noise ratio</em> (SNR) is simply the reversed normalized signal $\frac{\tilde{s}}{|\tilde s|}$</p><p>The detailed derivation is as follows:</p><p><img src="Receipt_2021-01-24_163827.jpg" alt="Receipt_2021-01-24_163827"></p><h1 id="Estimation-and-Inference"><a href="#Estimation-and-Inference" class="headerlink" title="Estimation and Inference"></a>Estimation and Inference</h1><p>Usually, we have a vector of data points $x$ and would like to infer about the model parameter vector $\theta$. $x$ is a $N$-vector and $\theta$ is a $P$-vector, we often have $|N| \gg |P|$.</p><p>The <strong>estimation</strong> task is to estimate $\hat \theta$ that is close to $\theta$. The end result is a <em>deterministic value</em>. The <strong>inference</strong> task is interested in the whole distribution of $\theta$, i.e., $p(\theta|x)$. The end result is a <em>probability density function</em>.</p><h1 id="The-General-Linear-Model"><a href="#The-General-Linear-Model" class="headerlink" title="The General Linear Model"></a>The General Linear Model</h1><p>The General Linear Model is also known as the <em>Linear Regression</em> model in Machine Learning and Statistics.</p><p>In the Linear Model it is assumed that the data $x$ are generated as a linear function of the parameters $\theta$ with an additive random modelling error term $e_n$:</p><p>$$x_n = g_n^T \theta + e_n$$</p><p>where $g_n$ is a $P$-dimensional column vector.</p><p>The expression may be written for the whole vector $x$ as</p><p>$$x = G\theta + e$$</p><p><img src="image-20210125143528554.png" alt="image-20210125143528554"></p><blockquote><p>We call the left column design matrix <em>Vandermonde matrix</em>, whose row vectors are geometric progressions.</p></blockquote><h2 id="Autoregressive-AR-model"><a href="#Autoregressive-AR-model" class="headerlink" title="Autoregressive (AR) model"></a>Autoregressive (AR) model</h2><p>The AR model is a standard time series model based on an all-pole filtered version of the noise residual:</p><p>$$x_n = \sum_{i=1}^P a_ix_{n-i}+e_n$$</p><p>The above model is said to be of <em>order</em> $P$. </p><p><img src="image-20210125143712630.png" alt="image-20210125143712630"></p><h2 id="Einstein-Wiener-Khinchin-Theorem"><a href="#Einstein-Wiener-Khinchin-Theorem" class="headerlink" title="Einstein-Wiener-Khinchin Theorem"></a>Einstein-Wiener-Khinchin Theorem</h2><p>The theorem shows mathematically that the $|DFT|^2$ of the signal is a fuzzy version of the power spectrum</p><p>![Screen Shot 2021-01-25 at 14.03.11](Screen Shot 2021-01-25 at 14.03.11.png)</p><p>See derivation details below:</p><p><img src="image-20210125143836007.png" alt="image-20210125143836007"></p><p>In summary, the <strong>power spectrum</strong> is the expected value of the <strong>(time-normalized) DTFT-squared</strong> of the signal values.</p><h2 id="Mean-and-Variance-of-Estimators"><a href="#Mean-and-Variance-of-Estimators" class="headerlink" title="Mean and Variance of Estimators"></a>Mean and Variance of Estimators</h2><p>An estimator $\hat \theta$  is <strong>unbiased</strong> if $E[\hat \theta] = \theta$. That is, the expectation equals the true value.</p><p>An estimator $\hat \theta$ is <strong>consistent</strong> if  $\lim_{N\rightarrow\infty}var[\hat\theta]=0$. That is, the variance of the estimator tends to $0$ as $N$ tends to infinity.</p><p>We now investigate a few estimators and check that whether they are unbiased and consistent. We now look at the <em>Monte Carlo Mean Estimator</em> and <em>Ordinary Least Square Estimator</em>. </p><p>First, we show that the Monte Carlo Estimator is unbiased and consistent by looking at the mean and variance of the estimator.</p><p><img src="image-20210125155701691.png" alt="image-20210125155701691"></p><p>We now turn to the ordinary least square estimator. We shall prove that $\theta^{OLS}$ is the <strong>Best Linear Unbiased Estimator (BLUE)</strong> compared to other linear estimator by showing that it has minimum variance for each parameter $\theta_i$. This is done by perturbing the matrix by $\Delta$ such that $D = C + \Delta$. </p><p><img src="image-20210125160000476.png" alt="image-20210125160000476"></p><p><img src="image-20210125160132591.png" alt="image-20210125160132591"></p><p>In fact, if the noise process $e_n$ is <em>white Gaussian noise</em>, then OLS is the <strong>global</strong> best unbiased estimator, beating unlinear ones. However for <em>correlated noise</em>, unlinear estimator wins over it. </p>]]></content>
    
    
    
    <tags>
      
      <tag>Cambridge</tag>
      
      <tag>Notes</tag>
      
      <tag>Computational Statistics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Notes on Inference</title>
    <link href="/2020/10/01/Notes-on-Inference/"/>
    <url>/2020/10/01/Notes-on-Inference/</url>
    
    <content type="html"><![CDATA[<p>% Inference</p><p>% Jinghong Chen</p><p>% 2021-2</p><h1 id="Bayesian-Linear-Regression"><a href="#Bayesian-Linear-Regression" class="headerlink" title="Bayesian Linear Regression"></a>Bayesian Linear Regression</h1><p>Given data $D={\tilde x_n, y_n}$, we assume a generative linear model $y_n = w^T\tilde x + \epsilon_n$, where $\epsilon_n\sim \mathcal{N}(0, \sigma^2)$ with $w$ beinKg the parameters to infer about.</p><p>The <strong>posterior distribution</strong> for $w$ is given by $p(w|y,\tilde X) = \frac{p(y|\tilde X, w)p(w)}{p(y|\tilde X)}$. The <strong>predictive distribution</strong> for $y_\star$ given new corresponding $x_\star$ is $p(y_\star|\tilde x_\star, y, \tilde X)=\int p(y_\star|x_\star, w)p(w|y, \tilde X)dw$</p><p>Exact inference is possible if the  prior and noise distributions are Gaussian. We can use the technique called <em>completing the square</em></p><p><img src="image-20210227110823334.png" alt="image-20210227110823334"></p><p>Using this technique, we can write down the probability distribution for the posterior.</p><h1 id="Classification"><a href="#Classification" class="headerlink" title="Classification"></a>Classification</h1><p>In classification, we aim to 1) partition the input space into $C$ <em>decision regions</em>, one for each class. 2) Each new input is assigned the class of its corresponding decision region and 3) a measurement of <em>confidence</em> (probability) in the decisions.</p><h2 id="Probabilistic-Linear-Classification"><a href="#Probabilistic-Linear-Classification" class="headerlink" title="Probabilistic Linear Classification"></a>Probabilistic Linear Classification</h2><p>In probabilistic linear classification, the <em>class probability</em> is computed as $p(y_n=1|\tilde x, w) = \sigma(w^Tx)$, where $\sigma(\cdot)$ is a monotonically increasing functino which maps $\mathbb{R}$ into $[0,1]$. </p><h3 id="Logistic-Regression"><a href="#Logistic-Regression" class="headerlink" title="Logistic Regression"></a>Logistic Regression</h3><p>With $p(C_2|\phi) = 1 - p(C_1|\phi)$. Here $\sigma(x)=1/(1+\exp(-x))$ is the <em>logistic sigmoid</em> function. This is called <em>logistic regression</em> in statistics.</p><p>For an $M$-dimensional feature space $\phi$, this model has $M$ adjustable parameters. By constrast, the Gaussian class conditional will have $O(M^2)$ parameters expanding quadratically.  </p><p>We now use the maximum likelihood to determine the parameters of the logistic regression model. We use the derivative of the logistic sigmoid function given below:  $$ \frac{d\sigma}{da} = \sigma(1-\sigma) $$ </p><blockquote><p>Note that $1-\sigma(a) = \sigma(-a)$, so we arrive at a convenient relation $\frac{d \ln\sigma(a)}{da} = \sigma(-a)$</p></blockquote><p>For a data set ${\phi_n, t_n}$, where $t_n \in {0, 1}$ and $\phi_n = \phi( \mathbf{x_n})$ (the features), with $n = 1,…,N$, the likelihood function can be written as:<br>$$ p( \mathbf{t}| \mathbf{w}) = \prod_{n=1}^N y_n^{t_n} {(1-y_n)}^{1-t_n} $$<br>where $ \mathbf{t} = (t_1, … ,t_N)^T$ and $y_n = p(C_1|\phi_n)$. We can define an error function by taking the negative logarithm of the likelihood, which gives the <strong>cross entropy error</strong> function in the form<br>$$ E( \mathbf{w}) = -\ln p ( \mathbf{t}| \mathbf{w}) = - \sum_{n=1}^N{t_n \ln y_n + (1-t_n)\ln (1-y_n)} $$<br>where $y_n = \sigma(a_n)$ and $a_n = \mathbf{w}^T \mathbf{\phi}<em>n$. Taking the gradient of the error function with respect to $ \mathbf{w}$, we obtain<br>$$ \nabla E( \mathbf{w}) = \sum</em>{n=1}^N (y_n-t_n)\phi_n $$.</p><blockquote><p>The gradients are in the directions of the feature data points. In two-class classification, the parameters $w$ which defines the decision boundary can be seen as being pulled and repelled by data points depending on their class label in the gradient ascent algorithm.</p></blockquote><p>We can then use <em>Gradient ascend</em> to maximize the log-likelihood given by $w^{new} = w^{old}+\alpha\frac{d\mathcal{L(w)}}{dw}$, where $\alpha$ is the <em>learning rate</em>. </p><p>We should note that when the data is <strong>linearly separable</strong> the ML estimator of the parameters can go to infinity, which is essentially <strong>overfitting</strong>. To counter that, we need to introduce prior on our parameters and use the Bayesian approach.</p><h1 id="Dimensionality-Reduction"><a href="#Dimensionality-Reduction" class="headerlink" title="Dimensionality Reduction"></a>Dimensionality Reduction</h1><p>In dimensionality reduction we aim to find a <em>low dimensional representation</em> of data. This often results in a <em>mapping</em> from data to a <strong>manifold coordinates</strong> and back.</p><blockquote><p>In <a href="https://en.wikipedia.org/wiki/Mathematics">mathematics</a>, a <strong>manifold</strong> is a <a href="https://en.wikipedia.org/wiki/Topological_space">topological space</a> that locally resembles <a href="https://en.wikipedia.org/wiki/Euclidean_space">Euclidean space</a> near each point. More precisely, an <em>n</em>-dimensional manifold, or *<em>n\</em>-manifold* for short, is a topological space with the property that each point has a <a href="https://en.wikipedia.org/wiki/Neighbourhood_(mathematics)">neighborhood</a> that is <a href="https://en.wikipedia.org/wiki/Homeomorphic">homeomorphic</a> to the Euclidean space of dimension <em>n</em>.</p></blockquote><p><img src="image-20210227115143416.png" alt="image-20210227115143416"></p><h2 id="Principal-Component-Analysis-PCA"><a href="#Principal-Component-Analysis-PCA" class="headerlink" title="Principal Component Analysis (PCA)"></a>Principal Component Analysis (PCA)</h2><p>Linear dimensionality reduction method: data manifold assumed to be linear. We try to find the projection that <strong>minimises the square reconstruction error</strong>. The data is then represented by the projection coefficients on the principal directions. </p><p><img src="image-20210227115408044.png" alt="image-20210227115408044"></p><blockquote><p>We can show that the objective is identical to <strong>maximising the variance of projected data</strong></p></blockquote><p>The principal component vectors are the <strong>eigenvectors</strong> of the empirical covariance matrix of the data $\hat S = \frac{1}{N}\sum_n x_nx_n^T$, sorted by the magnitude of eigenvalues. So that the residual lies in the space spanned by the eigenvectors with the smallest eigenvalues. The derivation is as follows:</p><p><img src="image-20210227115955401.png" alt="image-20210227115955401"></p><p><img src="image-20210227120237244.png" alt="image-20210227120237244"></p><h1 id="Clustering"><a href="#Clustering" class="headerlink" title="Clustering"></a>Clustering</h1><h2 id="K-means-Clustering"><a href="#K-means-Clustering" class="headerlink" title="K-means Clustering"></a>K-means Clustering</h2><p>input:  $\mathcal{D}={x_1, x_2,…,x_N}, x_n \in \mathbb{R}^D$<br>Initialise: $m_k\in\mathbb{R}^D$ for $k=1,..,K$</p><p>repeat </p><p>for $n = 1,…,N$</p><p>​    $s_n = \arg\min_k ||x_n - m_k|| $</p><p>for $k = 1,…,K$</p><p>​    $m_k = mean(x_n | s_n = k)$</p><p>until convergence ($s_n$ fixed)</p><h3 id="Theorizing-K-means-Optimizing-Cost-Function-Minimising-Energy"><a href="#Theorizing-K-means-Optimizing-Cost-Function-Minimising-Energy" class="headerlink" title="Theorizing K-means: Optimizing Cost Function / Minimising Energy"></a>Theorizing K-means: Optimizing Cost Function / Minimising Energy</h3><p><img src="image-20210228210742746.png" alt="image-20210228210742746"></p><h2 id="Mixture-of-Gaussian-MoG-Model"><a href="#Mixture-of-Gaussian-MoG-Model" class="headerlink" title="Mixture of Gaussian (MoG) Model"></a>Mixture of Gaussian (MoG) Model</h2><p>The mixture of Gaussian model is a generative model for clustered data. It assumes that the data are generated by sampling from a set of normal distribution with certain class probability (hence the name ‘mixture Gaussian’), as shown below:</p><p><img src="image-20210304185916192.png" alt="image-20210304185916192"></p><h2 id="Expectation-Maximization-Algorithm-EM"><a href="#Expectation-Maximization-Algorithm-EM" class="headerlink" title="Expectation Maximization Algorithm (EM)"></a>Expectation Maximization Algorithm (EM)</h2><p>Instead of doing gradient ascent directly on the log-likelihood, we optimise the <strong>free energy</strong> defined as the difference between log-likelihood and a KL divergence between an arbitrary distribution and the class distribution.</p><p>The free energy is defined as</p><p>$$\mathcal{F}(q(s), \theta)=\log p(x|\theta) - \sum_s q(s)\log\frac{q(s)}{p(s|x,\theta)}$$</p><p>We note that:</p><ol><li>The KL divergence is non-negative and equal zero if and only if $q(s)=p(s|x,\theta)$</li><li>When KL divergence equals zero, the free energy <strong>IS</strong> the log-likelihood</li><li>$q(s)$ can be an arbitrarily chosen to describe the class distribution</li><li>The free energy can be computed using the alternative formular $\mathcal{F}(q, \theta) = \sum_sq(s)\log(p(x|s,\theta)p(s|\theta))- \sum_s q(s)log(q(s))$ to avoid computing the log-likelihood</li></ol><p>The optimisation can then be divided into two steps (much like that in K-means):</p><ul><li>Expectation (E): fixing $\theta$, maximise $\mathcal{F}$ with respect to $q(s)$ (soft assignment)</li><li>Maximisation (M): fixing $q$, maximise $\mathcal{F}$ with respect to $\theta$ (model fitting)</li></ul><p><img src="image-20210228210939731.png" alt="image-20210228210939731"></p><blockquote><p>Note that the free energy can be written as the expectation of $p(x,s|\theta)$ taken w.r.t $q(s)$, <strong>plus</strong> the entropy of $q(s)$. It is sometimes useful to note that $\frac{d}{dp}H_2(p) = -logit(p) = -\log\frac{p}{1-p}$. The nice property about logit function is that it is the <strong>inverse</strong> of the sigmoid function $\sigma(x)=\frac{1}{1+\exp(-x)}$. In other words, if $logit(p)=A$, then $p = \sigma(A)$</p></blockquote><h2 id="EM-Algorithm-Applied-to-Mixture-of-Gaussian-MoG"><a href="#EM-Algorithm-Applied-to-Mixture-of-Gaussian-MoG" class="headerlink" title="EM Algorithm Applied to Mixture of Gaussian (MoG)"></a>EM Algorithm Applied to Mixture of Gaussian (MoG)</h2><p>In summary, the E-step is about making <strong>soft assignment</strong> to the data points and the M-step is about <strong>optimising model parameters</strong> with the soft assignments fixed. </p><p><img src="image-20210306163059675.png" alt="image-20210306163059675"></p><h2 id="Understanding-EM"><a href="#Understanding-EM" class="headerlink" title="Understanding EM"></a>Understanding EM</h2><p>From a high level, we can view EM as a way to do <em>maximum likelihood</em> method over models with <em>latent variables</em>. </p><p>To motivate EM, we note that oftentime $\log p(y)$ is an intractable distribution to maximize (e.g., Mixture of Gaussian), but the joint distribution $\log p(y,z)$ is nicer (e.g., z being the class label). We wish to obtain the maximum likelihood of $\log p(y)$, and we approximate it with $E_{q(z)}[\log p(y,z)]$</p><p>But $z$ is unknown, so we first estimate the latent variable using Bayes’ Rule. This is the <strong>expectation</strong> step.</p><p>After estimating the $z$ (i.e., having got the posterior $q(z|y,\theta)$ for $z$), we take the expectation of $\log p(y,z)$ over $q(z)$ and optimize with respect to the model parameters $\theta$. So our update rule in the <strong>maximization step</strong> is $\theta = \arg\max_{\theta}\mathbb{E}<em>{q(z)}[\log p(y,z)] = \arg\max</em>{\theta}\mathbb{E}_{q(z)}[\log p(y|z)p(z)] $</p><p>The free energy gives us a compact mathematical object to perform the steps above.</p><p>Wessel has a very good explanation of the ideas above, checkout [his notes](Wessel Expectation Maximisation.pdf)</p><h1 id="Sequence-Modelling"><a href="#Sequence-Modelling" class="headerlink" title="Sequence Modelling"></a>Sequence Modelling</h1><h2 id="Markov-Model"><a href="#Markov-Model" class="headerlink" title="Markov Model"></a>Markov Model</h2><h3 id="Gaussian-AR-Models"><a href="#Gaussian-AR-Models" class="headerlink" title="Gaussian AR Models"></a>Gaussian AR Models</h3><p>We can model continuous state with Gaussian Auto Regressive model. The states $y\in\mathbb{R}$ follows the transition $y_{t+1} = \lambda y_t + \sigma \epsilon$, where $\epsilon \sim \mathcal{N(0,1)}$ is standard Gaussian.</p><p><img src="image-20210325000345373.png" alt="image-20210325000345373"></p><h2 id="Hidden-Markov-Models-HMM"><a href="#Hidden-Markov-Models-HMM" class="headerlink" title="Hidden Markov Models (HMM)"></a>Hidden Markov Models (HMM)</h2><p>In HMM, the output of the Markov chain depends on the hidden states. This is illustrated below:</p><p><img src="image-20210324235420800.png" alt="image-20210324235420800"></p><blockquote><p>Note that HMM is fundamentally different from Markov model without latent states. After expansion, a HMM is equivalent to a <em>fully connected</em> chain (which defeats the concept of Markov chain)</p></blockquote><h2 id="Discrete-State-HMM"><a href="#Discrete-State-HMM" class="headerlink" title="Discrete State HMM"></a>Discrete State HMM</h2><p>Below is an example of a HMM with discrete hidden state and Gaussian emission. The stationary distribution resembles a mixture of Gaussian model, with mixing proportion being the stationary distribution of the hidden chain.</p><p><img src="image-20210325000852316.png" alt="image-20210325000852316"></p><h2 id="Linear-Gaussian-State-Space-Model-LGSSM"><a href="#Linear-Gaussian-State-Space-Model-LGSSM" class="headerlink" title="Linear Gaussian State Space Model (LGSSM)"></a>Linear Gaussian State Space Model (LGSSM)</h2><p>LGSSMs refer to models with continuous hidden state and the hidden state transition follows a Gaussian AR model, as shown below:</p><p><img src="image-20210325001658496.png" alt="image-20210325001658496"></p><h2 id="Types-of-Inference"><a href="#Types-of-Inference" class="headerlink" title="Types of Inference"></a>Types of Inference</h2><p>Depending on which probability we are after, inference problem with HMM can be divided into four categories with two sets of criterion: <em>online</em> or <em>offline</em>, <em>marginal</em> or <em>joint</em></p><p><img src="image-20210325013312916.png" alt="image-20210325013312916"></p><h2 id="Terminology-of-Distributions"><a href="#Terminology-of-Distributions" class="headerlink" title="Terminology of Distributions"></a>Terminology of Distributions</h2><p>In HMM questions, there are a lot of distributions defined and they can be confusing. Below is the terminology for these distributions:</p><ul><li><strong>Transition Probability</strong> $p(x_t|x_{t-1})$</li><li><strong>Emitting Probability</strong> $p(y_t|x_t)$</li><li><strong>Filtering Distribution</strong> $p(x_t|y_{1:t})$ (often also called posterior)</li><li><strong>Predicative Distribution</strong> $p(x_{t+1}|y_{1:t})$</li><li><strong>Likelihood</strong> $p(y_{1:T})$</li><li><strong>Forcast Distribution</strong> $p(y_{t+1}|y_{1:t})$</li></ul><h2 id="Kalman-Filter"><a href="#Kalman-Filter" class="headerlink" title="Kalman Filter"></a>Kalman Filter</h2><p>The Kalman filter is an algorithm for filtering. That is, we want to compute $p(x_T|y_{1:T})$, <em>predicting</em> the hidden state with observed data.</p><p><img src="image-20210325002209764.png" alt="image-20210325002209764"></p><p><img src="image-20210412173804561.png" alt="image-20210412173804561"></p><h2 id="Forward-Algorithm"><a href="#Forward-Algorithm" class="headerlink" title="Forward Algorithm"></a>Forward Algorithm</h2><p>The <strong>forward algorithm</strong>, in the context of a <a href="https://en.wikipedia.org/wiki/Hidden_Markov_model">hidden Markov model</a> (HMM), is used to calculate a ‘belief state’: the probability of a state at a certain time, given the history of evidence. The process is also known as <em>filtering</em>. The forward algorithm is closely related to, but distinct from, the <a href="https://en.wikipedia.org/wiki/Viterbi_algorithm">Viterbi algorithm</a>. See more on <a href="https://en.wikipedia.org/wiki/Forward_algorithm">wiki</a>.</p><p><img src="image-20210412180451929.png" alt="image-20210412180451929"></p><p>Note that in the forward algorithm we are interested in the <strong>joint probability</strong> $p(x_t, y_{1:t})$, this makes for a nice recursive relationship. The forward algorithm can also yield <strong>the filtering distribution</strong> $p(x_t|y_{1:t})$ and <strong>the likelihood of the data</strong> $p(y_{1:t})$ as byproducts. This is done by noting that $p(y_{1:t}) = \sum_{x_t}p(x_t, y_{1:t})$ and $p(x_t, y_{1:t})=p(x_t|y_{1:t})p(y_{1:t})$</p><h2 id="Learning-Parameters-of-HMM"><a href="#Learning-Parameters-of-HMM" class="headerlink" title="Learning Parameters of HMM"></a>Learning Parameters of HMM</h2><p>EM algorithm or direct optimisation</p><h1 id="Extensions"><a href="#Extensions" class="headerlink" title="Extensions"></a>Extensions</h1><p><a href="https://www.youtube.com/watch?v=btr1poCYIzw">Hidden Markov Models for unsupervised high dimensional video understanding</a>. This can be useful for migration to NLP tasks!e</p>]]></content>
    
    
    
    <tags>
      
      <tag>Cambridge</tag>
      
      <tag>Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Notes on Marketing</title>
    <link href="/2020/10/01/Notes-on-Marketing/"/>
    <url>/2020/10/01/Notes-on-Marketing/</url>
    
    <content type="html"><![CDATA[<h1 id="Market-Theory-and-Market-Orientation"><a href="#Market-Theory-and-Market-Orientation" class="headerlink" title="Market Theory and Market Orientation"></a>Market Theory and Market Orientation</h1><h2 id="What-is-Marketing"><a href="#What-is-Marketing" class="headerlink" title="What is Marketing?"></a>What is Marketing?</h2><p>Economics assumes rationality, marketing acknowledges the irrationality in the realization of supply-demand model, and tries to bring in reality into economics.</p><blockquote><p>The 2004 AMA (American Marketing Association) defines Marketing as: <strong>An organizational function and a set of processses for creating, communicating and delievering value to the customers and for managing customer relationships in ways that benefit the organization and its stakeholder.</strong></p></blockquote><p>Product Oriented (good product sells itself) -&gt; Sales Oriented (aggressive selling) -&gt; Market Oriented (helps customer solve problem)</p><h2 id="Product-in-Market-Orientation-MO"><a href="#Product-in-Market-Orientation-MO" class="headerlink" title="Product in Market Orientation (MO)"></a>Product in Market Orientation (MO)</h2><p>In a market orientation, <strong>The product is anything that delivers a benefit needed by a customer. It is a need-satisfying offering.</strong> </p><blockquote><p><em>People don’t want to buy a quarter-inch drill bit. They want a quarter-inch hole.</em></p></blockquote><p>Marketing has become an organizational effort, it should be feeded into all steps of product design. Identifying a market need should be the first step of product life line. </p><h2 id="Implementing-a-Market-Orientation"><a href="#Implementing-a-Market-Orientation" class="headerlink" title="Implementing a Market Orientation"></a>Implementing a Market Orientation</h2><p>There are three major aspects to implement a market orientation: <strong>Intelligence Generation, Intelligence Dissemination</strong> and <strong>Responsiveness</strong></p><p><img src="image-20210430231737094.png" alt="image-20210430231737094"></p><p><img src="image-20210430231938798.png" alt="image-20210430231938798"></p><h2 id="Benefits-of-MO"><a href="#Benefits-of-MO" class="headerlink" title="Benefits of MO"></a>Benefits of MO</h2><p>There are four major aspects of benefits: <strong>Organizational Performance, Customer Consequences, Innovation Consequences</strong> and <strong>Employee Consequences</strong>. </p><p><img src="image-20210430232137157.png" alt="image-20210430232137157"></p><h2 id="Drivers-for-MO"><a href="#Drivers-for-MO" class="headerlink" title="Drivers for MO"></a>Drivers for MO</h2><p><strong>Top Management factors, Interdepartmental factors</strong> and <strong>Organizational systems</strong> can facilitate market orientation.</p><p><img src="image-20210430232938998.png" alt="image-20210430232938998"></p><h2 id="Forms-of-MO"><a href="#Forms-of-MO" class="headerlink" title="Forms of MO"></a>Forms of MO</h2><p><img src="image-20210430233218316.png" alt="image-20210430233218316"></p><blockquote><p>Companies that rely too much on current customers may become victim of the “tyranny of the served market”.Customers should not be trusted to come up with solutions; they aren’t expert or informed enough for that part of the innovation process.</p></blockquote><p>Needs can be <em>existing</em> when solution already exists, <em>latent</em> when the customer knows about it and no solution exists, or <em>Incipient</em> when the customers do not know about their need yet (IPod, Uber, Airbnb).</p><p><em>Incipient</em> solution is more radical, but more likely to be innovational because there can be no competitors.</p><h3 id="The-Strategy-Curve-Model"><a href="#The-Strategy-Curve-Model" class="headerlink" title="The Strategy Curve Model"></a>The Strategy Curve Model</h3><p>The strategy curve is an excellent way to assess <strong>where we are,</strong> <strong>where we want to be,</strong> and <strong>how to get there</strong>.</p><p>Below is an example strategy curve for an airliner:</p><p><img src="image-20210430233502287.png" alt="image-20210430233502287"></p><h3 id="Blue-Ocean-Strategy"><a href="#Blue-Ocean-Strategy" class="headerlink" title="Blue Ocean Strategy"></a>Blue Ocean Strategy</h3><p>A blue ocean strategy refers to one that creates a market <strong>without competition</strong>. It is a <em>market-driving</em> strategy rather than a <em>market-driven</em> one. One way to try to find a blue ocean is to use a visualized competition factor profile and identify a profile that is distinguishing and effective.</p><p>Examples of blue ocean strategy includes Apple and Kangaroo. The latter made wine tasting less intimidating and sells the sense of advanture, boosting coverage and wine consumption. The Australian firm manages to become the biggest exporter to America in just two years time.</p><h1 id="Marketing-Management"><a href="#Marketing-Management" class="headerlink" title="Marketing Management"></a>Marketing Management</h1><h2 id="Value-based-Marketing"><a href="#Value-based-Marketing" class="headerlink" title="Value-based Marketing"></a>Value-based Marketing</h2><p>Value = Benefits / Price</p><p>Note the benefits and prices include <em>tangible</em> and <em>intangible</em> parts. For example, prices include things that the customers have to <strong>give up</strong> and benefits include <strong>brand image</strong>.</p><p>Marketing is about <strong>making value proposition</strong> and making sure that the <strong>customers perceieve higher values than competing alternatives</strong>. </p><h2 id="Customer-Relevancy"><a href="#Customer-Relevancy" class="headerlink" title="Customer Relevancy"></a>Customer Relevancy</h2><p>We need to understand how customers define value and avoid the myth of excellency. <strong>An effective value proposition require tradeoffs.</strong> Marketers need to focus on <strong>“customer relevancy”:</strong> <strong>the ability to see business through customers’ eyes and conduct business on terms that customers find meaningful.</strong></p><p>Effecitve value propositions require:  </p><ol><li>what elements should we offer the customers</li><li>what elements should we deny the customers</li></ol><p><strong>Competitive advantage through customer relevancy</strong>：</p><ol><li>The most sustainable score on dimensions</li><li>Anything less than 3 is not sustainable</li><li>Domination or differentiation on more than one attribute is not sustainable, resulting in resources being wasted</li><li>The definition of a 3 can continually change. Failure to keep up with changing requirements can cause the score to drop.</li></ol><p>For example, the price for electric car is high because all of the other things with maintaining the car and refill speed(which customers have to give up). Customers have <strong>inertia</strong>. What do we give up is even more important than what we require. Another good example is the keyboard layout which was initially designed to slow down typing so that users cannot type too quickly to prevent mechanical arms jamming in a typewritter. </p><blockquote><p>Whenever you give customers too much, it’s obvious that you don’t understand them.</p></blockquote><p>The fox and the hedgehog. The fox knows a little bit of everything. The hedgehog knows everything of a little but it does it so well that the fox don’t know enough to beat it.</p><p>The best brands are like a blend of fox and hedgehog.</p><p>Being the best of everything is <strong>a waste of resources</strong>. It can also run into <strong>me-too</strong> scenario. Oftentime, we should focus on gaining a competitive advantage with customer relevancy. </p><p><img src="image-20210430235605411.png" alt="image-20210430235605411"></p><h2 id="Marketing-Measures"><a href="#Marketing-Measures" class="headerlink" title="Marketing Measures"></a>Marketing Measures</h2><p><strong>Traditional accounting and financial measures:</strong></p><ol><li>Sales</li><li>Market share</li><li>Profitability, etc.</li></ol><p>and <strong>long-term meausres:</strong></p><ol><li>Customer satisfaction and brand loyalty</li><li>Product and service quality</li><li>Brand and firm associations</li><li>Relative cost</li><li>New product activity</li><li>Staff capability and competence</li></ol><p>But those are hard to measure and quantify.</p><h3 id="The-Structure-of-Metrics"><a href="#The-Structure-of-Metrics" class="headerlink" title="The Structure of Metrics"></a>The Structure of Metrics</h3><p>Different people have different measures of marketing activities. Otherwise, people within an organization have different metrics (people have speaking different languages):</p><p><img src="image-20210430235857255.png" alt="image-20210430235857255"></p><h3 id="How-Marketing-creates-Financial-Values"><a href="#How-Marketing-creates-Financial-Values" class="headerlink" title="How Marketing creates Financial Values"></a>How Marketing creates Financial Values</h3><p>To speak in the same language, we can look at how marketing impact the financial value:</p><p><img src="fig1.png"></p><p>Good financial gain: </p><ol><li><strong>Level of cash flow</strong>: more sales</li><li><strong>Timing of cash flow</strong>: alliances, loyalty, etc., customer purchase once the product is released</li><li><strong>Duration of cash flow</strong>: sustainable (because brand is not easily replicated), opportunity</li><li><strong>Risk of cash flow</strong>: volalility (seasonality), vulnerability (loyalty programme)</li></ol><p>This model helps marketer to communicate with people speaking the financial metric language.</p><p>Marketing operates within an organizational context. <strong>The 7-S framework is about how to set up an organizational context for marketing.</strong></p><p><img src="image-20210501001904642.png" alt="image-20210501001904642"></p><h1 id="Market-Planning-Implementing-the-value-proposition"><a href="#Market-Planning-Implementing-the-value-proposition" class="headerlink" title="Market Planning: Implementing the value proposition"></a>Market Planning: Implementing the value proposition</h1><p>After devising the value proposition, we need to identify the market to enter and this involves the following steps:</p><p><img src="fig2.png"></p><h2 id="Situation-Analysis"><a href="#Situation-Analysis" class="headerlink" title="Situation Analysis"></a>Situation Analysis</h2><p>You should take both external and internal factors of the environment into account, but focused on existing/potential issues. This often includes:</p><ol><li>Analysis of <strong>internal and external environments</strong></li><li>Analysis of <strong>market attractivenes</strong>s</li><li><strong>SWOT analysis</strong></li></ol><h3 id="External-and-Internal-Environment-5Cs-framework"><a href="#External-and-Internal-Environment-5Cs-framework" class="headerlink" title="External and Internal Environment: 5Cs framework"></a>External and Internal Environment: 5Cs framework</h3><p>The 5Cs outlines the 5 dimensions of the <strong>marketing environment</strong> that should be analyszed to develop a market plan.</p><p><img src="fig3.png"></p><p>Among them, it’s vital to understand <strong>customers’ decision process</strong> because we want to understand the Customer in the 5C model.</p><p><img src="fig4.png"></p><p>You should take the factors mentioned above into consideration when analysing your situation. The brand’s ultimate goal is to trigger <em>routine-resposne behaviour</em>, in which case the customers don’t go through any thinking before they decide to purchase. The brand does it for them.</p><h3 id="Market-Attractiveness-The-5-Force-Model"><a href="#Market-Attractiveness-The-5-Force-Model" class="headerlink" title="Market Attractiveness: The 5 Force Model"></a>Market Attractiveness: The 5 Force Model</h3><p>We can access market attractiveness using the 5-forces model:</p><ol><li>Threat of potential entrants</li><li>Threat of substitutes</li><li>Bargaining power of supplier</li><li>Bargaining power of buyers</li><li>Intensity of rivalry</li></ol><p><img src="fig5.png"></p><p>Below is an example for Starbucks</p><p><img src="fig6.png"></p><h3 id="SWOT-Analysis"><a href="#SWOT-Analysis" class="headerlink" title="SWOT Analysis"></a>SWOT Analysis</h3><p>The SWOT analysis wraps up the information in a structured way.</p><p><img src="fig7.png"></p><p><img src="fig8.png"></p><h2 id="Market-Selection"><a href="#Market-Selection" class="headerlink" title="Market Selection"></a>Market Selection</h2><p>We first do a rough screening by three major factors:</p><ol><li><strong>Accessibility</strong>: How easy it is to access the market?</li><li><strong>Profitability</strong>: Can the market afford us?</li><li><strong>Market Size</strong>: Is there a latent market?</li></ol><p><img src="image-20210501200817959.png" alt="image-20210501200817959"></p><p>Then we can dive into a “finer” approach for the remaining candidates. We focus on two dimensions: <strong>Market attractiveness</strong> and <strong>Ability to compete</strong>.These factors should be highly <em>industry-dependent</em> and can only be obtained through good marketing research.</p><p><img src="image-20210501201230070.png" alt="image-20210501201230070"></p><blockquote><p>Your data is only as good as your research</p></blockquote><p><img src="fig9.png"></p><p>We can then prioritize our resources based on the weighted scores. The result of the analysis will give a market prioritisation matrix:</p><p><img src="image-20210501201416064.png" alt="image-20210501201416064"></p><h2 id="Market-Segmentation"><a href="#Market-Segmentation" class="headerlink" title="Market Segmentation"></a>Market Segmentation</h2><p>We break the market into smaller pieces to target our market more specificly. <strong>A segment should be a customer group with similar needs, who respond in a similar way to marketing initiatives.</strong> </p><p>The main benefits of market segmentation includes:</p><ol><li>Optimising resource allocation (niche strategy)</li><li>Identifying opportunity for differentiation</li><li>Develop better understanding of customers</li><li>Avoid competition</li></ol><p><img src="image-20210506130847434.png" alt="image-20210506130847434"></p><p>Market segmentation can be done <strong>demographically</strong> or <strong>Phychographically</strong>. The latter involves surveying the customers by <em>VALS</em> types. </p><p><strong>Its main purpose:</strong></p><p>• Knowing which VALS segment your customers belong to can help you become a more effective communicator, it can help you “push the right buttons”</p><p>• Understanding what motivates your customers illuminates how to communicate to them in ways that will initiate action and make you a more effective marketer</p><p>The traditional method (demographic segmentation) suffers from the problem of not being precise. For example, young people aged 18-25 is too simplifying. Therefore, it is sometimes more useful to segment the market using phychological traits.</p><blockquote><p>Benefits of <strong>psychographic segmentation</strong>:</p><p><strong>Study a market</strong>: It can help understand customer differences in a market and identify opportunities.</p><p><strong>Position a product</strong>: It can help identify which market opportunities are strongest. Relating features and benefits to distinct segment needs clarifies strategies for targeting and expansion.</p><p><strong>Commercialise new products</strong>: It can facilitate successful product launches and helps avoid costly mistakes.</p><p><strong>Communicate effectively</strong>: it can show how to craft effective messaging campaigns. Understanding what motivates consumers illuminates how to speak to them in ways that will initiate action.</p></blockquote><p>Beyond traditional and phychographical segmentation, <strong>Job-based segmentation</strong> requires more insight of the customers. It looks at what the customers want to get done through your product/service, and uses that to segment the market. (The fast food chain milkshake compaign example)</p><h2 id="Product-Positioning"><a href="#Product-Positioning" class="headerlink" title="Product Positioning"></a>Product Positioning</h2><p>The value proposition informs the product positioning, which is the specific image of a product or service offering in the minds of consumers, relative to competing offerings.</p><p>Product positioning is the <strong>mental image</strong> you want the customer to think of when mentioning your product. Marketers attempt to “position” their products in a particular way in the minds of target markets.</p><p><img src="fig10.png"></p><p>The above scheme can help find your position in the market. <strong>Points-of-parity</strong> are often the minimal requirement for the product (e.g., shampoo must be able to wash hair).</p><h1 id="The-Marketing-Mix"><a href="#The-Marketing-Mix" class="headerlink" title="The Marketing Mix"></a>The Marketing Mix</h1><p>“A marketing executive is a ‘mixer of ingredients’, one who is constantly engaged in fashioning creatively a mix of marketing procedures and policies in his (sic) efforts to produce a profitable enterprise”</p><p>The ingredients to mix are <strong>product, price, promotion, place</strong></p><ul><li>Product: design, packaging, brand… Everything abou the product</li><li>Price: financial, costs perceived by the customers (adaption costs etc.)</li><li>Promotion: sales, advertisement, digital marketing etc.</li><li>Place: logistics, retailers etc.</li></ul><h2 id="Managing-the-Product"><a href="#Managing-the-Product" class="headerlink" title="Managing the Product"></a>Managing the Product</h2><p>A product is anything that deliveres a benefit needed by a customer. Formally, a product is a need-satisfying offering.</p><h3 id="The-Layer-of-Product"><a href="#The-Layer-of-Product" class="headerlink" title="The Layer of Product"></a>The Layer of Product</h3><p><img src="image-20210407190407401.png" alt="image-20210407190407401"></p><h3 id="The-Product-Lifecycle"><a href="#The-Product-Lifecycle" class="headerlink" title="The Product Lifecycle"></a>The Product Lifecycle</h3><p><img src="image-20210407190435091.png" alt="image-20210407190435091"></p><p>Between introduction and growth is the <em>chasm</em>, most products will not survive passing the chasm.</p><h3 id="The-Product-Adoption-Cycles"><a href="#The-Product-Adoption-Cycles" class="headerlink" title="The Product Adoption Cycles"></a>The Product Adoption Cycles</h3><p><img src="image-20210407190603985.png" alt="image-20210407190603985"></p><p>We should acknowledge that different groups of people take on new idea with different rate. Therefore, we should aim to target different group in different stages. To start off, it often pays to attract the innovators (tech Enthusiasts, influencer) etc and then spread out. It is not wise to target everybody at the begining.</p><h3 id="Innovation-vs-Imitation"><a href="#Innovation-vs-Imitation" class="headerlink" title="Innovation vs Imitation"></a>Innovation vs Imitation</h3><p><img src="image-20210407190854384.png" alt="image-20210407190854384"></p><p><img src="image-20210407190906243.png" alt="image-20210407190906243"></p><p>Research shows that innovation advantage will eventually wear out by lower costs of the laggard. So the way to go is <strong>relentless innovation</strong>. Think of Apple as an example and Nokia as a counter example.</p><h3 id="Factors-Influencing-Product-Adoption"><a href="#Factors-Influencing-Product-Adoption" class="headerlink" title="Factors Influencing Product Adoption"></a>Factors Influencing Product Adoption</h3><p><img src="image-20210407191034307.png" alt="image-20210407191034307"></p><p>There are six factors which influence product adoption: <strong>relative advantage, compatibility, complexity, triability, communicability</strong> and <strong>risk</strong>.</p><ul><li>Triability refers to the ease of doign “try free and update later” </li><li>Communicability refers to how effective is the benefits communicated to the customers</li></ul><h3 id="Age-of-the-Internet-the-Long-Tail"><a href="#Age-of-the-Internet-the-Long-Tail" class="headerlink" title="Age of the Internet: the Long Tail"></a>Age of the Internet: the Long Tail</h3><p><img src="image-20210407191200006.png" alt="image-20210407191200006"></p><p>It is now possible to offer a massively expanded variety of products. The cost of reaching niches is falling. More information is available to match demand and supply. As a result, we are moving away from a focus on a small number of mainstream products and markets and moving towards a large number of niches. The rise of mass-customisation.</p><h2 id="Communication"><a href="#Communication" class="headerlink" title="Communication"></a>Communication</h2><p>We can model any kind of communication as follow:</p><p><img src="image-20210420044752224.png" alt="image-20210420044752224"></p><p>It is not enough to produce a good product or service, value also has to be communicated effectively. People have to be <em>made aware of</em> the product, be shown the value the product offers, persuaded of its advantages, and reassured once they have bought it.</p><p>The customer’s decision making can be divided in the following stages which dictates the marketing communication strategies:</p><ol><li><strong>Cognitive Stage</strong>: Awareness, interest</li><li><strong>Affective Stage</strong>: Evaluation, trial</li><li><strong>Behavioural Stage</strong>: Decision, confirmation</li></ol><p><img src="image-20210420045041444.png" alt="image-20210420045041444"></p><h3 id="Designing-the-Message"><a href="#Designing-the-Message" class="headerlink" title="Designing the Message"></a>Designing the Message</h3><p><img src="image-20210420045250779.png" alt="image-20210420045250779"></p><p>High involvement: </p><p>Low involvement: Low involvement products, as the name suggests, are products where the consumer does not need to think too much before purchasing the product. There is not much risk involved in low involvement purchase, as a result of which decision making is much faster. Most FMCG products can be classified as a low involvement product.</p><p>Positive purchase motivation: luxury, things you bought as a reward</p><p>Nagative purchase motivation: medicine etc. </p><h2 id="Customer-Apathy"><a href="#Customer-Apathy" class="headerlink" title="Customer Apathy"></a>Customer Apathy</h2><p>The challenge of customer apathy (not interested):</p><p>·   Customers are NOT relationship-oriented (77%)</p><p>·   Most customers not interested in branded experiences</p><p>·   Most customers do not engage around brands</p><p>·   Most customers do not know much about brands</p><p>·   Brand knowledge usually limited</p><p>·   Customers are just not that into you</p><p>·   Duplication of brand purchase is unavoidable</p><p>·   Customers are more self-driven than brand-driven (discount!!!)</p><p>·   Customer inertia: wine chosen in 1 min, cereal in 23 sec</p><p><img src="image-20210506135240335.png" alt="image-20210506135240335"></p><h2 id="Managing-Price"><a href="#Managing-Price" class="headerlink" title="Managing Price"></a>Managing Price</h2><p>At least three principles underlies effective pricing:</p><ol><li>It should align with the organization’s broader <strong>positioning strategy</strong><ul><li>penetration pricing (below competition): introduction</li><li>skimming pricing (above competition): could be during introduction</li><li>stability pricing (around competition): harvest in muturity</li></ul></li><li>It should be <strong>value-based</strong>. </li><li>It should be <strong>customized according to propensity to pay.</strong></li></ol><p><img src="image-20210505025636603.png" alt="image-20210505025636603"></p><h2 id="Managing-the-Place-Distribution"><a href="#Managing-the-Place-Distribution" class="headerlink" title="Managing the Place (Distribution)"></a>Managing the Place (Distribution)</h2><p>The two main decisions include: <strong>Channel length</strong> and <strong>Intensity of Distribution</strong>:</p><h3 id="Channel-Length"><a href="#Channel-Length" class="headerlink" title="Channel Length"></a>Channel Length</h3><p>Channel length is defined by the number of intermediaries between the manufacturer and the customer.</p><p><img src="image-20210505025744986.png" alt="image-20210505025744986"></p><p>There is always a tradeoff between power to control and costs. </p><p><img src="image-20210505025812166.png" alt="image-20210505025812166"></p><h3 id="Intensity-of-Distribution"><a href="#Intensity-of-Distribution" class="headerlink" title="Intensity of Distribution"></a>Intensity of Distribution</h3><p>The intensity is basicaaly the question of how many intermediaries are to be used for distributions. This is often called the <strong>channel breadth</strong>. There are three strategies: <strong>intensive, exclusive</strong> and <strong>selective</strong></p><p><img src="image-20210505030024994.png" alt="image-20210505030024994"></p><h1 id="Branding"><a href="#Branding" class="headerlink" title="Branding"></a>Branding</h1><h2 id="Brand-Equity"><a href="#Brand-Equity" class="headerlink" title="Brand Equity"></a>Brand Equity</h2><p><img src="image-20210505030056258.png" alt="image-20210505030056258"></p><h2 id="Customer-Loyalty"><a href="#Customer-Loyalty" class="headerlink" title="Customer Loyalty"></a>Customer Loyalty</h2><p>Customer loyalty leads to economic benefits. This is displayed through <strong>growth effect</strong>(more customers) and <strong>margin effect</strong>(customers become more profitable).</p><p><img src="image-20210505030243860.png" alt="image-20210505030243860"></p><p>New customers are expensive and not very profitable.</p><p><img src="image-20210505030259658.png" alt="image-20210505030259658"></p><h2 id="Customer-Complaint-and-Service-Recovery"><a href="#Customer-Complaint-and-Service-Recovery" class="headerlink" title="Customer Complaint and Service Recovery"></a>Customer Complaint and Service Recovery</h2><p><img src="image-20210505030401526.png" alt="image-20210505030401526"></p><p><img src="image-20210505030414281.png" alt="image-20210505030414281"></p><p>Good brands and companies tend to focus on service recovery because this leads to increased customer loyalty which in term generate more profit.</p><h2 id="Loyalty-Programme"><a href="#Loyalty-Programme" class="headerlink" title="Loyalty Programme"></a>Loyalty Programme</h2><p>Loyalty programmes usually don’t increase customers’ loyalty. But it is still useful if the objectives are clear.</p><p><img src="image-20210505030513311.png" alt="image-20210505030513311"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Cambridge</tag>
      
      <tag>Note</tag>
      
      <tag>Marketing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python a short manual</title>
    <link href="/2020/07/01/Python-a-short-manual/"/>
    <url>/2020/07/01/Python-a-short-manual/</url>
    
    <content type="html"><![CDATA[<h1 id="Pitfalls"><a href="#Pitfalls" class="headerlink" title="Pitfalls!!!"></a>Pitfalls!!!</h1><h2 id="Unexpectedly-Appending-Reference"><a href="#Unexpectedly-Appending-Reference" class="headerlink" title="Unexpectedly Appending Reference"></a>Unexpectedly Appending Reference</h2><p>The following code will produce unexpected result</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">dict_a = &#123;<span class="hljs-string">&#x27;a&#x27;</span> : <span class="hljs-number">1</span>&#125;<br>dict_list = [dict_a]<br><span class="hljs-meta">&gt;&gt;&gt; </span>dict_list <br><span class="hljs-meta">&gt;&gt;&gt; </span>[&#123;<span class="hljs-string">&#x27;a&#x27;</span> : <span class="hljs-number">1</span>&#125;]<br>dict_a[<span class="hljs-string">&#x27;a&#x27;</span>] = <span class="hljs-number">2</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>dict_list<br><span class="hljs-meta">&gt;&gt;&gt; </span>[&#123;<span class="hljs-string">&#x27;a&#x27;</span> : <span class="hljs-number">2</span>&#125;]<br></code></pre></td></tr></table></figure><p>That is, what’s in the list of dictionary is just a reference, not an object. Make sure to use <code>dict_list.append(dict_a.copy())</code>  if you don’t want this sort of behavior</p><p>Similarly, appending list to list incurs the same behavior.</p><blockquote><p><code>.copy()</code> creates what’s called a shallow copy, see <a href="https://stackoverflow.com/questions/5105517/deep-copy-of-a-dict-in-python">here</a> for a more thorough discussion</p></blockquote><p>The assignment operator <code>=</code> in Python does not create a copy, but bind the objects together. To get around that, we can use <code>copy</code>. However:</p><p><strong>The shallow copy creates a copy of the object, but references each element of the object.</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">old_list = [[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>], [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]]<br>new_list = copy.copy(old_list) <span class="hljs-comment"># shallow copy</span><br>cold_list[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] = <span class="hljs-string">&#x27;c&#x27;</span> <br><span class="hljs-meta">&gt;&gt;&gt; </span>old_list<br><span class="hljs-meta">&gt;&gt;&gt; </span>[[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,c],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]]<br><span class="hljs-meta">&gt;&gt;&gt; </span>new_list<br><span class="hljs-meta">&gt;&gt;&gt; </span>[[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,c],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]]<br></code></pre></td></tr></table></figure><blockquote><p>Shallow copy works fine if all the objects are immutable</p></blockquote><p> To get around the behavior above, we can use deep copy provided by <code>copy.deepcopy( obj )</code>. This will create copies of the objects that are hold by <code>obj</code></p><h1 id="Virtual-Environment"><a href="#Virtual-Environment" class="headerlink" title="Virtual Environment"></a>Virtual Environment</h1><p>To create a virtual environment, decide upon a directory where you want to place it, and run the <a href="https://docs.python.org/3/library/venv.html#module-venv"><code>venv</code></a> module as a script with the directory path:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 -m venv tutorial-env<br></code></pre></td></tr></table></figure><p>This will create a virtual environment called <code>tutorial-env</code>, to activate the virtual environment, use</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> tutorial-env/bin/activate<br>(tutorial-env) $ ...<br></code></pre></td></tr></table></figure><h1 id="Dictionary"><a href="#Dictionary" class="headerlink" title="Dictionary"></a>Dictionary</h1><h2 id="Advanced-Methods"><a href="#Advanced-Methods" class="headerlink" title="Advanced Methods"></a>Advanced Methods</h2><h3 id="get-method"><a href="#get-method" class="headerlink" title="get() method"></a><code>get()</code> method</h3><p>The syntax is </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">dict</span>.get(key [,value])<br></code></pre></td></tr></table></figure><p>where <code>value</code> is returned when the <code>key</code> is not found</p><h3 id="update-method"><a href="#update-method" class="headerlink" title="update() method"></a><code>update()</code> method</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">dict</span>.update([other])<br></code></pre></td></tr></table></figure><p>The <code>update()</code> method taks either a dictionary or an iterable object of key/value pairs (generally tuples). It adds the elements to the dictionary if the key is not in the dictionary. If the key is in the dictionary, it updates the key with the new value. <strong>It does not return any values</strong></p><blockquote><p>Note that the <code>update()</code> method assign with <strong>shallow copy</strong>. If this is unwanted, you should call <code>b_dict.update(copy.deepcopy(a_dict))</code></p></blockquote><h3 id="pop-method"><a href="#pop-method" class="headerlink" title="pop() method"></a><code>pop()</code> method</h3><p>The Python pop() method removes an item from a dictionary.</p><p>This method can also be used to remove items from a list at a particular index value.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">dictionary.pop(key_to_remove, not_found)<br></code></pre></td></tr></table></figure><h1 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h1><p><code>__iter__()</code> is called with the iterator is created using <code>iter()</code> or on initializing a for loop. It should include <code>return self</code> or other iterator with <code>__next__()</code> defined.  </p><p>The <code>__next__()</code> function must be implemented for an iterator. In a for loop, it is called until <code>StopIteration</code> is raised. Typically:  </p><pre><code>def __next__(self):    if !end:        ...        return value    else:        raise StopIteration</code></pre><p>You can use <code>next()</code> to get the next element of an iterator.  </p><blockquote><p>Call next() not iter.next()</p></blockquote><h1 id="List-Comprehension"><a href="#List-Comprehension" class="headerlink" title="List Comprehension"></a>List Comprehension</h1><h2 id="Cartesian-Product"><a href="#Cartesian-Product" class="headerlink" title="Cartesian Product"></a>Cartesian Product</h2><pre><code>[(a,b) for a in listA for b in listB]</code></pre><h1 id="OOP-in-Python"><a href="#OOP-in-Python" class="headerlink" title="OOP in Python"></a>OOP in Python</h1><h2 id="Override-built-in-methods"><a href="#Override-built-in-methods" class="headerlink" title="Override built in methods"></a>Override built in methods</h2><p>This defines a functor like object.</p><p>Override <code>__call__()</code> function:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FunctionLike</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__call__</span>(<span class="hljs-params">self, a</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;I got called with &#123;!r&#125;!&quot;</span>.<span class="hljs-built_in">format</span>(a))<br><br>fn = FunctionLike()<br>fn(<span class="hljs-number">10</span>)<br><br><span class="hljs-comment"># --&gt; I got called with 10!</span><br></code></pre></td></tr></table></figure><h2 id="Abstract-class"><a href="#Abstract-class" class="headerlink" title="Abstract class"></a>Abstract class</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__getitem__</span>(<span class="hljs-params">self, index</span>):</span><br>        ...<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__len__</span>(<span class="hljs-params">self</span>):</span><br>        ...<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_iterator</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">iter</span>(self)<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyIterable</span>(<span class="hljs-params">ABC</span>):</span><br><br><span class="hljs-meta">    @abstractmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__iter__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">False</span>:<br>            <span class="hljs-keyword">yield</span> <span class="hljs-literal">None</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_iterator</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self.__iter__()<br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__subclasshook__</span>(<span class="hljs-params">cls, C</span>):</span><br>        <span class="hljs-keyword">if</span> cls <span class="hljs-keyword">is</span> MyIterable:<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">any</span>(<span class="hljs-string">&quot;__iter__&quot;</span> <span class="hljs-keyword">in</span> B.__dict__ <span class="hljs-keyword">for</span> B <span class="hljs-keyword">in</span> C.__mro__):<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NotImplemented</span><br><br>MyIterable.register(Foo)<br></code></pre></td></tr></table></figure><h1 id="Functional"><a href="#Functional" class="headerlink" title="Functional"></a>Functional</h1><h2 id="functools-partial-fun-args-keywords"><a href="#functools-partial-fun-args-keywords" class="headerlink" title="functools.partial(fun, /, *args, **keywords)"></a><code>functools.partial(fun, /, *args, **keywords)</code></h2><p>Return a new <a href="https://docs.python.org/3/library/functools.html#partial-objects">partial object</a> which when called will behave like <em>func</em> called with the positional arguments <em>args</em> and keyword arguments <em>keywords</em>. If more arguments are supplied to the call, they are appended to <em>args</em>. If additional keyword arguments are supplied, they extend and override <em>keywords</em>. Roughly equivalent to:<code>def partial(func, /, *args, **keywords):    def newfunc(*fargs, **fkeywords):        newkeywords = &#123;**keywords, **fkeywords&#125;        return func(*args, *fargs, **newkeywords)    newfunc.func = func    newfunc.args = args    newfunc.keywords = keywords    return newfunc </code>The <a href="https://docs.python.org/3/library/functools.html#functools.partial"><code>partial()</code></a> is used for partial function application which “freezes” some portion of a function’s arguments and/or keywords resulting in a new object with a simplified signature. For example, <a href="https://docs.python.org/3/library/functools.html#functools.partial"><code>partial()</code></a> can be used to create a callable that behaves like the <a href="https://docs.python.org/3/library/functions.html#int"><code>int()</code></a> function where the <em>base</em> argument defaults to two:&gt;&gt;&gt;<code>&gt;&gt;&gt; from functools import partial &gt;&gt;&gt; basetwo = partial(int, base=2) &gt;&gt;&gt; basetwo.__doc__ = &#39;Convert base 2 string to an int.&#39; &gt;&gt;&gt; basetwo(&#39;10010&#39;) 18 </code></p><h1 id="Datatime-module"><a href="#Datatime-module" class="headerlink" title="Datatime module"></a>Datatime module</h1><h2 id="Current-date-and-time"><a href="#Current-date-and-time" class="headerlink" title="Current date and time"></a>Current date and time</h2><pre><code>from datetime import datetimenow = datetime.now()date_time = now.strftime(&quot;%m/%d/%Y, %H:%M:%S&quot;)</code></pre><h2 id="UNIX-timestamp-and-datetime-conversion"><a href="#UNIX-timestamp-and-datetime-conversion" class="headerlink" title="UNIX timestamp and datetime conversion"></a>UNIX timestamp and datetime conversion</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> datetime<br>timestamp = datetime(year, month, day, hour, minute, second) <span class="hljs-comment"># year etc. are all integers, convert to timestamp</span><br>datetime.datetime.fromtimestamp(timestamp) <span class="hljs-comment"># return datetime</span><br></code></pre></td></tr></table></figure><h2 id="string-gt-datetime"><a href="#string-gt-datetime" class="headerlink" title="string -&gt; datetime"></a>string -&gt; datetime</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">dt = datetime.strptime(time_str, <span class="hljs-string">&quot;%Y%m$d&quot;</span>) <span class="hljs-comment"># parse string like &quot;20210721&quot;</span><br></code></pre></td></tr></table></figure><p>For formatting, checkout <a href="https://www.journaldev.com/23365/python-string-to-datetime-strptime">reference from web</a></p><h1 id="Logging"><a href="#Logging" class="headerlink" title="Logging"></a>Logging</h1><h2 id="Basics"><a href="#Basics" class="headerlink" title="Basics"></a>Basics</h2><pre><code>import logginglogging.basicConfig(filename=&quot;fileanme&quot;,level=logging.INFO)logging.info(&#39;info msg&#39;)logging.warning(&#39;warning msg&#39;)logging.debug(&#39;debug msg&#39;)</code></pre><h1 id="re-Regular-Expression"><a href="#re-Regular-Expression" class="headerlink" title="re (Regular Expression)"></a>re (Regular Expression)</h1><h2 id="Basics-1"><a href="#Basics-1" class="headerlink" title="Basics"></a>Basics</h2><p>You can compile a regular expression into a <em>pattern</em> object and then use various methods it provides. For example,  </p><pre><code>import rep = re.compile(&#39;[a-z]+&#39;)p.match(text) # if the start of the string matchesm = p.search(text) # search through the stringm = p.findall(text)m.finditer(text) # find all the substrings and returns them as an iteratorm.group() # return the string matched by the REm.start() # return the starting position of the rem.end() # return the ending positionn of the rem.span() # return a tuple containing the start, end positions of the match</code></pre><h2 id="Restricting-matched-string-length"><a href="#Restricting-matched-string-length" class="headerlink" title="Restricting matched string length"></a>Restricting matched string length</h2><p><code>&#123;n,m&#125;</code> will match repetition at least <code>n</code> tiems but not exceeding <code>m</code> times.  </p><h1 id="Matplotlib"><a href="#Matplotlib" class="headerlink" title="Matplotlib"></a>Matplotlib</h1><p>Matplotlib is a library for plotting. </p><h2 id="Generic-plotting-function"><a href="#Generic-plotting-function" class="headerlink" title="Generic plotting function"></a>Generic plotting function</h2><p>Below is a generic plotting function <code>plot_on_ax()</code> . It takes an <code>ax</code> object and plot data, add legend as well as setting title, xlabel and ylabel.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">plot_on_ax</span>(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">    data,</span></span><br><span class="hljs-params"><span class="hljs-function">    ax,</span></span><br><span class="hljs-params"><span class="hljs-function">    title=<span class="hljs-literal">None</span>, </span></span><br><span class="hljs-params"><span class="hljs-function">    xlabel=<span class="hljs-literal">None</span>, </span></span><br><span class="hljs-params"><span class="hljs-function">    ylabel=<span class="hljs-literal">None</span>, </span></span><br><span class="hljs-params"><span class="hljs-function">    legend=<span class="hljs-literal">None</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    legend_loc=<span class="hljs-string">&#x27;best&#x27;</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    fontsize=&#123;&#125;,</span></span><br><span class="hljs-params"><span class="hljs-function">    aux_func=[]</span></span><br><span class="hljs-params"><span class="hljs-function">    </span>):</span><br>    line, = ax.plot(data)<br>    <span class="hljs-keyword">if</span> title:<br>        ax.set_title(title, fontsize=fontsize.get(<span class="hljs-string">&#x27;title&#x27;</span>,<span class="hljs-number">16</span>))<br>    <span class="hljs-keyword">if</span> xlabel:<br>        ax.set_xlabel(xlabel, fontsize=fontsize.get(<span class="hljs-string">&#x27;xlabel&#x27;</span>,<span class="hljs-number">12</span>))<br>    <span class="hljs-keyword">if</span> ylabel:<br>        ax.set_ylabel(ylabel, fontsize=fontsize.get(<span class="hljs-string">&#x27;ylabel&#x27;</span>,<span class="hljs-number">12</span>))<br>    ax.tick_params(axis=<span class="hljs-string">&#x27;both&#x27;</span>, which=<span class="hljs-string">&#x27;major&#x27;</span>, labelsize=fontsize.get(<span class="hljs-string">&#x27;tick&#x27;</span>, <span class="hljs-number">8</span>))<br>    <span class="hljs-keyword">for</span> func_ <span class="hljs-keyword">in</span> aux_func:<br>        ax = func_(ax)<br>    <span class="hljs-keyword">if</span> legend:<br>        line.set_label(legend)<br>        ax.legend(loc=legend_loc, prop=&#123;<span class="hljs-string">&#x27;size&#x27;</span>: fontsize.get(<span class="hljs-string">&#x27;legend&#x27;</span>, <span class="hljs-number">6</span>)&#125;, ncol=<span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">return</span> ax<br><br><span class="hljs-comment"># a working example</span><br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> partial<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">plot_horizontal</span>(<span class="hljs-params">ax, y, color=<span class="hljs-string">&#x27;black&#x27;</span>, lstyle=<span class="hljs-string">&#x27;--&#x27;</span>, legend=<span class="hljs-literal">None</span></span>):</span><br>    line = ax.axhline(y=y, color=color, linestyle=lstyle)<br>    <span class="hljs-keyword">if</span> legend:<br>        line.set_label(legend)<br>    <span class="hljs-keyword">return</span> ax<br>plot_h = partial(plot_horizontal, y=thresh, legend=<span class="hljs-string">f&#x27;Threshold=<span class="hljs-subst">&#123;thresh&#125;</span>&#x27;</span>)<br><br>fig = plt.figure(figsize=(<span class="hljs-number">24</span>,<span class="hljs-number">8</span>))<br>plt.tight_layout()<br>ax1 = plt.subplot(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)<br>ax2 = plt.subplot(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># plotting</span><br>p1_idx, p2_idx = <span class="hljs-number">0</span>, <span class="hljs-number">15</span><br>plot_on_ax(np.<span class="hljs-built_in">abs</span>(automat[p1_idx,:]), ax1, title=<span class="hljs-string">f&#x27;Auto-correlation for player <span class="hljs-subst">&#123;p1_idx&#125;</span>&#x27;</span>,xlabel=<span class="hljs-string">&#x27;Samples&#x27;</span>, ylabel=<span class="hljs-string">&#x27;Auto-correlation&#x27;</span>, legend=<span class="hljs-string">&#x27;(abs) Auto-correlation&#x27;</span>, aux_func=[plot_h])<br>plot_on_ax(np.<span class="hljs-built_in">abs</span>(automat[p2_idx,:]), ax2, title=<span class="hljs-string">f&#x27;Auto-correlation for player <span class="hljs-subst">&#123;p2_idx&#125;</span>&#x27;</span>,xlabel=<span class="hljs-string">&#x27;Samples&#x27;</span>, ylabel=<span class="hljs-string">&#x27;Auto-correlation&#x27;</span>, legend=<span class="hljs-string">&#x27;(abs) Auto-correlation&#x27;</span>, aux_func=[plot_h])<br><span class="hljs-comment"># saving </span><br>fig.savefig(<span class="hljs-string">&#x27;fig/fig2.png&#x27;</span>, dpi=<span class="hljs-number">80</span>)<br></code></pre></td></tr></table></figure><h2 id="Annotating-with-horizontal-vertical-lines"><a href="#Annotating-with-horizontal-vertical-lines" class="headerlink" title="Annotating with horizontal / vertical lines"></a>Annotating with horizontal / vertical lines</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Horizontal line</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">plot_horizontal</span>(<span class="hljs-params">ax, y, color=<span class="hljs-string">&#x27;black&#x27;</span>, lstyle=<span class="hljs-string">&#x27;--&#x27;</span>, legend=<span class="hljs-literal">None</span></span>):</span><br>    line = ax.axhline(y=y, color=color, linestyle=lstyle)<br>    <span class="hljs-keyword">if</span> legend:<br>        line.set_label(legend)<br>    <span class="hljs-keyword">return</span> ax<br>plot_h = partial(plot_horizontal, y=thresh, legend=<span class="hljs-string">f&#x27;Threshold=<span class="hljs-subst">&#123;thresh&#125;</span>&#x27;</span>)<br><br><span class="hljs-comment"># Vertical line</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">plot_vertical</span>(<span class="hljs-params">ax, x, color=<span class="hljs-string">&#x27;black&#x27;</span>, lstyle=<span class="hljs-string">&#x27;--&#x27;</span>, legend=<span class="hljs-literal">None</span></span>):</span><br>    line = ax.axvline(x=x, color=color, linestyle=lstyle)<br>    <span class="hljs-keyword">if</span> legend:<br>        line.set_label(legend)<br>    <span class="hljs-keyword">return</span> ax<br>burn_in = <span class="hljs-number">100</span><br>plot_v = partial(plot_vertical, x=burn_in, legend=<span class="hljs-string">f&#x27;Burn_in=<span class="hljs-subst">&#123;burn_in&#125;</span>&#x27;</span>, color=<span class="hljs-string">&#x27;r&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="Ploting-horizontal-barplots"><a href="#Ploting-horizontal-barplots" class="headerlink" title="Ploting horizontal barplots"></a>Ploting horizontal barplots</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">plot_ranking</span>(<span class="hljs-params">skills, xlabel=<span class="hljs-literal">None</span>, title=<span class="hljs-literal">None</span></span>):</span><br>    fig = plt.figure(figsize=(<span class="hljs-number">16</span>,<span class="hljs-number">36</span>))<br>    player_skills = [(p, w) <span class="hljs-keyword">for</span> [p], w <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(W, skills)]<br>    sorted_skills = <span class="hljs-built_in">sorted</span>(player_skills, key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">1</span>], reverse=<span class="hljs-literal">True</span>)<br>    plt.barh(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(sorted_skills)), [v <span class="hljs-keyword">for</span> _, v <span class="hljs-keyword">in</span> sorted_skills])<br>    plt.yticks(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(sorted_skills)),labels=[p <span class="hljs-keyword">for</span> p, _ <span class="hljs-keyword">in</span> sorted_skills], fontsize=<span class="hljs-number">16</span>)<br>    plt.gca().invert_yaxis()<br>    plt.xlabel(xlabel, fontsize=<span class="hljs-number">20</span>) <span class="hljs-keyword">if</span> xlabel <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>    plt.ylabel(<span class="hljs-string">&#x27;Player Name&#x27;</span>, fontsize=<span class="hljs-number">20</span>)<br>    plt.title(title, fontsize=<span class="hljs-number">20</span>)<br>    <span class="hljs-comment"># plt.xticks(range(len(sorted_skills)),labels=[p for p, _ in sorted_skills], rotation=90)</span><br>    plt.show()<br>    <span class="hljs-keyword">return</span> sorted_skills, fig<br></code></pre></td></tr></table></figure><h2 id="Working-Examples"><a href="#Working-Examples" class="headerlink" title="Working Examples"></a>Working Examples</h2><pre><code>fig, ax = plt.subplots(2) # row_num, column_num, figsize=(x,y)fig.tight_layout()data = np.random.rand(1000)x = np.linspace(-3, 3, 100)y = x**2ax[0].hist(data, bins=100, density=True)ax[0].set_xlabel(&#39;...&#39;)ax[0].set_title(&#39;Gaussian Histogram&#39;)ax[1].plot(x, y, label=&quot;quadratic&quot;)ax[1].set_ylim(0, 3)plt.legend()plt.show()</code></pre><h2 id="Setting-titles"><a href="#Setting-titles" class="headerlink" title="Setting titles"></a>Setting titles</h2><pre><code>fig.suptitle(&#39;title&#39;, fontsize=16, y=1)ax[0].set_title(&#39;...&#39;)</code></pre><h2 id="Saving-figures"><a href="#Saving-figures" class="headerlink" title="Saving figures"></a>Saving figures</h2><pre><code>plt.savefig(&#39;plot.png&#39;, dpi=300, bbox_inches=&#39;tight&#39;)</code></pre><p>Note that this must be called <strong>before</strong> <code>plt.show()</code>. Otherwise you will get a blank image.</p><h1 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h1><p>Refer to the pandas handbook for details</p><h2 id="Basics-2"><a href="#Basics-2" class="headerlink" title="Basics"></a>Basics</h2><h3 id="Creating-DataFrame-and-Series"><a href="#Creating-DataFrame-and-Series" class="headerlink" title="Creating DataFrame and Series"></a>Creating DataFrame and Series</h3><pre><code>import pandas as pddf = pd.DataFrame(&#123;&#39;col1_name&#39;:[v1,v2,v3,...], &#39;col2_name&#39;:[v1,v2,v3,...],index=[&#39;1&#39;,&#39;2&#39;,...])series = pd.Series([v1,v2,v3,...],index=[&#39;ind1&#39;,&#39;ind2&#39;,...])</code></pre><h3 id="Appending-records"><a href="#Appending-records" class="headerlink" title="Appending records"></a>Appending records</h3><p>You can append another dataframe to existing one.</p><pre><code>df = df.append(df2, ignore_index=True)</code></pre><p>If the columns are named <code>A</code> and <code>B</code>, you may use:  </p><pre><code>df = df.append(&#123;&#39;A&#39;:value,&#39;B&#39;:value&#125;,ignore_index=True)</code></pre><p>To append a record, note the you need to <strong>ASSIGN</strong> back the new appended df.  </p><h3 id="Reading-Saving-Data"><a href="#Reading-Saving-Data" class="headerlink" title="Reading/Saving Data"></a>Reading/Saving Data</h3><pre><code>df = pd.read_csv(&#39;path_to_file&#39;, index_col=0)df.to_csv(&#39;path_to_file&#39;)</code></pre><h3 id="Chunk-write-read"><a href="#Chunk-write-read" class="headerlink" title="Chunk write/read"></a>Chunk write/read</h3><p>If the csv file is large, you can read the csv file in chunks with the <code>chucksize</code> argument  </p><pre><code>for chunk in pd.read_csv(&#39;large.csv&#39;, chunksize=100): #reads 100 rows each time    process(chunk) # chunk is a DataFrame object </code></pre><p>To write a large csv file, use the following:</p><pre><code>df.to_csv(filename, header=None, mode=&#39;a&#39;)</code></pre><p>Note that you need to let <code>header = True</code> (default) for the first batch.  </p><h2 id="Indexing"><a href="#Indexing" class="headerlink" title="Indexing"></a>Indexing</h2><h3 id="Naive-Indexing"><a href="#Naive-Indexing" class="headerlink" title="Naive Indexing"></a>Naive Indexing</h3><p>Just like with common python indexing, you may treat <code>df</code> as a fancy dictonary. Slicing works in the same way as well.  </p><h3 id="loc-and-iloc"><a href="#loc-and-iloc" class="headerlink" title="loc and iloc"></a><code>loc</code> and <code>iloc</code></h3><p><code>loc</code> allows indexing with labels. For example, <code>df.loc[&#39;col_name&#39;]</code> is allowed. Whereas <code>iloc</code> is only <strong>index-based</strong>.<br>You can specify which columns to choose by conditioning in the <code>[]</code> operator. For example:  </p><pre><code>    df.loc[df.country==&#39;China&#39;]</code></pre><p>Returns a series with country name China. You can also specify a range of values using <code>isin()</code>, for example:  </p><pre><code>    df.loc[df.country.isin([&#39;China&#39;,&#39;Japan&#39;])]</code></pre><p>You can also use <code>&amp;</code> or <code>|</code> to form compound predicate. For example:  </p><pre><code>    df.loc[(df.country==&#39;China&#39;) &amp; (df.id==1)]</code></pre><p>Note that the parantheses is <strong>compulsory</strong>. <code>&amp;</code> stands for AND, <code>|</code> stands for OR.  </p><h3 id="Iterating-over-DataFrame"><a href="#Iterating-over-DataFrame" class="headerlink" title="Iterating over DataFrame"></a>Iterating over DataFrame</h3><pre><code>for index, row in df.iterrows():    process(row)    ...</code></pre><h2 id="Tricks"><a href="#Tricks" class="headerlink" title="Tricks"></a>Tricks</h2><h3 id="drop-to-drop-columns-rows"><a href="#drop-to-drop-columns-rows" class="headerlink" title="drop to drop columns/rows"></a><code>drop</code> to drop columns/rows</h3><pre><code>skip_list = [1,2,3,4]df = pd.read_csv(&#39;filename&#39;)df.drop(skip_list, erros=&#39;ignore&#39;)</code></pre><p><code>errors</code> argument can be helpful for handling batch data, index not in list error will be ignored and only existing indices are dropped. Using <code>axis=1</code> to remove columns.  </p><h2 id="Cautions"><a href="#Cautions" class="headerlink" title="Cautions"></a>Cautions</h2><h3 id="Assign-column-to-column"><a href="#Assign-column-to-column" class="headerlink" title="Assign column to column"></a>Assign column to column</h3><p>You need to do </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">res_df[bad_case_by] = anno_df[bad_case_by].tolist()<br></code></pre></td></tr></table></figure><p>the <code>tolist()</code> method is important. Otherwise the column might be NaN.</p><h1 id="json"><a href="#json" class="headerlink" title="json"></a>json</h1><h2 id="Basics-3"><a href="#Basics-3" class="headerlink" title="Basics"></a>Basics</h2><p>JSON (JavaScript Object Notation) is a popular data format to represent structured data. In python, JSON exists as a <strong>string</strong>. For example: </p><pre><code>import jsonp = &#39;&#123;&quot;name&quot;: &quot;Bob&quot;, &quot;languages&quot;: [&quot;Python&quot;, &quot;Java&quot;]&#125;&#39;</code></pre><h3 id="Json-string-gt-dict"><a href="#Json-string-gt-dict" class="headerlink" title="Json string -&gt; dict"></a><strong>Json string -&gt; dict</strong></h3><pre><code>dict = json.loads(json_str)</code></pre><h3 id="Json-file-gt-dict"><a href="#Json-file-gt-dict" class="headerlink" title="Json file -&gt; dict"></a><strong>Json file -&gt; dict</strong></h3><pre><code>with open(filename,&#39;r&#39;) as f:    data = json.load(f)</code></pre><h3 id="dict-gt-JSON-string-file"><a href="#dict-gt-JSON-string-file" class="headerlink" title="dict -&gt; JSON string/file"></a><strong>dict -&gt; JSON string/file</strong></h3><pre><code>json_str = json.dumps(dict)with open(filename, &#39;w&#39;) as f:    json.dump(dict, f)</code></pre><h3 id="Pretty-print-JSON"><a href="#Pretty-print-JSON" class="headerlink" title="Pretty print JSON"></a><strong>Pretty print JSON</strong></h3><pre><code>py_dict = json.loads(json_str)print(json.dumps(person_dict, indent = 4, sort_keys=True))</code></pre><h1 id="Numpy"><a href="#Numpy" class="headerlink" title="Numpy"></a>Numpy</h1><h2 id="Random-Number-Generation"><a href="#Random-Number-Generation" class="headerlink" title="Random Number Generation"></a>Random Number Generation</h2><h3 id="Random-Integer"><a href="#Random-Integer" class="headerlink" title="Random Integer"></a>Random Integer</h3><h4 id="np-random-choice-a-size-None-replace-True-p-None"><a href="#np-random-choice-a-size-None-replace-True-p-None" class="headerlink" title="np.random.choice(a, size=None, replace=True, p=None)"></a>np.random.choice(<em>a</em>, <em>size=None</em>, <em>replace=True</em>, <em>p=None</em>)</h4><p>Generates a random sample from a given 1-D array</p><p><em>New in version 1.7.0.</em></p><blockquote><p>New code should use the <code>choice</code> method of a <code>default_rng()</code> instance instead; please see the <a href="https://numpy.org/doc/stable/reference/random/index.html#random-quick-start">Quick Start</a>.</p></blockquote><ul><li><p>Parameters</p><p><strong>a</strong>: 1-D array-like or intIf an ndarray, a random sample is generated from its elements. If an int, the random sample is generated as if a were np.arange(a)<strong>size</strong>int or tuple of ints, optionalOutput shape. If the given shape is, e.g., <code>(m, n, k)</code>, then <code>m * n * k</code> samples are drawn. Default is None, in which case a single value is returned.</p><p><strong>replace</strong>: boolean, optionalWhether the sample is with or without replacement</p><p><strong>p</strong>: 1-D array-like, optionalThe probabilities associated with each entry in a. If not given the sample assumes a uniform distribution over all entries in a.</p></li><li><p>Returns</p><p><strong>samples</strong> single item or ndarrayThe generated random samples</p></li><li><p>Raises</p><p>ValueError If a is an int and less than zero, if a or p are not 1-dimensional, if a is an array-like of size 0, if p is not a vector of probabilities, if a and p have different lengths, or if replace=False and the sample size is greater than the population size</p></li></ul><h3 id="np-where-condition-x-y"><a href="#np-where-condition-x-y" class="headerlink" title="np.where(condition, [,x,y])"></a>np.where(condition, [,x,y])</h3><p>Return elements chosen from <em>x</em> or <em>y</em> depending on <em>condition</em>.</p><blockquote><p> When only <em>condition</em> is provided, this function is a shorthand for <code>np.asarray(condition).nonzero()</code>. Using <a href="https://numpy.org/doc/stable/reference/generated/numpy.nonzero.html#numpy.nonzero"><code>nonzero</code></a> directly should be preferred, as it behaves correctly for subclasses. The rest of this documentation covers only the case where all three arguments are provided.</p></blockquote><ul><li><p>Parameters</p><p>**condition **: array_like, bool Where True, yield <em>x</em>, otherwise yield <em>y</em>.</p><p><strong>x, y</strong>: array_like Values from which to choose. <em>x</em>, <em>y</em> and <em>condition</em> need to be broadcastable to some shape.</p></li><li><p>Returns</p><p><strong>out</strong> ndarray An array with elements from <em>x</em> where <em>condition</em> is True, and elements from <em>y</em> elsewhere.</p></li></ul><h3 id="Boolean-Mask"><a href="#Boolean-Mask" class="headerlink" title="Boolean Mask"></a>Boolean Mask</h3><p>Boolean mask can be used to select based on some condition</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">A[A[:,<span class="hljs-number">0</span>]==<span class="hljs-number">1</span>] <span class="hljs-comment"># select all rows whose first element equals 1</span><br></code></pre></td></tr></table></figure><h1 id="Fast-Fourier-Transform"><a href="#Fast-Fourier-Transform" class="headerlink" title="Fast Fourier Transform"></a>Fast Fourier Transform</h1><h2 id="Inspecting-Spectrum-from-Samples"><a href="#Inspecting-Spectrum-from-Samples" class="headerlink" title="Inspecting Spectrum from Samples"></a>Inspecting Spectrum from Samples</h2><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs maxima">psd = <span class="hljs-built_in">np</span>.<span class="hljs-built_in">fft</span>.fftshift(<span class="hljs-built_in">np</span>.<span class="hljs-built_in">abs</span>(<span class="hljs-built_in">np</span>.<span class="hljs-built_in">fft</span>.<span class="hljs-built_in">fft</span>(samples)))<br>f = <span class="hljs-built_in">np</span>.linspace(-fs/<span class="hljs-number">2.0</span>, fs/<span class="hljs-number">2.0</span>, len(psd)) # fs <span class="hljs-built_in">is</span> the sampling frequency<br>plt.plot(f, psd)<br>plt.<span class="hljs-built_in">show</span>()<br></code></pre></td></tr></table></figure><h1 id="Fuzzy"><a href="#Fuzzy" class="headerlink" title="Fuzzy"></a>Fuzzy</h1><p>The code below shows how to do fuzzy matching with python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">!pip install fuzzywuzzy<br>!pip install python-Levenshtein<br><span class="hljs-keyword">from</span> fuzzywuzzy <span class="hljs-keyword">import</span> fuzz<br><br>fuzz.token_sort_ratio(str1, str2) / <span class="hljs-number">100.0</span> &gt; <span class="hljs-number">0.9</span><br></code></pre></td></tr></table></figure><h1 id="Syntax-Sugar"><a href="#Syntax-Sugar" class="headerlink" title="Syntax Sugar"></a>Syntax Sugar</h1><h2 id="Unpacking-star-operator"><a href="#Unpacking-star-operator" class="headerlink" title="Unpacking (star operator *)"></a>Unpacking (star operator *)</h2><p>The single star <code>*</code> unpacks the sequence/collection into positional arguments, so you can do this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sum</span>(<span class="hljs-params">a, b</span>):</span><br>    <span class="hljs-keyword">return</span> a + b<br><br>values = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><br>s = <span class="hljs-built_in">sum</span>(*values)<br></code></pre></td></tr></table></figure><p>This will unpack the tuple so that it actually executes as:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-built_in">sum</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>The double star <code>**</code> does the same, only using a dictionary and thus named arguments:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">values = &#123; <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span> &#125;<br>s = <span class="hljs-built_in">sum</span>(**values)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Programming</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Notes on Linear Algebra</title>
    <link href="/2020/01/01/Notes-on-Linear-Algebra/"/>
    <url>/2020/01/01/Notes-on-Linear-Algebra/</url>
    
    <content type="html"><![CDATA[<h1 id="Linear-Algebra-Definitions"><a href="#Linear-Algebra-Definitions" class="headerlink" title="Linear Algebra - Definitions"></a>Linear Algebra - Definitions</h1><h2 id="Vectors"><a href="#Vectors" class="headerlink" title="Vectors"></a>Vectors</h2><h3 id="Vector-Space"><a href="#Vector-Space" class="headerlink" title="Vector Space"></a>Vector Space</h3><p>A vector space $\mathcal{V}$ is a set of elements (called “vectors”) that is <strong>closed under addition and scaler multiplication</strong>. </p><h3 id="Subspace"><a href="#Subspace" class="headerlink" title="Subspace"></a>Subspace</h3><p>A subspace of a vector space is a subset that obeys the rules of a vector space.</p><h3 id="Inner-Product"><a href="#Inner-Product" class="headerlink" title="Inner Product"></a>Inner Product</h3><p>The dot (or scaler, or inner) product is an operation between two equal length vectors that yields a scaler.</p><p>$$x^H y = \sum_i \bar x_i y_i$$</p><p>The dot product yields a complex number, and $x^Hy = (y^{H}x)^*$.</p><blockquote><p>Note that if we are dealing with complex vectors, the order of dot product matters for this precise reason.</p></blockquote><h2 id="Matrices"><a href="#Matrices" class="headerlink" title="Matrices"></a>Matrices</h2><h3 id="Conjugate-Transpose"><a href="#Conjugate-Transpose" class="headerlink" title="Conjugate Transpose"></a>Conjugate Transpose</h3><p>The conjugate transpose of a matrix $M$ is denoted as $M^H$. </p><blockquote><p>A Matrix $M$ is Hermitian if $M^H = M$</p></blockquote><h3 id="Eigenpairs"><a href="#Eigenpairs" class="headerlink" title="Eigenpairs"></a>Eigenpairs</h3><p>For an $n\times n$ matrix $A$, $(\lambda, x)$ is an eigenpair if</p><p>$$Ax = \lambda x$$</p><p>where $\lambda$ is an eigenvalue of $A$, and $x$ is the corresponding eigenvector. Recall that $\lambda$ can be zero, but $x$ must be non-zero.</p><p>For special matrices, their eigenpairs have the following properties:</p><ul><li>For <strong>Hermitian matrix</strong>, the eigenvalues are <em>real</em>, the eigenvectors are <em>orthogonal</em></li></ul><h3 id="Unitary-Matrix"><a href="#Unitary-Matrix" class="headerlink" title="Unitary Matrix"></a>Unitary Matrix</h3><p>A matrix $Q\in\mathbb{C}^{n\times n}$ is a <em>unitary</em> matrix if $Q^H=Q^{-1}$. That is, $Q^HQ =QQ^H=I$. If $Q$ is real, we would call it a <em>orthogonal</em> matrix.</p><h3 id="Positive-definite-and-semi-positive-definite"><a href="#Positive-definite-and-semi-positive-definite" class="headerlink" title="Positive definite and semi-positive definite"></a>Positive definite and semi-positive definite</h3><p>A Hermitian matrix is <em>positive definite</em> if $x^HMx&gt;0\space \text{for any } x\in \mathbb{C}^n \text{\}0$</p><p>A Hermitian matrix is <em>semi-positive definite</em> if $x^HMx\geq0\space \text{for any } x\in \mathbb{C}^n \text{\}0$ </p><p>In mathematics, <strong>Sylvester’s criterion</strong> is a <a href="https://en.wikipedia.org/wiki/Necessary_and_sufficient_condition">necessary and sufficient</a> criterion to determine whether a <a href="https://en.wikipedia.org/wiki/Hermitian_matrix">Hermitian matrix</a> is <a href="https://en.wikipedia.org/wiki/Positive-definite_matrix">positive-definite</a>. It is named after <a href="https://en.wikipedia.org/wiki/James_Joseph_Sylvester">James Joseph Sylvester</a>.</p><p>Sylvester’s criterion states that a <em>n</em> × <em>n</em> Hermitian matrix <em>M</em> is positive definite if and only if all the following matrices have a positive <a href="https://en.wikipedia.org/wiki/Determinant">determinant</a>:</p><ul><li>the upper left 1-by-1 corner of <em>M</em>,</li><li>the upper left 2-by-2 corner of <em>M</em>,</li><li>the upper left 3-by-3 corner of <em>M</em>,</li><li>…</li><li><em>M</em> itself.</li></ul><h3 id="Matrix-Rank"><a href="#Matrix-Rank" class="headerlink" title="Matrix Rank"></a>Matrix Rank</h3><p>The rank of the matrix $A\in\mathbb{C}^{m\times n}$ is the number of linearly independent rows or columns (the number is equal). it satisfies $rank(A)\leq\min(m,n)$</p><p>A matrix is <em>full rank</em> if $rank(A)=\min(m,n)$, and <em>rank deficient</em> if $rank(A)&lt;\min(m,n)$.</p><h2 id="Norms"><a href="#Norms" class="headerlink" title="Norms"></a>Norms</h2><p>A norm of an object is a non-negative, real-valued number that is a measure of ‘how big’ something is and which allows ordering. A norm must statisfy the following properties:</p><p>$$||x||&gt;0\ \text{when }x\neq 0,\ ||x||=0\ \text{when } x=0$$</p><p>$$||kx||=|k|||x||$$</p><p>$$||x+y||\leq||x||+||y||$$ <strong>Triangle inequality</strong></p><h3 id="Vector-norms"><a href="#Vector-norms" class="headerlink" title="Vector norms"></a>Vector norms</h3><p>A particular family of norms are known as $l_p$-norms:</p><p>$$||x||<em>p=\left(\sum</em>{i=1}^n|x_i|^p\right)^{1/p}$$</p><p>For example, the familiar $l_2$ norm is $||x||_2=(|x_1|^2+…+|x_n|^2)^{1/2}$</p><p>and the $l_\infty$ norm (also norm as the maximum norm):</p><p>$||x||_\infty=\max_i|x_i|$</p><p>We can also define vector norms with respect to a matrix $A$, subject to some restrictions on the matrix:</p><p>$$||x||^2_A=&lt;x,Ax&gt;$$ </p><p>where $&lt;\cdot,\cdot&gt;$ is an inner product. The above definition is often referred to as an “energy norm”, in which $A$ is positive definite.</p><h3 id="Matrix-norms"><a href="#Matrix-norms" class="headerlink" title="Matrix norms"></a>Matrix norms</h3><h4 id="Operator-norms"><a href="#Operator-norms" class="headerlink" title="Operator norms"></a>Operator norms</h4><p>A norm of a matrix $A$ is defined as:</p><p>$$||A||=\max_{x\in\mathcal{C}^n\text{\}0}\frac{||Ax||}{||x||}$$</p><p>The operator norm measures the ‘maximum amount’ by which the matrix $A$ can re-scale a vector $x$ (in relative terms). We can write $||Ax||\leq||A||\ ||x||\text{ for any }x$ </p><p>$||A||<em>1$ (1-norm) is the max column norm. $||A||_\infty$ ($\infty$ norm) extracts the maximum row norm and $$||A||_2^2=\lambda</em>{max}(A^HA)$$. If $A$ is Hermitian, then $||A||<em>2 = |\lambda</em>{max}(A)|$ </p><p>Apparently, the vector and matrix <strong>2-norms are invariant under rotation</strong>. That is, pre-multiplying a unitary matrix doesn’t change the norm. </p><blockquote><p>Note that operator norm also obeys triangle inequality $||A+B||\leq||A||+||B||$ and multiplication inequality $||AB||\leq||A||\times||B||$</p></blockquote><h4 id="Frobenius-norm"><a href="#Frobenius-norm" class="headerlink" title="Frobenius norm"></a>Frobenius norm</h4><p>Some matrix norms treat the entries of a matrix like the entries of a vector. One such norm is the Frobenius norm, defined by $||A||<em>F=\sqrt{\sum_i\sum_j|a</em>{ij}|^2}$. It is also invariant to rotations.</p><h2 id="Condition-Number"><a href="#Condition-Number" class="headerlink" title="Condition Number"></a>Condition Number</h2><p>The condition number of a matrix $A$ is:</p><p>$$\kappa(A) = ||A||\ ||A^{-1}||$$</p><p>For the 2-norm, we see that $\kappa_2(A)=\frac{\sqrt{\lambda_{max}(A^HA)}}{\sqrt{\lambda_{min}(A^HA)}}$, if $A$ is Hermitian, $\kappa_2(A)=\frac{|\lambda(A)|<em>{max}}{|\lambda(A)|</em>{min}}$</p><h1 id="Iterative-Methods-for-Linear-System"><a href="#Iterative-Methods-for-Linear-System" class="headerlink" title="Iterative Methods for Linear System"></a>Iterative Methods for Linear System</h1><h2 id="Direct-Methods"><a href="#Direct-Methods" class="headerlink" title="Direct Methods"></a>Direct Methods</h2><p>A direct method computes a solution of $Ax=b$ in a known/predictable number of operations. Solving a system via LU decomposition is an example of a direct method.</p><h2 id="Iterative-Methods"><a href="#Iterative-Methods" class="headerlink" title="Iterative Methods"></a>Iterative Methods</h2><p>An iterative method seeks an approximate solution via a series of steps (iterations), and is usually terminated when the error/residual falls below a prescribed threshold (in the chosen norm).</p><h3 id="Finding-the-largest-eigenvalue-and-eigenvector"><a href="#Finding-the-largest-eigenvalue-and-eigenvector" class="headerlink" title="Finding the largest eigenvalue and eigenvector"></a>Finding the largest eigenvalue and eigenvector</h3><h4 id="Rayleigh-quotient"><a href="#Rayleigh-quotient" class="headerlink" title="Rayleigh quotient"></a>Rayleigh quotient</h4><p>The Rayleigh quotient gives us a way to estimate the eigenvalue based on an estimate of the eigenvector. It is defined as the following:</p><p>$$\lambda^*=R(A,x)=\frac{x^HAx}{x^Hx}$$</p><p>where $x$ is our estimated eigenvector with $Ax\approx \lambda x$. We can show that this minimizes the $l_2$ cost $||Ax-\lambda x||_2^2$ </p><blockquote><p>To show that, we start with any $\mu\in \mathcal{C}$ and show that  $||Ax-\mu x||_2^2 \geq ||Ax-\lambda x||_2^2$</p></blockquote><p>The Rayleigh quotient is often defined for Hermitian matrices only, in which case it must be real-valued. For Hermitian matrices, if the error in the eigenvector is $O(\epsilon)$, than the error in the eigenvalue estimated is $O(\epsilon^2)$</p><h3 id="Stationary-methods-for-Ax-b"><a href="#Stationary-methods-for-Ax-b" class="headerlink" title="Stationary methods for $Ax=b$"></a>Stationary methods for $Ax=b$</h3><p>We decompose the matrix operator $A = N-P$. So rather than solving the exact problem, we have $Nx = b + Px$, and we compute each iteration using:</p><p>$$Nx_{k+1}=b+Px_k$$</p><p>The key is to split $A$ such that $Nx=f$ are easy to solve, examples involve:</p><ol><li>Richardson iteration:    $N=I$</li><li>Jacobi method: $N = diag(A)$</li><li>Gauss-Seidel: $N = L(A)$ is the lower triangular </li></ol><h4 id="Convergence"><a href="#Convergence" class="headerlink" title="Convergence"></a>Convergence</h4><p>Defining the error at the $k$-th iteration $e_k = x_{exact}-x_k$. We have</p><p>$$Ne_{k+1} = Pe_k\ \rightarrow e_{k+1} = N^{-1}Pe_k$$</p><p>For convergence, we need the eigenvalues (absolute value) of $N^{-1}P$ to be smaller than $1$. The largest absolute eigenvalue is often denoted $\rho(A)$ and is known as the <em>spectral radius</em>. The stationary methods based on spliting will converge if $\rho(N^{-1}P)&lt;1$</p><blockquote><p>Smaller $\rho$ leads to faster convergence.</p></blockquote><h3 id="Conjugate-Gradient-Method-CG"><a href="#Conjugate-Gradient-Method-CG" class="headerlink" title="Conjugate Gradient Method (CG)"></a>Conjugate Gradient Method (CG)</h3><p>The Conjugate gradient method is a <em>Krylov subspace</em> method, which is a more powerful family of the methods than the stationary methods.</p><h1 id="Singular-Value-Decomposition"><a href="#Singular-Value-Decomposition" class="headerlink" title="Singular Value Decomposition"></a>Singular Value Decomposition</h1><h2 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h2><p>The Sigular Value Decomposition (SVD) is defined as follows: for an $m\times n$ matrix A, its singular value decomposition is</p><p>$$A = U\Sigma V^H$$ </p><p>where  $U$ and $V$ are unitary matrices. $\Sigma$ is a diagonal matrix, with diagonal entries $\sigma_i$ (the ‘singular value’) stored such that $\sigma_1 &gt; \sigma_2 &gt; … &gt; \sigma_p &gt; 0$. If $A$ is Hermitian, then the definition falls back to that of eigen-decomposition.</p><p>The columns of $V$ is the eigenvectors of $A^HA$. The columns of $U$ is the eigenvectors of $AA^H$.</p><blockquote><p>To ensure the eigenvectos have the correct sign, we need to enforce $AV = U\Sigma$ because doing eigen-decomposition on $A^HA$ and $AA^H$ (note both are Hermitian) brings ambiguity to the signs $Q\Lambda Q^H = (-Q)\Lambda (-Q^H)$</p></blockquote><p><img src="image-20210206120924169.png" alt="image-20210206120924169"></p><h2 id="Low-rank-approximations"><a href="#Low-rank-approximations" class="headerlink" title="Low rank approximations"></a>Low rank approximations</h2><p>If we expand the SVD, we get $A = \sum_{i=1}^r \sigma_i u_iv_i^H$ where $r$ is the number of non-zero singular values. $u_i$ is the $i$th column of $U$ and $v_i$ is the $i$th column of $V$. The above is the expression of a matrix as a sum of rank-1 matrices.</p><p>If we just take $k&lt;r$ singular values we can obtain a low rank approximation of $A = \sum_{i=1}^k\sigma_i u_iv_i^H$.  We can show that this is the best approximation of $A$ than <strong>any</strong> other matrix of rank $k$.</p><p>![Screen Shot 2021-02-06 at 12.13.32](Screen Shot 2021-02-06 at 12.13.32.png)</p><p>The low rank approximation allows us to <em>compress</em> large matrices (e.g. images etc).</p><h2 id="Effective-Rank"><a href="#Effective-Rank" class="headerlink" title="Effective Rank"></a>Effective Rank</h2><p>When taking measurements, noise is often unavoidable and this can make it hard to detect (near) linear dependencies. For example:</p><p>![Screen Shot 2021-02-06 at 12.15.21](Screen Shot 2021-02-06 at 12.15.21.png)</p><p>SVD can be used to obtain the effective ranks of the matrix by saving ranks with singular values that are greater than the noise level.</p><h2 id="Least-Square-Solutions"><a href="#Least-Square-Solutions" class="headerlink" title="Least Square Solutions"></a>Least Square Solutions</h2><p>Recall that the least square solution of $Ax=b$ is $\hat x = (A^HA)^{-1}A^H b$. Where $A^+=(A^HA)^{-1}A^H$ is the psuedoinverse.</p><p>We can use SVD to solve least square problems. It is known to be the <strong>most stable</strong> method to solve such problems.</p><h3 id="Full-Rank-Case"><a href="#Full-Rank-Case" class="headerlink" title="Full Rank Case"></a>Full Rank Case</h3><p>Since the matrix is full rank, the least square solution is <em>unique</em>. </p><p><img src="image-20210206122437157.png" alt="image-20210206122437157"></p><p>This also relates to the normal equations as follows:</p><p>![Screen Shot 2021-02-06 at 12.25.39](Screen Shot 2021-02-06 at 12.25.39.png)</p><p>A simple analysis on the 2-norm of the solution $x$ implies that the sensitivity (or stability) of the solution is related to the <em>smallest singular value</em> $\sigma_{min}$. If $\sigma_{min}$ is small, then the least square solution will be large and very sensitive to changes in $b$.</p><p><img src="image-20210206122821319.png" alt="image-20210206122821319"></p><h3 id="Rank-Deficient-Case"><a href="#Rank-Deficient-Case" class="headerlink" title="Rank Deficient Case"></a>Rank Deficient Case</h3><p>Rank deficient refers to situation when the corresponding singular values are <em>zero</em> or <em>small</em>. The least square solution is <strong>not unique</strong> but we can find a solution that is <strong>minimized in 2-norm</strong>. </p><p><img src="image-20210206123114266.png" alt="image-20210206123114266"></p><p>where $V_1$ and $U_1$ are truncated from $V$ and $U$ as follows:</p><p>![Screen Shot 2021-02-06 at 12.31.52](Screen Shot 2021-02-06 at 12.31.52.png)</p>]]></content>
    
    
    
    <tags>
      
      <tag>Cambridge</tag>
      
      <tag>Maths</tag>
      
      <tag>Note</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Data Transmission Notes</title>
    <link href="/2020/01/01/Data-Transmission-Notes/"/>
    <url>/2020/01/01/Data-Transmission-Notes/</url>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>This course is about the fundamental principles of designing communication systems. A more realistic (but still simplified) picture of a source-destination link is:</p><p><img src="2021-01-27-at-16.11.45.png"></p><p>We will</p><ul><li>Focus mostly on the physical layer (transmission techniques)</li><li>The last three lectures will focus on network algorithms for routing and congestion control</li></ul><p>Outline:</p><ul><li>Fundamentals of modulation &amp; demodulation for baseband and passband channels (7L, Dr Venkataramanan)</li><li>Advanced concepts in modulation (Equalization, OFDM) (3L, Dr Venkataramanan)</li><li>Error-correction and convolutional coding (3L, Dr Jossy Sayir)</li><li>Network-layer algorithms for routing and congestion control (3L, Dr Jossy Sayir)</li></ul><h1 id="The-Physical-Layer"><a href="#The-Physical-Layer" class="headerlink" title="The Physical Layer"></a>The Physical Layer</h1><p><img src="2021-01-27-at-16.12.44" alt="2021-01-27-at-16.12.44"></p><p>Transmitter does two things:</p><ol><li><em>Coding</em>: Adding redundancy to the data bits to protect against noise</li><li><em>Modulation</em>: Transforming the coded bits into waveforms</li></ol><h1 id="The-Signal-Space"><a href="#The-Signal-Space" class="headerlink" title="The Signal Space"></a>The Signal Space</h1><p>Below is the overall picture of a standard communication process:</p><p>bits $b$ -[mapping]-&gt; input waveform $x(t)$ -[channel]-&gt; received waveform $y(t)$ -[decode]-&gt; received bit $\hat b$</p><p>The signal space is an elegant way to represent time-dependent <strong>waveform ** $x(t),y(t)$ using **projection efficients</strong> ${x_i},{y_i}$ , given an <strong>orthonormal basis</strong>.</p><h2 id="Mapping-bits-to-waveforms"><a href="#Mapping-bits-to-waveforms" class="headerlink" title="Mapping bits to waveforms"></a>Mapping bits to waveforms</h2><p><img src="2021-01-27-at-16.24.15.png" alt="Screen Shot 2021-01-27 at 16.24.15"></p><p>Given data bits, we typically map the $m$ bits using $M=2^m$ waveforms as above. We could alternatively use other mappings like:</p><p><img src="2021-01-27-at-16.25.32.png" alt="Screen Shot 2021-01-27 at 16.25.32"></p><h2 id="Vector-Spaces"><a href="#Vector-Spaces" class="headerlink" title="Vector Spaces"></a>Vector Spaces</h2><p>A vector space $\mathcal{V}$ is a set of elements (called “vectors”) that is <strong>closed under addition and scaler multiplication</strong>. </p><p>A set of <em>linearly independent</em> vectors is called a <strong>basis</strong> of the vector space $\mathcal{V}$, if $v\in\mathcal{V}$ can be expressed as a linear combination of the form</p><p>$$v = a_1v_1 + a_2v_2 + … + a_kv_k$$</p><p>for some scaler $a_1,…,a_k$</p><p>Let $\mathcal{L}_2$ be the set of complex-valued signals (functions) $x(t)$ with finite energy, i.e.,</p><p>$$\int_{-\infty}^\infty|x(t)|^2dt &lt; \infty$$</p><p>It can be shown that $\mathcal{L}_2$ is a vector space. The inner product this space can be defined as follows. For $x(\cdot),y(\cdot)\in\mathcal{L}_2$,</p><p>$$&lt;x,y&gt; = \int_{-\infty}^\infty x(t)y^*(t)dt$$</p><p>the norm of a signal is the square-root of its energy:</p><p>$$||x||=\sqrt{&lt;x,x&gt;}= [ \int_{-\infty}^\infty |x(t)|^2dt]^{1/2}$$</p><h3 id="Orthonormal-Basis-in-mathcal-L-2"><a href="#Orthonormal-Basis-in-mathcal-L-2" class="headerlink" title="Orthonormal Basis in $\mathcal{L_2}$"></a>Orthonormal Basis in $\mathcal{L_2}$</h3><p>For any vector space $\mathcal{L}\subset\mathcal{L_2}$, the set of functions ${f_i(\cdot),i=1,2,…}$ is called an <strong>orthonormal</strong> basis for $\mathcal{L}$ if </p><ol><li><p>Every $x(\cdot)\in\mathcal{L}$ can be expressed as</p><p>$$x(t)=\sum_i x_if_i(t)$$</p><p>for some scaler $x_1,x_2,…$ and</p></li><li><p>The functions ${f_i(\cdot),i=1,2,…}$ are <em>orthonormal</em>. That is,</p><p>$$&lt;f_l,f_m&gt; = \int f_l(t)f^*_m(t)=1$$</p><p><em>if and only if</em> $l=m$, and equal $0$ otherwise</p></li></ol><p>If we fix an orthonormal basis for $\mathcal{L}$, we can treat functions in $\mathcal{L}$ just like vectors in Euclidean space. I.e.,</p><p>$$x(t) \leftrightarrow (x_1,x_2,…,x_k)$$</p><h1 id="Channel-Model"><a href="#Channel-Model" class="headerlink" title="Channel Model"></a>Channel Model</h1><p>Channels are often modelled as <em>linear time-invariant</em> systems with additive noise. With such model, the channel output $y(t)$ generated from input $x(t)$ is given as $y(t) = h(t)\star x(t)+n(t)$. We can use the <strong>additive noise model</strong> for some channels but not all, depending on the channel specification.</p><p>In frequency domain:</p><p>$$Y(f) = H(f)X(f)+N(f)$$</p><p><img src="2021-01-27-at-16.42.22.png" alt="Screen Shot 2021-01-27 at 16.42.22"></p><p>If our input signal $x(t)$ is bandlimited to $[-W_0, W_0]$, where $|H(f)|$ is constant, then $y(t)=c x(t-\tau)+n(t)$</p><blockquote><p>$y(t)$ is found by inverse frequency domain $Y(f)$ </p></blockquote><p>We can compensate for the constant channel gain $c$ and the constant delay $\tau$ at the receiver, so the channel is effectively</p><p>$$y(t) =x(t)+n(t)$$</p><p>But this is <strong>not a suitable model if $x(t)$ now has larger bandwidth spanning</strong> $[-W_1,W_1]$, in which case we need to understand how the channel <em>filters</em> the input signal. This is relevant when the telephone wire is used for DSL broadband communication.</p><h2 id="Passband-Channel-Model"><a href="#Passband-Channel-Model" class="headerlink" title="Passband Channel Model"></a>Passband Channel Model</h2><p>Here the signal is restricted to have frequency components in the band$ [fc +W,fc −W]$,where$ fc$ is a carrier frequency( typically $fc ≫W$ ). As in baseband, there could be two scenarios in a passband channel.</p><p>If $|H (f )|$ is constant throughout the band and delay is also a constant $τ$ , then an additive noise model $y(t) = x(t) + n(t)$ can be used.</p><blockquote><p>However, in mobile wireless communication, there are typically multiple signal paths from Tx to Rx. Such cases are not suitable for additive noise model </p></blockquote><h1 id="Noise-Model"><a href="#Noise-Model" class="headerlink" title="Noise Model"></a>Noise Model</h1><p>$$y(t) = h(t)\star x(t)+n(t)$$</p><p>$n(t)$ is thermal noise at the Rx, and is inevitable for all receivers.</p><p>We can model $n(t)$ as a <strong>Gaussian white noise process</strong>: For each $t$, $n(t)$ is Gaussian with zero mean and autocorrelation function:</p><p>$$\mathbb{E}[n(t)n(t+\tau)]=\frac{N_0}{2}\delta(\tau)$$</p><p>We note that the power spectual density (PSD or power spectrum) is $S_n(f)=\frac{N_0}{2}$, which has <em>infinite power</em>. But this doesn’t concern us because the transimitted sigal $x(t)$ is always <em>bandlimited</em>, giving finite energy.</p><h1 id="Signal-Detection-in-White-Gaussian-Noise"><a href="#Signal-Detection-in-White-Gaussian-Noise" class="headerlink" title="Signal Detection in White Gaussian Noise"></a>Signal Detection in White Gaussian Noise</h1><p><img src="2021-01-27-at-16.57.35.png" alt="Screen Shot 2021-01-27 at 16.57.35"></p><p>Set up:</p><ul><li>Signal set consists of $M$ waveforms ${s_1(t),…,s_M(t)}$</li><li>We transmit one of $M$ messages with $x_i=s_i(t)$ </li><li>${\phi_1(t),…,\phi_K(t)}$ is an orthonormal basis for the signal set. </li><li>We wish to detect transmitted message from $y(t)=x(t)+n(t)$</li></ul><p>Hence each signal is equivalent to a $K$-dimensional vector.</p><p>$$s_i(t) \leftrightarrow s_i=[s_{i,1},…,s_{i,K}]$$</p><p>Where the coefficents $s_{i,m} = \int s_i(t)\phi_m^*(t)dt$</p><p><img src="2021-01-27-at-17.02.45.png" alt="Screen Shot 2021-01-27 at 17.02.45"></p><blockquote><p>We didn’t lose any useful information by projecting the signal onto signal space</p></blockquote><h2 id="Projection-coefficients-of-white-noise"><a href="#Projection-coefficients-of-white-noise" class="headerlink" title="Projection coefficients of white noise"></a>Projection coefficients of white noise</h2><p>Let ${n_m}_{m\in\mathbb{Z}}$ be the projection coefficient of white noise. Then ${n_m}_{m\in\mathbb{Z}}$ are <strong>i.i.d. Gaussian with zero mean and variance $N_0/2$</strong>.  See prove below:</p><p><img src="2021-01-27-at-17.05.05.png" alt="Screen Shot 2021-01-27 at 17.05.05"></p><h2 id="Optimal-Detection"><a href="#Optimal-Detection" class="headerlink" title="Optimal Detection"></a>Optimal Detection</h2><p>The optimal detection rule that maximizes the probability of detection error is the <strong>Maximum a posteriori probability rule (MAP)</strong>   </p><p>$$\hat x = \arg\max_{s_i\in\mathcal{S}}P(x=s_i)f(r|x=s_i)$$</p><p>The optimallity of MAP can be shown as below:</p><p><img src="image-20210128233505370.png" alt="image-20210128233505370"></p><p>Notably, if the prior distribution on the signal vector is uniform, than the MAP rules decays to the <strong>Maximum Likelihood (ML)</strong> estimator.</p><h3 id="ML-Detection-in-AWGN"><a href="#ML-Detection-in-AWGN" class="headerlink" title="ML Detection in AWGN"></a>ML Detection in AWGN</h3><p>For additive white noise and uniform prior on signal vector, the optimal detection rule is simply:</p><p>$$\hat x^{ML} = \arg\min_{s_i\in\mathcal{S}}||r-s_i||^2$$</p><p>which is the intuitive “minimum distance” decoding.</p><h3 id="MAP-detection-in-AWGN"><a href="#MAP-detection-in-AWGN" class="headerlink" title="MAP detection in AWGN"></a>MAP detection in AWGN</h3><p>Suppose the prior probability of the signal vectors are $P(x=s_i)=p_i$, the MAP rule is:</p><p><img src="2021-01-28-at-23.39.55.png" alt="Screen Shot 2021-01-28 at 23.39.55"></p><h1 id="Baseband-Transmission-using-PAM"><a href="#Baseband-Transmission-using-PAM" class="headerlink" title="Baseband Transmission using PAM"></a>Baseband Transmission using PAM</h1><p><strong>Pulse-amplitude modulation</strong> (<strong>PAM</strong>), is a form of signal <a href="https://en.wikipedia.org/wiki/Modulation">modulation</a> where the message information is encoded in the amplitude of a series of signal pulses. It is an analog pulse modulation scheme in which the amplitudes of a train of carrier pulses are varied according to the sample value of the message signal. Demodulation is performed by detecting the amplitude level of the carrier at every single period.</p><p>To specify a PAM scheme, we need to:</p><ol><li>Select the <strong>symbol constellation</strong>. For example ${-3A, -A, A, 3A}$ map the transmitted bits to the symbol as $00\rightarrow -3A$ etc. Once we fix the constellation, a sequence of bits can be uniquely mapped to constellation symbols.</li><li>We then select the <strong>pulse waveform</strong> denoted by $p(t)$, whose amplitude is going to be modulated. The <em>baseband</em> signal is given by $x(t)=\sum_mX_mp(t-mT)$. where $T$ is called the <em>symbol</em> time of the pulse.</li></ol><p><img src="2021-02-10-at-02.19.38.png" alt="Screen Shot 2021-02-10 at 02.19.38"></p><p>The <em>transmission rate</em> is $1/T$<strong>symbols/sec</strong> or $\log_2(M)/T$ <strong>bits/second</strong>, where $M$ is the constellation’s size.</p><h2 id="Desirable-Properties-of-the-Pulse-Shape-p-t"><a href="#Desirable-Properties-of-the-Pulse-Shape-p-t" class="headerlink" title="Desirable Properties of the Pulse Shape $p(t)$"></a>Desirable Properties of the Pulse Shape $p(t)$</h2><ol><li>We want $p(t)$ to decay quickly in time:<br>since symbol $X_m$ is carried by $p(t − mT)$, its effect should not start much before $t = mT$ or last much beyond $t = (m + 1)T$</li><li>We want $p(t)$ to be band-limited to $[−W , W ]$.</li><li>The shifted pulses ${p(t-mT)}_{m\in\mathcal{Z}}$ should form an <strong>orthonormal basis</strong></li></ol><h3 id="Time-Decay-and-Bandwidth"><a href="#Time-Decay-and-Bandwidth" class="headerlink" title="Time Decay and Bandwidth"></a>Time Decay and Bandwidth</h3><p>There is a tradeoff between time decay and bandwidth, which is best illustrated by the comparison between rect and sinc function.</p><p><img src="2021-02-10-at-02.23.44.png" alt="Screen Shot 2021-02-10 at 02.23.44"></p><h3 id="Orthonormality"><a href="#Orthonormality" class="headerlink" title="Orthonormality"></a>Orthonormality</h3><p><img src="2021-02-10-at-02.26.45.png" alt="Screen Shot 2021-02-10 at 02.26.45"></p><p>By fixing a basis we can then represent the time signal in signal space by <strong>projecting $y(t)$ onto each of the orthonormal basis functions</strong>. Now we can build the optimal receiver using the minimum distance rule etc.</p><p>We can build a bank of $K$ “correlators”, which compute the inner products with the K pulse shifts:</p><p><img src="2021-02-10-at-02.29.21.png" alt="Screen Shot 2021-02-10 at 02.29.21"></p><p>But this implementation is <strong>not practical</strong> since we typically want to transmit a large amount of data. So $K$ can be very large.</p><h2 id="Matched-Filter-Implementation"><a href="#Matched-Filter-Implementation" class="headerlink" title="Matched Filter Implementation"></a>Matched Filter Implementation</h2><p>The matched filter is just a construct to project the time signal onto signal space (i.e., getting $X_k$ ). Let the filter impulse response be $q(t) = p(-t)$ </p><p><img src="2021-02-10-at-02.31.14.png" alt="Screen Shot 2021-02-10 at 02.31.14"></p><p>Addition note on interpreting convolutional integral:</p><p><img src="image-20210210024905763.png" alt="image-20210210024905763"></p><h2 id="Drawbacks-of-PAM"><a href="#Drawbacks-of-PAM" class="headerlink" title="Drawbacks of PAM"></a>Drawbacks of PAM</h2><p>So far the signal is <em>baseband</em>, in order to transmit it we will want to “up-convert” it with a high frequency carrier wave at $f_c$. Notice that because our signal $X_k$ and pulse $p(t)$ are real, the Fourier transfrom is a even function. This comes from $X_b(-f) = X_b^*(f)$ for real-valued functions. </p><p><img src="image-20210223015002269.png" alt="image-20210223015002269"></p><p><img src="image-20210223005733742.png" alt="image-20210223005733742"></p><h1 id="The-Nyquist-Pulse-Criterion"><a href="#The-Nyquist-Pulse-Criterion" class="headerlink" title="The Nyquist Pulse Criterion"></a>The Nyquist Pulse Criterion</h1><p>In communications, the <strong>Nyquist ISI criterion</strong> describes the conditions which, when satisfied by a <a href="https://en.wikipedia.org/wiki/Communication_channel">communication channel</a> (including responses of transmit and receive filters), result in no <a href="https://en.wikipedia.org/wiki/Intersymbol_interference">intersymbol interference</a> or ISI. It provides a method for constructing band-limited functions to overcome the effects of intersymbol interference.</p><p>We have the following setup:</p><p><img src="image-20210213005426388.png" alt="image-20210213005426388"></p><p>The matched filter is just a special case when $q(t)=p(-t)$. We will look at how to <strong>jointly select $p(t)$ and $q(t)$  such that $r(mT)=X_m$</strong>. We denote $g(t) = p(t)\star q(t)$ as the <strong>effective pulse</strong>. Then we can write $r(t)=\sum_kX_kg(t-kT)$</p><p>We want $r(mT)=X_m$ for all integer $m$, which is the ideal case when we have no <strong>inter-symbol interference</strong> (ISI). The <em>Nyquist Pulse Criterion</em> states the <em>frequency domain condition</em> for $g(t)$ in order to have no inter-symbol interference.</p><p>The Nyquist Pulse Criterion is $\sum_{n=-\infty}^\infty G(f-\frac{n}{T}) = T$, which intuitively is <em>frequency-shifted replicas of $G(f)$ must add up to a constant value</em>. </p><blockquote><p><strong>Implication of Nyquist pulse criterion</strong>: The Nyquist pulse criterion implies that in order to have no ISI, $G(f)$ must have bandwidth at least $1/(2T)$. Otherwise there will be a “gap” in the summation of replicas and hence will not add to a constant value.</p></blockquote><h2 id="Quadrature-Amplitude-Modulation-QAM"><a href="#Quadrature-Amplitude-Modulation-QAM" class="headerlink" title="Quadrature Amplitude Modulation (QAM)"></a>Quadrature Amplitude Modulation (QAM)</h2><p>In Quadrature Amplitude Modulation (QAM), we allow our symbol $X_k$ to be complex-valued. This is <strong>bandwidth efficient</strong> because now our baseband frequency spectrum is not even. However, the signal we transmit must be real, so we generate the <em>passband</em> QAM by taking the real part: </p><p> $$x(t)= \text{Re}(\sqrt{2}x_b(t)e^{j2\pi f_c t})$$</p><blockquote><p>The $\sqrt 2$ makes the carrier unit power</p></blockquote><p>What this essentially means that we are <strong>using two carriers with one lagging $180\deg$ to another</strong> (sine and cosine). </p><blockquote><p> The cosine carrier $\cos(2\pi f_ct)$ is called the <strong><em>in-phase</em></strong> component and the sinusoid carrier $\sin(2\pi f_ct)$ the <strong><em>quadrature</em></strong> component. For this reason, QAM is also called I-Q modulation</p></blockquote><p><img src="image-20210223011719425.png" alt="image-20210223011719425"></p><p><img src="image-20210223011553491.png" alt="image-20210223011553491"></p><blockquote><p>How to obtain the passband transfrom?</p></blockquote><p>Some typical QAM constellations include <em>Phase Shift Keying (PSA), 16-QAM</em> etc. In PSK, the magnitude of $X_k$ is constant, and the information is in the phase of the symbol.</p><h2 id="Orthogonality"><a href="#Orthogonality" class="headerlink" title="Orthogonality"></a>Orthogonality</h2><p><img src="image-20210223010833953.png" alt="image-20210223010833953"></p><p> We can prove that the pulse-carrier product forms orthonormal basis, and hence we can use the idea of signal space (projection) to deal with optimal decoding. To show this, we need the Parserval’s theorem:</p><blockquote><p>Parserval Theorem: $\int_{-\infty}^\infty x(t)y(t)dt = \int_{-\infty}^{\infty}X(f)Y(f)^*df$</p></blockquote><h2 id="Receiver"><a href="#Receiver" class="headerlink" title="Receiver"></a>Receiver</h2><p>We can efficiently implement the signal space demodulator (demodulation + signal space projection) by <strong>carrier multiplication + low-pass filter followed by matched filter</strong></p><p>To see why this is valid, note that:</p><p><img src="image-20210223013211271.png" alt="image-20210223013211271"></p><p>We therefore can reduce the problem  to <em>PAM</em> projection with carrier multiplication and low-pass filter. Here the matched filter uses the orthogonality of the pulse waveform. </p><blockquote><p>Note that the multiplication + low-pass filter + matched filter is just an efficient implementation of the optimal signal space receiver. A bank of correlators (as in PAM) is a possible but unpractical alternative.</p></blockquote><h2 id="Error-Probability-Analysis"><a href="#Error-Probability-Analysis" class="headerlink" title="Error Probability Analysis"></a>Error Probability Analysis</h2><p>To analyse the error probability of PSK, we need to use the rotation invariance of zero-mean Gaussian noise vector. Specifically:</p><p><img src="image-20210223013831237.png" alt="image-20210223013831237"></p><p>This essentailly tells us the distribution is invariant to our choice of coordinates rotations. So we can choose the most convenient coordinate (usually with axis normal to the decision bounday) to compute the error probability. Below is an example:</p><p><img src="image-20210223014045450.png" alt="image-20210223014045450"></p><h1 id="Frequency-Shift-Keying-FSK"><a href="#Frequency-Shift-Keying-FSK" class="headerlink" title="Frequency Shift Keying (FSK)"></a>Frequency Shift Keying (FSK)</h1><p>In Frequency Shift Keying (FSK), the information modulates the <em>frequency</em> of the carrier.</p><p><img src="image-20210223014249296.png" alt="image-20210223014249296"></p><blockquote><p>Note that $\Delta f$ is related to the tranmission period $T$ by $\Delta f = \frac{1}{2T}$. </p></blockquote><h2 id="Demodulation-and-Detection-for-M-ary-FSK"><a href="#Demodulation-and-Detection-for-M-ary-FSK" class="headerlink" title="Demodulation and Detection for M-ary FSK"></a>Demodulation and Detection for M-ary FSK</h2><p>The waveforms ${f_1(t), f_2(t),…f_M(t)}$ are orthonormal over each symbol period, the demodulator computes their corresponding projection $Y_i = &lt;y(t), f_i(t)&gt;$.</p><p><img src="image-20210223014840650.png" alt="image-20210223014840650"></p><p> It should be obvious that the optimal detection rule is given by $\hat m=\arg\max_{1\leq i\leq M}y_i$</p><h2 id="Probability-of-Detection-Error-and-Bandwidth-Efficiency"><a href="#Probability-of-Detection-Error-and-Bandwidth-Efficiency" class="headerlink" title="Probability of Detection Error and Bandwidth Efficiency"></a>Probability of Detection Error and Bandwidth Efficiency</h2><p>An error occurs if $y_1$ is not the maximum in the signal space vector. Suppose we transmit $x_1$</p><p><img src="image-20210223015002269.png" alt="image-20210223015002269"></p><p>The bandwidth of FSK is given by $\frac{M-1}{2T}$. The bandwidth efficiency (symbol rate/freq) is given by $\frac{2\log_2M}{M-1}$. It <em>decreases</em> as $M$ increases. This is due to the fact that       </p><p>We note that the bandwidth efficiency (symbol/Hz) for FSK decreases as $M$ gets larger, but its error probability decreases if $E_b/N_0 &gt; 2\ln2$. For QAM, the bandwidth efficiency $\frac{\log_2M/T_s}{2/T_s}$ increases but the probability of error increases. There is a tradeoff between bandwidth efficiency and detection error.</p><h1 id="Channel-Equalisation"><a href="#Channel-Equalisation" class="headerlink" title="Channel Equalisation"></a>Channel Equalisation</h1><p>So far we have considered baseband/passband channels whose frequency response $H(f)$ was <strong>flat</strong> throughout the transmission frequency band. This meant that (after compensating for attenuation and delay), the effective channel is an AWGN channel.</p><p>However in many applications, the channel spectrum is not flat throughout the transmission band. For example, the frequency response of a DSL cable might look like</p><p><img src="image-20210224235513779.png" alt="image-20210224235513779"></p><p>Also the mobile wireless channel is a <em>multi-path</em> channel, we can model it with delays and attenuations </p><p><img src="image-20210224235605128.png" alt="image-20210224235605128"></p><p>In general, we will want to model the unflatness of the channel by its impulse response $h(t)$, the received signal thus becomes:</p><p>$$y(t) = \int h(t)x(t-u)du + n(t)$$</p><p>As compared to the AWGN model of $y(t) = x(t) + n(t)$</p><blockquote><p>A channel frequency response $H(f)$ that is not flat in the transmission band is called frequency-selective or dispersive</p></blockquote><p><img src="image-20210225000028257.png" alt="image-20210225000028257"></p><p>The effective pulse $g(t)$ is now $p(t)\star h(t) \star q(t)$. In the absence of noise, our received sampled signal is given by $r(mT) = \sum_k X_k g((m-k)T)$. We can denote $r_m = r(mT), g_m = g(mT)$, so that $r_m = \sum_l g_l X_{m-l}$, or $r(k) = g(k)\star X(k)$</p><blockquote><p>Relation with Nyquist Pulse Criterion: If $g_m$ is a digital delta (pulse) then it must satisfy the Nyquist Pulse Criterion. It is a special case where the channel is “perfect”. </p><p>In general the output will have ISI $g(k)\neq0\text{ for } k\neq0$, the output is effective the <strong>filtered</strong> symbols. Channel equalisation is trying to reverse that filter by passing $r_m$ through another filter to recover the original symbols.</p></blockquote><p>${r_m}$ is effectively ${X_m}$ passed through a filter ${g_m}$, and we wish to reverse that filter. This is called <strong>channel equalisation</strong>.</p><blockquote><p>Definition from Wikipedia: In <a href="https://en.wikipedia.org/wiki/Telecommunication">telecommunication</a>, <strong>equalization</strong> is the reversal of distortion incurred by a signal transmitted through a <a href="https://en.wikipedia.org/wiki/Channel_(communications)">channel</a>. <strong>Equalizers</strong> are used to render the <a href="https://en.wikipedia.org/wiki/Frequency_response">frequency response</a>—for instance of a telephone line—<em>flat</em> from end-to-end. When a <a href="https://en.wikipedia.org/wiki/Communication_channel">channel</a> has been equalized the <a href="https://en.wikipedia.org/wiki/Frequency_domain">frequency domain</a> attributes of the signal at the input are faithfully reproduced at the output. Telephones, <a href="https://en.wikipedia.org/wiki/DSL">DSL</a> lines and television cables use equalizers to prepare data signals for transmission.</p></blockquote><h2 id="Zero-Forcing-Equaliser"><a href="#Zero-Forcing-Equaliser" class="headerlink" title="Zero-Forcing Equaliser"></a>Zero-Forcing Equaliser</h2><p>After a <strong>Z-transform</strong>, we have $R(z) = G(z)X(z)$. Now we wish to have $Y(z)=H(z)R(z)$ and $Y(z)$ is our estimated transmitted symbol. One obvious way is to let $H(z) = G(z)^{-1}$ so that we recover exactly $Y(z)=X(z)$. This is called the <em>zero-forcing equaliser</em>.</p><blockquote><p>Why Z-transform? Note that the channel is just a digial filter. Z-transform is the easiest way to solve for the output given the input and the filter.</p></blockquote><p>It is called Zero-Forcing because it completely eliminates ISI.</p><p>In general, the zero forcing equaliser is given by:</p><p>$H_E(z)=\frac{1}{\sum_l^Lg_lz^{-l}} = h_0 + h_1z^-1 + …$</p><p>We note that although the channel impulse $g_k$ is finite, the equaliser is a IIR filter and needs to be implemented <strong>using feedback</strong>. One way to do it is given below:</p><p><img src="image-20210225001819048.png" alt="image-20210225001819048"></p><p>We note that IIR filter can be problematic in stability and numerical stability.</p><p>Alternatively, we can use a FIR filter (truncated filter) to implement the ZF equaliser. There will be some ISI and the interference decreases as we increase the order of our filter.</p><p><img src="image-20210430004007701.png" alt="image-20210430004007701"></p><blockquote><p>A K+1 taps filter has impulse response $[h_0, h_1,…,h_K]$</p></blockquote><h3 id="Disadvantages-of-the-Zero-Forcing-Filter"><a href="#Disadvantages-of-the-Zero-Forcing-Filter" class="headerlink" title="Disadvantages of the Zero-Forcing Filter"></a>Disadvantages of the Zero-Forcing Filter</h3><p> The noise is also passed through the filter, and their variance is amplified. This is called <strong>noise enhancement</strong> and often it will destroy the Signal to Noise Ratio (SNR). </p><p><img src="image-20210225002331588.png" alt="image-20210225002331588"></p><p>For this reason, ZF equaliser is of no practical use.</p><h2 id="MMSE-Equaliser"><a href="#MMSE-Equaliser" class="headerlink" title="MMSE Equaliser"></a>MMSE Equaliser</h2><p>The Minimum Mean Square Error (MMSE) Equaliser explicitly tries to minimise the expected squared error between $X_m$ and $\hat X_m$</p><p><img src="image-20210225123947389.png" alt="image-20210225123947389"></p><blockquote><p>Note that the equaliser coefficent $h_l = c_{K-l}$</p></blockquote><p>We can derive the MMSE equaliser as follows:</p><p><img src="image-20210225003932890.png" alt="image-20210225003932890"></p><h1 id="Orthogonal-Frequency-Division-Multiplexing-OFDM"><a href="#Orthogonal-Frequency-Division-Multiplexing-OFDM" class="headerlink" title="Orthogonal Frequency Division Multiplexing (OFDM)"></a>Orthogonal Frequency Division Multiplexing (OFDM)</h1><p>We transmit $N+L$ symbols as a block in $(N+L)T_s$ time. There are $L$ cyclic symbols and $N$ useful symbols. $L$ is the number of non-zero entries of the effective filter $g[k]$, and is usually determined by the channel. </p><p>Bandwidth: $1/T_s$</p><p>Sub-band interval: $1/(NT_s)$</p><p>Symbol rate: $\frac{N}{(N+L)T_s}$</p><h2 id="OFDM-Transmitter"><a href="#OFDM-Transmitter" class="headerlink" title="OFDM Transmitter"></a>OFDM Transmitter</h2><p><img src="image-20210315112636659.png" alt="image-20210315112636659"></p><p>Below is a block diagram for OFDM transmitter:</p><p><img src="image-20210430010914262.png" alt="image-20210430010914262"></p><h2 id="OFDM-Parameters"><a href="#OFDM-Parameters" class="headerlink" title="OFDM Parameters"></a>OFDM Parameters</h2><p>The key parameters of OFDM transmission scheme is summarized below, including number of subcarriers, bandwidth, impulse response length, symbol transmission period, batch transmission period, guard interval duration etc.</p><p><img src="image-20210417014207362.png" alt="image-20210417014207362"></p><h1 id="Convolutional-Code"><a href="#Convolutional-Code" class="headerlink" title="Convolutional Code"></a>Convolutional Code</h1><p>In convolutional code, a stream of input bits is transformed into a stream of code bits using a shift register (filter). </p><p><img src="image-20210402102809190.png" alt="image-20210402102809190"></p><h2 id="Representations"><a href="#Representations" class="headerlink" title="Representations"></a>Representations</h2><p><img src="image-20210402102922713.png" alt="image-20210402102922713"></p><blockquote><p>Usually we are only interested in $k=1$. </p></blockquote><h3 id="State-Diagram"><a href="#State-Diagram" class="headerlink" title="State Diagram"></a>State Diagram</h3><p>We may also represent convolutional code using state diagrams as in a finite state machine. For a code length of $L$ we will have $2^{L-1}$ states. The output during the transition (<em>Mealy Machine</em>) is the code bits. For example:</p><p><img src="image-20210402103200636.png" alt="image-20210402103200636"></p><h2 id="Trellis-Diagram"><a href="#Trellis-Diagram" class="headerlink" title="Trellis Diagram"></a>Trellis Diagram</h2><p>The Trellis diagram is drawn by unravelling the state diagrams, with every possible transition at each time step. For example:</p><p><img src="image-20210402103413356.png" alt="image-20210402103413356"></p><blockquote><p>We use the convention that solid line - represents an input $0$, and dotted line — represents an input $1$</p></blockquote><p>We can see how the Trellis diagram include every possible transitions. It is very helpful in decoding convolutional code.</p><h2 id="Viterbi-Algorithm"><a href="#Viterbi-Algorithm" class="headerlink" title="Viterbi Algorithm"></a>Viterbi Algorithm</h2><p>Dynamic Programming (DP) is used to decode convolutional codes, so that we don’t need to iterate over all possible routes. Instead, for a convolutional code with $n$ stages, we only need to remember $n$ surviving routes and $n$ values for each state node. For details, checkout this <a href="handout12.pdf">handout</a>.</p><h2 id="Free-Distance"><a href="#Free-Distance" class="headerlink" title="Free Distance"></a>Free Distance</h2><p>Convolutional codes are <em>linear code</em>, which means we can find the maximum number of error bit for which the code can correct itself by looking at $\lfloor (d_{min}-1)/2 \rfloor$, where $d_{min}$ is the minimum hamming distance of any codeword excerpt the all-zero code. However, because the length of convolutional code is unlimited (<em>streaming code</em>), $d_{min}$ is not well defined (you will need to specify a length). Hence we use the <strong>free distance</strong> $d_{free}$ to characterize convolutional codes.</p><p>The easiest way to find the free distance $d_{free}$ is through the <strong>transfer function</strong>.</p><blockquote><p>Note that if we assume no burst of errors, the correcting capacity of a convolutional code is given by $\lfloor (d_{free}-1)/2 \rfloor$</p></blockquote><h2 id="Transfer-function"><a href="#Transfer-function" class="headerlink" title="Transfer function"></a>Transfer function</h2><p><img src="image-20210402105040468.png" alt="image-20210402105040468"></p><h3 id="Computing-and-Interpreting-the-Transfer-Function"><a href="#Computing-and-Interpreting-the-Transfer-Function" class="headerlink" title="Computing and Interpreting the Transfer Function"></a>Computing and Interpreting the Transfer Function</h3><p>From the transfer function we can obtain the <em>free distance</em>. By expanding the transfer function we actually obtain the whole spectrum of error sequences.</p><p>The extended transfer function define the following symbols:</p><ul><li>$D$: for each 1 in the output, multiply $D$</li><li>$J$: for each branch, multiply $J$</li><li>$N$: multiplied to each branch corresponds to an input of 1</li></ul><p><img src="image-20210402105113971.png" alt="image-20210402105113971"></p><p><img src="image-20210416195141720.png" alt="image-20210416195141720"></p><h2 id="Catestrophic-Encoder"><a href="#Catestrophic-Encoder" class="headerlink" title="Catestrophic Encoder"></a>Catestrophic Encoder</h2><p>A convolutional encoder is <strong>catastrophic</strong> if there exists two (arbitrarily long) code sequences which differ only in a small number of bits, but the corresponding two input sequences differ in an arbitrarily large number of bits. With such encoder, when one of these code sequences is transmitted a small number of channel errors can lead to an arbitrarily large number of errors in the (predicted) input sequence.</p><p>Below is a theorem which tests whether the encoder is catestrophic:</p><img src="image-20210417020623037.png" alt="image-20210417020623037" style="zoom:25%;" /><h1 id="TCP-Protocol"><a href="#TCP-Protocol" class="headerlink" title="TCP Protocol"></a>TCP Protocol</h1><p>Network has a layered structure as follows:</p><ol><li>Phyical layer: bits over channel</li><li>Link layer: reliable tx of frames</li><li>Network layer: data transmitted in packets</li><li>Transport layer: reliable end-to-end data transmission [congestion control, routing]</li><li>Application layer: protocols like HTTP, FTP and SSH used by applications</li></ol><p>The <strong>Transimission Control Protocol</strong> (TCP) is an end-to-end <em>transport</em> protocol. It specifies:</p><ol><li>How to establish connection</li><li>Connection maintenance<ul><li>Reliability</li><li>Congestion Control</li><li>Flow Control</li><li>Sequencing</li></ul></li><li>Connection termination</li></ol><h2 id="TCP-Reno"><a href="#TCP-Reno" class="headerlink" title="TCP-Reno"></a>TCP-Reno</h2><p>TCP-Reno is the algorithm used to regulate network traffic in order to avoid congestion collapse. The ground rules are:</p><ol><li>The receiver returns <code>ack</code> upon reception of each packet</li><li>The transmitter keeps a window of variable size $W$. In the window are packets that have been sent but not <code>ack</code>ed.</li><li>Each time the transmitter receives an <code>ack</code>, it shifts the window by $1$</li><li>The transmitter take the emprical mean and deviation of round-trip time (RTT) to estimate timeout.</li></ol><p>The algorihm is divided into two phases: the Slow Start phase (SS) and Congestion Avoidance (CA) phase</p><p><strong>Slow Start Phase (SS)</strong></p><p><img src="image-20210324190840595.png" alt="image-20210324190840595"></p><p><strong>Congestion Control Phase (CA)</strong></p><p><img src="image-20210324190853806.png" alt="image-20210324190853806"></p><p>We can use a continuous time model to calculate the transmission rate in steady state with error rate $q(t)$</p><p><img src="image-20210331222237739.png" alt="image-20210331222237739"></p><h2 id="Exceptions-Handle"><a href="#Exceptions-Handle" class="headerlink" title="Exceptions Handle"></a>Exceptions Handle</h2><h3 id="Fast-Retransmit"><a href="#Fast-Retransmit" class="headerlink" title="Fast Retransmit"></a>Fast Retransmit</h3><p>Waiting for timeout to happen can be very long. So instead TCP uses three duplicate <code>ack</code> as the indicator of packet loss. <a href="https://www.youtube.com/watch?v=VCjS1KxRRWE">TCP fast retransmit</a> demonstrates it pretty well.</p><h3 id="Fast-Recovery"><a href="#Fast-Recovery" class="headerlink" title="Fast Recovery"></a>Fast Recovery</h3><p><img src="image-20210324190942868.png" alt="image-20210324190942868"></p><h2 id="Long-term-Data-Rate"><a href="#Long-term-Data-Rate" class="headerlink" title="Long-term Data Rate"></a>Long-term Data Rate</h2><h1 id="Dijkstra’s-Algorithm"><a href="#Dijkstra’s-Algorithm" class="headerlink" title="Dijkstra’s Algorithm"></a>Dijkstra’s Algorithm</h1><p><a href="https://www.youtube.com/watch?v=_lHSawdgXpI">Dijkstra’s algorithm in 3 minutes — Review and example</a> is a good video illustrating Dijkstra’s Algorithm.</p><p><img src="image-20210331222440003.png" alt="image-20210331222440003"></p><p>Dijkstra’s Algorithm has time complexity $O(\log N\times N + L)$</p><p>Below is an example of executing Dijkstra’s Algorithm</p><p><img src="image-20210416195951525.png" alt="image-20210416195951525"></p><blockquote><p>Dijkstra’s algorithm works out the shortest path from A to <strong>all other</strong> reachable nodes</p></blockquote><h1 id="Bellman-Ford-Algorithm"><a href="#Bellman-Ford-Algorithm" class="headerlink" title="Bellman-Ford Algorithm"></a>Bellman-Ford Algorithm</h1><p><a href="https://www.youtube.com/watch?v=obWXjtg0L64">Bellman-Ford in 5 minutes - Step by step example</a> provides a working example of executing the Bellman-Ford algorithm</p><p>Bellman Ford is an iterative dynamic programming algorithm to work the minimal distance from <strong>every</strong> source to <strong>every</strong> nodes. It only requires message passing between adjacent nodes so it is <strong>distributed</strong> in nature. The time complexity is $O(N\times L)$, where $N$ is the number of nodes and $L$ is the number of links. The time complexity is worse than Dijkstra’s algorithm but it is much more flexible.</p><blockquote><p>Besides, Bellman Ford can handle negative costs which Dijkstra’s cannot</p></blockquote><p><img src="image-20210402110602281.png" alt="image-20210402110602281"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Cambridge</tag>
      
      <tag>Informatics</tag>
      
      <tag>Lecture Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
